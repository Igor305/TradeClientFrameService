using System;
using DataAccessLayer.Entities.Avrora37;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace DataAccessLayer.AppContext
{
    public partial class Avrora37Context : DbContext
    {
        public Avrora37Context()
        {
        }

        public Avrora37Context(DbContextOptions<Avrora37Context> options)
            : base(options)
        {
        }
       
        public virtual DbSet<EmployeeSalary> EmployeeSalary { get; set; }
        public virtual DbSet<AzTime> AzTimes { get; set; }
        public virtual DbSet<BAcc> BAccs { get; set; }
        public virtual DbSet<BAcc1> BAccs1 { get; set; }
        public virtual DbSet<BAccD> BAccDs { get; set; }
        public virtual DbSet<BAexp> BAexps { get; set; }
        public virtual DbSet<BAexp1> BAexps1 { get; set; }
        public virtual DbSet<BArec> BArecs { get; set; }
        public virtual DbSet<BArec1> BArecs1 { get; set; }
        public virtual DbSet<BArepA> BArepAs { get; set; }
        public virtual DbSet<BArepA1> BArepAs1 { get; set; }
        public virtual DbSet<BArepAa> BArepAas { get; set; }
        public virtual DbSet<BArepAd> BArepAds { get; set; }
        public virtual DbSet<BArepAdp> BArepAdps { get; set; }
        public virtual DbSet<BArepAdv> BArepAdvs { get; set; }
        public virtual DbSet<BBankExpAc> BBankExpAcs { get; set; }
        public virtual DbSet<BBankExpCc> BBankExpCcs { get; set; }
        public virtual DbSet<BBankPayAc> BBankPayAcs { get; set; }
        public virtual DbSet<BBankPayCc> BBankPayCcs { get; set; }
        public virtual DbSet<BBankRecAc> BBankRecAcs { get; set; }
        public virtual DbSet<BBankRecCc> BBankRecCcs { get; set; }
        public virtual DbSet<BCexp> BCexps { get; set; }
        public virtual DbSet<BCexp1> BCexps1 { get; set; }
        public virtual DbSet<BCinv> BCinvs { get; set; }
        public virtual DbSet<BCinv1> BCinvs1 { get; set; }
        public virtual DbSet<BCinvD> BCinvDs { get; set; }
        public virtual DbSet<BCrec> BCrecs { get; set; }
        public virtual DbSet<BCrec1> BCrecs1 { get; set; }
        public virtual DbSet<BCrepA> BCrepAs { get; set; }
        public virtual DbSet<BCrepA1> BCrepAs1 { get; set; }
        public virtual DbSet<BCrepAa> BCrepAas { get; set; }
        public virtual DbSet<BCrepAd> BCrepAds { get; set; }
        public virtual DbSet<BCrepAdp> BCrepAdps { get; set; }
        public virtual DbSet<BCrepAdv> BCrepAdvs { get; set; }
        public virtual DbSet<BCret> BCrets { get; set; }
        public virtual DbSet<BCret1> BCrets1 { get; set; }
        public virtual DbSet<BCretD> BCretDs { get; set; }
        public virtual DbSet<BCst> BCsts { get; set; }
        public virtual DbSet<BCst1> BCsts1 { get; set; }
        public virtual DbSet<BCstD> BCstDs { get; set; }
        public virtual DbSet<BDstack> BDstacks { get; set; }
        public virtual DbSet<BExp> BExps { get; set; }
        public virtual DbSet<BExp1> BExps1 { get; set; }
        public virtual DbSet<BExpD> BExpDs { get; set; }
        public virtual DbSet<BExpDlv> BExpDlvs { get; set; }
        public virtual DbSet<BGoperDoc> BGoperDocs { get; set; }
        public virtual DbSet<BGtran> BGtrans { get; set; }
        public virtual DbSet<BGtranD> BGtranDs { get; set; }
        public virtual DbSet<BGview> BGviews { get; set; }
        public virtual DbSet<BGviewD> BGviewDs { get; set; }
        public virtual DbSet<BGviewU> BGviewUs { get; set; }
        public virtual DbSet<BInv> BInvs { get; set; }
        public virtual DbSet<BInv1> BInvs1 { get; set; }
        public virtual DbSet<BInvD> BInvDs { get; set; }
        public virtual DbSet<BInvDlv> BInvDlvs { get; set; }
        public virtual DbSet<BLexp> BLexps { get; set; }
        public virtual DbSet<BLexp1> BLexps1 { get; set; }
        public virtual DbSet<BLexpD> BLexpDs { get; set; }
        public virtual DbSet<BLrec> BLrecs { get; set; }
        public virtual DbSet<BLrec1> BLrecs1 { get; set; }
        public virtual DbSet<BLrecD> BLrecDs { get; set; }
        public virtual DbSet<BPacc> BPaccs { get; set; }
        public virtual DbSet<BPacc1> BPaccs1 { get; set; }
        public virtual DbSet<BPaccD> BPaccDs { get; set; }
        public virtual DbSet<BPcost> BPcosts { get; set; }
        public virtual DbSet<BPcost1> BPcosts1 { get; set; }
        public virtual DbSet<BPcostD> BPcostDs { get; set; }
        public virtual DbSet<BPcostDdexp> BPcostDdexps { get; set; }
        public virtual DbSet<BPcostDdexpProd> BPcostDdexpProds { get; set; }
        public virtual DbSet<BPcostDexp> BPcostDexps { get; set; }
        public virtual DbSet<BPest> BPests { get; set; }
        public virtual DbSet<BPest1> BPests1 { get; set; }
        public virtual DbSet<BPestD> BPestDs { get; set; }
        public virtual DbSet<BPexc> BPexcs { get; set; }
        public virtual DbSet<BPexc1> BPexcs1 { get; set; }
        public virtual DbSet<BPexcD> BPexcDs { get; set; }
        public virtual DbSet<BPinP> BPinPs { get; set; }
        public virtual DbSet<BPinP1> BPinPs1 { get; set; }
        public virtual DbSet<BPven> BPvens { get; set; }
        public virtual DbSet<BPven1> BPvens1 { get; set; }
        public virtual DbSet<BPvenA> BPvenAs { get; set; }
        public virtual DbSet<BPvenD> BPvenDs { get; set; }
        public virtual DbSet<BRec> BRecs { get; set; }
        public virtual DbSet<BRec1> BRecs1 { get; set; }
        public virtual DbSet<BRecD> BRecDs { get; set; }
        public virtual DbSet<BRem> BRems { get; set; }
        public virtual DbSet<BRemAl> BRemAls { get; set; }
        public virtual DbSet<BRemAp> BRemAps { get; set; }
        public virtual DbSet<BRemAq> BRemAqs { get; set; }
        public virtual DbSet<BRemD> BRemDs { get; set; }
        public virtual DbSet<BRemDl> BRemDls { get; set; }
        public virtual DbSet<BRemDp> BRemDps { get; set; }
        public virtual DbSet<BRemDq> BRemDqs { get; set; }
        public virtual DbSet<BRepA> BRepAs { get; set; }
        public virtual DbSet<BRepA1> BRepAs1 { get; set; }
        public virtual DbSet<BRepAa> BRepAas { get; set; }
        public virtual DbSet<BRepAd> BRepAds { get; set; }
        public virtual DbSet<BRepAdp> BRepAdps { get; set; }
        public virtual DbSet<BRepAdv> BRepAdvs { get; set; }
        public virtual DbSet<BRet> BRets { get; set; }
        public virtual DbSet<BRet1> BRets1 { get; set; }
        public virtual DbSet<BRetD> BRetDs { get; set; }
        public virtual DbSet<BRetDlv> BRetDlvs { get; set; }
        public virtual DbSet<BSdep> BSdeps { get; set; }
        public virtual DbSet<BSdep1> BSdeps1 { get; set; }
        public virtual DbSet<BSdepD> BSdepDs { get; set; }
        public virtual DbSet<BSexc> BSexcs { get; set; }
        public virtual DbSet<BSexc1> BSexcs1 { get; set; }
        public virtual DbSet<BSexcD> BSexcDs { get; set; }
        public virtual DbSet<BSexp> BSexps { get; set; }
        public virtual DbSet<BSexp1> BSexps1 { get; set; }
        public virtual DbSet<BSexpD> BSexpDs { get; set; }
        public virtual DbSet<BSinv> BSinvs { get; set; }
        public virtual DbSet<BSinv1> BSinvs1 { get; set; }
        public virtual DbSet<BSinvD> BSinvDs { get; set; }
        public virtual DbSet<BSput> BSputs { get; set; }
        public virtual DbSet<BSput1> BSputs1 { get; set; }
        public virtual DbSet<BSputD> BSputDs { get; set; }
        public virtual DbSet<BSrec> BSrecs { get; set; }
        public virtual DbSet<BSrec1> BSrecs1 { get; set; }
        public virtual DbSet<BSrecD> BSrecDs { get; set; }
        public virtual DbSet<BSrep> BSreps { get; set; }
        public virtual DbSet<BSrep1> BSreps1 { get; set; }
        public virtual DbSet<BSrepAa> BSrepAas { get; set; }
        public virtual DbSet<BSrepDp> BSrepDps { get; set; }
        public virtual DbSet<BSrepDv> BSrepDvs { get; set; }
        public virtual DbSet<BSven> BSvens { get; set; }
        public virtual DbSet<BSven1> BSvens1 { get; set; }
        public virtual DbSet<BSvenD> BSvenDs { get; set; }
        public virtual DbSet<BSwer> BSwers { get; set; }
        public virtual DbSet<BSwer1> BSwers1 { get; set; }
        public virtual DbSet<BSwerD> BSwerDs { get; set; }
        public virtual DbSet<BTexp> BTexps { get; set; }
        public virtual DbSet<BTexp1> BTexps1 { get; set; }
        public virtual DbSet<BTran> BTrans { get; set; }
        public virtual DbSet<BTranC> BTranCs { get; set; }
        public virtual DbSet<BTranC1> BTranCs1 { get; set; }
        public virtual DbSet<BTranE> BTranEs { get; set; }
        public virtual DbSet<BTranE1> BTranEs1 { get; set; }
        public virtual DbSet<BTranH> BTranHs { get; set; }
        public virtual DbSet<BTranP> BTranPs { get; set; }
        public virtual DbSet<BTranP1> BTranPs1 { get; set; }
        public virtual DbSet<BTranSs> BTranSses { get; set; }
        public virtual DbSet<BTranV> BTranVs { get; set; }
        public virtual DbSet<BTranV1> BTranVs1 { get; set; }
        public virtual DbSet<BTrec> BTrecs { get; set; }
        public virtual DbSet<BTrec1> BTrecs1 { get; set; }
        public virtual DbSet<BWbill> BWbills { get; set; }
        public virtual DbSet<BWbill1> BWbills1 { get; set; }
        public virtual DbSet<BWbillA> BWbillAs { get; set; }
        public virtual DbSet<BWbillD> BWbillDs { get; set; }
        public virtual DbSet<BZIn> BZIns { get; set; }
        public virtual DbSet<BZInBa> BZInBas { get; set; }
        public virtual DbSet<BZInBc> BZInBcs { get; set; }
        public virtual DbSet<BZInC> BZInCs { get; set; }
        public virtual DbSet<BZInCa> BZInCas { get; set; }
        public virtual DbSet<BZInE> BZInEs { get; set; }
        public virtual DbSet<BZInH> BZInHs { get; set; }
        public virtual DbSet<BZInP> BZInPs { get; set; }
        public virtual DbSet<BZInV> BZInVs { get; set; }
        public virtual DbSet<CCompCor> CCompCors { get; set; }
        public virtual DbSet<CCompCurr> CCompCurrs { get; set; }
        public virtual DbSet<CCompExp> CCompExps { get; set; }
        public virtual DbSet<CCompIn> CCompIns { get; set; }
        public virtual DbSet<CCompRec> CCompRecs { get; set; }
        public virtual DbSet<CEmpCor> CEmpCors { get; set; }
        public virtual DbSet<CEmpCurr> CEmpCurrs { get; set; }
        public virtual DbSet<CEmpExc> CEmpExcs { get; set; }
        public virtual DbSet<CEmpExp> CEmpExps { get; set; }
        public virtual DbSet<CEmpIn> CEmpIns { get; set; }
        public virtual DbSet<CEmpRec> CEmpRecs { get; set; }
        public virtual DbSet<CEmpRep> CEmpReps { get; set; }
        public virtual DbSet<COurCor> COurCors { get; set; }
        public virtual DbSet<COurIn> COurIns { get; set; }
        public virtual DbSet<CPlanExp> CPlanExps { get; set; }
        public virtual DbSet<CPlanRec> CPlanRecs { get; set; }
        public virtual DbSet<CSal> CSals { get; set; }
        public virtual DbSet<CSal1> CSals1 { get; set; }
        public virtual DbSet<CSalD> CSalDs { get; set; }
        public virtual DbSet<CashOperationForAnalyticsByMonth> CashOperationForAnalyticsByMonths { get; set; }
        public virtual DbSet<ChRangeValue> ChRangeValues { get; set; }
        public virtual DbSet<CkzMonitoringDatum> CkzMonitoringData { get; set; }
        public virtual DbSet<CommandLog> CommandLogs { get; set; }
        public virtual DbSet<CountProd> CountProds { get; set; }
        public virtual DbSet<DelPinp> DelPinps { get; set; }
        public virtual DbSet<ExecutionPlanDateHistory> ExecutionPlanDateHistories { get; set; }
        public virtual DbSet<HpFilter> HpFilters { get; set; }
        public virtual DbSet<HpGroup> HpGroups { get; set; }
        public virtual DbSet<HpImport> HpImports { get; set; }
        public virtual DbSet<HpReport> HpReports { get; set; }
        public virtual DbSet<HpReportsF> HpReportsFs { get; set; }
        public virtual DbSet<HpUser> HpUsers { get; set; }
        public virtual DbSet<IImpTempl> IImpTempls { get; set; }
        public virtual DbSet<IImpTemplA> IImpTemplAs { get; set; }
        public virtual DbSet<IImpTemplD> IImpTemplDs { get; set; }
        public virtual DbSet<IcSalRate> IcSalRates { get; set; }
        public virtual DbSet<IlchenkoExcTemp> IlchenkoExcTemps { get; set; }
        public virtual DbSet<ImDefectQa> ImDefectQas { get; set; }
        public virtual DbSet<ImDefectoverageQa> ImDefectoverageQas { get; set; }
        public virtual DbSet<ImDeficitQa> ImDeficitQas { get; set; }
        public virtual DbSet<ImOverageQa> ImOverageQas { get; set; }
        public virtual DbSet<ImRegisterQa> ImRegisterQas { get; set; }
        public virtual DbSet<IrAm> IrAms { get; set; }
        public virtual DbSet<IrAmd> IrAmds { get; set; }
        public virtual DbSet<IrBrend> IrBrends { get; set; }
        public virtual DbSet<IrCentralWarehouse> IrCentralWarehouses { get; set; }
        public virtual DbSet<IrChildStock> IrChildStocks { get; set; }
        public virtual DbSet<IrCity> IrCitys { get; set; }
        public virtual DbSet<IrCollectionDay> IrCollectionDays { get; set; }
        public virtual DbSet<IrCommunicationChannel> IrCommunicationChannels { get; set; }
        public virtual DbSet<IrCompsChild> IrCompsChildren { get; set; }
        public virtual DbSet<IrCrexciseGr> IrCrexciseGrs { get; set; }
        public virtual DbSet<IrCrsetting> IrCrsettings { get; set; }
        public virtual DbSet<IrCstCode> IrCstCodes { get; set; }
        public virtual DbSet<IrDeliveryGroup> IrDeliveryGroups { get; set; }
        public virtual DbSet<IrDiscountsForEntitiesPerson> IrDiscountsForEntitiesPersons { get; set; }
        public virtual DbSet<IrFop> IrFops { get; set; }
        public virtual DbSet<IrGoodsSpecification> IrGoodsSpecifications { get; set; }
        public virtual DbSet<IrItemGr> IrItemGrs { get; set; }
        public virtual DbSet<IrItemGrCodes1> IrItemGrCodes1s { get; set; }
        public virtual DbSet<IrMerchGroup> IrMerchGroups { get; set; }
        public virtual DbSet<IrMerchGroupD> IrMerchGroupDs { get; set; }
        public virtual DbSet<IrPcatReview> IrPcatReviews { get; set; }
        public virtual DbSet<IrPcatReviewD> IrPcatReviewDs { get; set; }
        public virtual DbSet<IrPersonEmp> IrPersonEmps { get; set; }
        public virtual DbSet<IrProdEp> IrProdEps { get; set; }
        public virtual DbSet<IrProdEpd> IrProdEpds { get; set; }
        public virtual DbSet<IrProdG6> IrProdG6s { get; set; }
        public virtual DbSet<IrProdGh> IrProdGhs { get; set; }
        public virtual DbSet<IrProdKm> IrProdKms { get; set; }
        public virtual DbSet<IrProdSubgroupPrint> IrProdSubgroupPrints { get; set; }
        public virtual DbSet<IrProdSumHistory> IrProdSumHistories { get; set; }
        public virtual DbSet<IrProdsCc> IrProdsCcs { get; set; }
        public virtual DbSet<IrRecCat> IrRecCats { get; set; }
        public virtual DbSet<IrRegion> IrRegions { get; set; }
        public virtual DbSet<IrSeason> IrSeasons { get; set; }
        public virtual DbSet<IrShedulesTt> IrShedulesTts { get; set; }
        public virtual DbSet<IrShop> IrShops { get; set; }
        public virtual DbSet<IrShopsBeforeJob> IrShopsBeforeJobs { get; set; }
        public virtual DbSet<IrStatisticsAzTmp> IrStatisticsAzTmps { get; set; }
        public virtual DbSet<IrStockArendum> IrStockArenda { get; set; }
        public virtual DbSet<IrStockBrend> IrStockBrends { get; set; }
        public virtual DbSet<IrStockCodeId5> IrStockCodeId5s { get; set; }
        public virtual DbSet<IrStockDate> IrStockDates { get; set; }
        public virtual DbSet<IrStockStaff> IrStockStaffs { get; set; }
        public virtual DbSet<IrSubStock> IrSubStocks { get; set; }
        public virtual DbSet<IrUnPrPg1> IrUnPrPg1s { get; set; }
        public virtual DbSet<IrUnPrPg1d> IrUnPrPg1ds { get; set; }
        public virtual DbSet<IrWteam> IrWteams { get; set; }
        public virtual DbSet<ItAktPlan> ItAktPlans { get; set; }
        public virtual DbSet<ItAktPlanD> ItAktPlanDs { get; set; }
        public virtual DbSet<ItAktPlanPcat> ItAktPlanPcats { get; set; }
        public virtual DbSet<ItAktPlanSpend> ItAktPlanSpends { get; set; }
        public virtual DbSet<ItAktPlanStock> ItAktPlanStocks { get; set; }
        public virtual DbSet<ItAllrateBasePgrId> ItAllrateBasePgrIds { get; set; }
        public virtual DbSet<ItAllrateBasePgrIdd> ItAllrateBasePgrIdds { get; set; }
        public virtual DbSet<ItAllrateBasesCat> ItAllrateBasesCats { get; set; }
        public virtual DbSet<ItAllrateBasesCatD> ItAllrateBasesCatDs { get; set; }
        public virtual DbSet<ItAllrateBasesD> ItAllrateBasesDs { get; set; }
        public virtual DbSet<ItAllrateBasis> ItAllrateBases { get; set; }
        public virtual DbSet<ItBonu> ItBonus { get; set; }
        public virtual DbSet<ItBonusD> ItBonusDs { get; set; }
        public virtual DbSet<ItCalcRemsQty2Cache> ItCalcRemsQty2Caches { get; set; }
        public virtual DbSet<ItCancPrice> ItCancPrices { get; set; }
        public virtual DbSet<ItCancPriceCat> ItCancPriceCats { get; set; }
        public virtual DbSet<ItCancPriceD> ItCancPriceDs { get; set; }
        public virtual DbSet<ItCashRegister> ItCashRegisters { get; set; }
        public virtual DbSet<ItCashRegistersD> ItCashRegistersDs { get; set; }
        public virtual DbSet<ItCexp> ItCexps { get; set; }
        public virtual DbSet<ItCheckStock> ItCheckStocks { get; set; }
        public virtual DbSet<ItChildCompPay> ItChildCompPays { get; set; }
        public virtual DbSet<ItCprice> ItCprices { get; set; }
        public virtual DbSet<ItCpricesD> ItCpricesDs { get; set; }
        public virtual DbSet<ItCrec> ItCrecs { get; set; }
        public virtual DbSet<ItCretChildCompPay> ItCretChildCompPays { get; set; }
        public virtual DbSet<ItDashBoardRemOnDateInPriceCcIn> ItDashBoardRemOnDateInPriceCcIns { get; set; }
        public virtual DbSet<ItDayRem> ItDayRems { get; set; }
        public virtual DbSet<ItDayRemD> ItDayRemDs { get; set; }
        public virtual DbSet<ItDisEmp> ItDisEmps { get; set; }
        public virtual DbSet<ItDisRateBasesPcat> ItDisRateBasesPcats { get; set; }
        public virtual DbSet<ItDisRateBasesPgrId> ItDisRateBasesPgrIds { get; set; }
        public virtual DbSet<ItDisRateBasis> ItDisRateBases { get; set; }
        public virtual DbSet<ItDisSale> ItDisSales { get; set; }
        public virtual DbSet<ItEkvContract> ItEkvContracts { get; set; }
        public virtual DbSet<ItEkvContractD> ItEkvContractDs { get; set; }
        public virtual DbSet<ItEmpTax> ItEmpTaxes { get; set; }
        public virtual DbSet<ItEmpTaxD> ItEmpTaxDs { get; set; }
        public virtual DbSet<ItEoeRateBasesPcat> ItEoeRateBasesPcats { get; set; }
        public virtual DbSet<ItEoexpC> ItEoexpCs { get; set; }
        public virtual DbSet<ItEoexpDNewAchId> ItEoexpDNewAchIds { get; set; }
        public virtual DbSet<ItEoexpRateBasis> ItEoexpRateBases { get; set; }
        public virtual DbSet<ItEoexpValue> ItEoexpValues { get; set; }
        public virtual DbSet<ItEoprep> ItEopreps { get; set; }
        public virtual DbSet<ItEoprepD> ItEoprepDs { get; set; }
        public virtual DbSet<ItEoprepDReserve> ItEoprepDReserves { get; set; }
        public virtual DbSet<ItEoprepDd> ItEoprepDds { get; set; }
        public virtual DbSet<ItEoprepDdReserve> ItEoprepDdReserves { get; set; }
        public virtual DbSet<ItEoprepReserve> ItEoprepReserves { get; set; }
        public virtual DbSet<ItEoremD> ItEoremDs { get; set; }
        public virtual DbSet<ItEppChildCompPay> ItEppChildCompPays { get; set; }
        public virtual DbSet<ItExplan> ItExplans { get; set; }
        public virtual DbSet<ItExplanD> ItExplanDs { get; set; }
        public virtual DbSet<ItFlowChart> ItFlowCharts { get; set; }
        public virtual DbSet<ItFlowChartD> ItFlowChartDs { get; set; }
        public virtual DbSet<ItFlowChartMode> ItFlowChartModes { get; set; }
        public virtual DbSet<ItFlowChartPriceParam> ItFlowChartPriceParams { get; set; }
        public virtual DbSet<ItFlowChartStock> ItFlowChartStocks { get; set; }
        public virtual DbSet<ItFlowChartValue> ItFlowChartValues { get; set; }
        public virtual DbSet<ItImpDcardId> ItImpDcardIds { get; set; }
        public virtual DbSet<ItImpSale> ItImpSales { get; set; }
        public virtual DbSet<ItImpSaleC> ItImpSaleCs { get; set; }
        public virtual DbSet<ItImpSaleD> ItImpSaleDs { get; set; }
        public virtual DbSet<ItImpSalePay> ItImpSalePays { get; set; }
        public virtual DbSet<ItImportSale> ItImportSales { get; set; }
        public virtual DbSet<ItInvUnknBarCode> ItInvUnknBarCodes { get; set; }
        public virtual DbSet<ItLogCalcCatEoexp> ItLogCalcCatEoexps { get; set; }
        public virtual DbSet<ItLogChargeBonu> ItLogChargeBonus { get; set; }
        public virtual DbSet<ItLogDiscRecExp> ItLogDiscRecExps { get; set; }
        public virtual DbSet<ItLogEmpBarcode> ItLogEmpBarcodes { get; set; }
        public virtual DbSet<ItLogProdHigh> ItLogProdHighs { get; set; }
        public virtual DbSet<ItLogProdLow> ItLogProdLows { get; set; }
        public virtual DbSet<ItLogimpSale> ItLogimpSales { get; set; }
        public virtual DbSet<ItLogisticsResultsHistory> ItLogisticsResultsHistories { get; set; }
        public virtual DbSet<ItManTemplate> ItManTemplates { get; set; }
        public virtual DbSet<ItManTemplateD> ItManTemplateDs { get; set; }
        public virtual DbSet<ItNegativeSale> ItNegativeSales { get; set; }
        public virtual DbSet<ItOrdProdsRnd> ItOrdProdsRnds { get; set; }
        public virtual DbSet<ItParishJournal> ItParishJournals { get; set; }
        public virtual DbSet<ItParishJournalD> ItParishJournalDs { get; set; }
        public virtual DbSet<ItPercentDeliveryHistory> ItPercentDeliveryHistories { get; set; }
        public virtual DbSet<ItPlanSaleStockOnDate> ItPlanSaleStockOnDates { get; set; }
        public virtual DbSet<ItPlanSaleStockOnDateD> ItPlanSaleStockOnDateDs { get; set; }
        public virtual DbSet<ItPrintUserBarcode> ItPrintUserBarcodes { get; set; }
        public virtual DbSet<ItProce> ItProces { get; set; }
        public virtual DbSet<ItProcess> ItProcesses { get; set; }
        public virtual DbSet<ItProcessTemp> ItProcessTemps { get; set; }
        public virtual DbSet<ItProdsInTransit> ItProdsInTransits { get; set; }
        public virtual DbSet<ItProdsInTransitD> ItProdsInTransitDs { get; set; }
        public virtual DbSet<ItQualityProd> ItQualityProds { get; set; }
        public virtual DbSet<ItRangeMatrix> ItRangeMatrices { get; set; }
        public virtual DbSet<ItRangeMatrixD> ItRangeMatricesD { get; set; }
        public virtual DbSet<ItReDisRemSaleByDate> ItReDisRemSaleByDates { get; set; }
        public virtual DbSet<ItRecRateBasesPcat> ItRecRateBasesPcats { get; set; }
        public virtual DbSet<ItRecRateBasesPgrId> ItRecRateBasesPgrIds { get; set; }
        public virtual DbSet<ItRecRateBasis> ItRecRateBases { get; set; }
        public virtual DbSet<ItRecRlog> ItRecRlogs { get; set; }
        public virtual DbSet<ItRecUnknBarCode> ItRecUnknBarCodes { get; set; }
        public virtual DbSet<ItRedistribution> ItRedistributions { get; set; }
        public virtual DbSet<ItRemDiff> ItRemDiffs { get; set; }
        public virtual DbSet<ItRembydate> ItRembydates { get; set; }
        public virtual DbSet<ItRevaluationPlanning> ItRevaluationPlannings { get; set; }
        public virtual DbSet<ItRevaluationPlanningD> ItRevaluationPlanningDs { get; set; }
        public virtual DbSet<ItRlog> ItRlogs { get; set; }
        public virtual DbSet<ItRlogD> ItRlogDs { get; set; }
        public virtual DbSet<ItRlogDd> ItRlogDds { get; set; }
        public virtual DbSet<ItRouteSheet> ItRouteSheets { get; set; }
        public virtual DbSet<ItRouteSheetD> ItRouteSheetDs { get; set; }
        public virtual DbSet<ItSendMessage> ItSendMessages { get; set; }
        public virtual DbSet<ItStockMap> ItStockMaps { get; set; }
        public virtual DbSet<ItSupplyDashboard> ItSupplyDashboards { get; set; }
        public virtual DbSet<ItTsdBarcode> ItTsdBarcodes { get; set; }
        public virtual DbSet<ItTsdContragent> ItTsdContragents { get; set; }
        public virtual DbSet<ItTsdDocDetail> ItTsdDocDetails { get; set; }
        public virtual DbSet<ItTsdDocHead> ItTsdDocHeads { get; set; }
        public virtual DbSet<ItTsdGood> ItTsdGoods { get; set; }
        public virtual DbSet<ItTsdUser> ItTsdUsers { get; set; }
        public virtual DbSet<ItUnitBalance> ItUnitBalances { get; set; }
        public virtual DbSet<ItUnitBalanceStatic> ItUnitBalanceStatics { get; set; }
        public virtual DbSet<ItVenDiff> ItVenDiffs { get; set; }
        public virtual DbSet<ItVenGr> ItVenGrs { get; set; }
        public virtual DbSet<ItVenGrsD> ItVenGrsDs { get; set; }
        public virtual DbSet<ItVenHistory> ItVenHistories { get; set; }
        public virtual DbSet<ItVenMarriage> ItVenMarriages { get; set; }
        public virtual DbSet<ItVenReGrading> ItVenReGradings { get; set; }
        public virtual DbSet<ItVenTsd> ItVenTsds { get; set; }
        public virtual DbSet<ItVenUnknBarCode> ItVenUnknBarCodes { get; set; }
        public virtual DbSet<ItWorkTime> ItWorkTimes { get; set; }
        public virtual DbSet<ItWorkTimeD> ItWorkTimeDs { get; set; }
        public virtual DbSet<ItWtime> ItWtimes { get; set; }
        public virtual DbSet<ItWtimeD> ItWtimeDs { get; set; }
        public virtual DbSet<ItXRep> ItXReps { get; set; }
        public virtual DbSet<IvAccUser> IvAccUsers { get; set; }
        public virtual DbSet<IvAllrateBasePgrId> IvAllrateBasePgrIds { get; set; }
        public virtual DbSet<IvAllrateBasis> IvAllrateBases { get; set; }
        public virtual DbSet<IvBonu> IvBonus { get; set; }
        public virtual DbSet<IvControlOfOrder> IvControlOfOrders { get; set; }
        public virtual DbSet<IvCprice> IvCprices { get; set; }
        public virtual DbSet<IvDcardSalesIndexed> IvDcardSalesIndexeds { get; set; }
        public virtual DbSet<IvEmpTax> IvEmpTaxes { get; set; }
        public virtual DbSet<IvEoexp> IvEoexps { get; set; }
        public virtual DbSet<IvEoexpDoff> IvEoexpDoffs { get; set; }
        public virtual DbSet<IvEoexpDon> IvEoexpDons { get; set; }
        public virtual DbSet<IvEoexpReestr> IvEoexpReestrs { get; set; }
        public virtual DbSet<IvEoexpReestrDd> IvEoexpReestrDds { get; set; }
        public virtual DbSet<IvEoprep> IvEopreps { get; set; }
        public virtual DbSet<IvEoprepDoff> IvEoprepDoffs { get; set; }
        public virtual DbSet<IvEoprepDon> IvEoprepDons { get; set; }
        public virtual DbSet<IvExc> IvExcs { get; set; }
        public virtual DbSet<IvExc1> IvExcs1 { get; set; }
        public virtual DbSet<IvFlowChart> IvFlowCharts { get; set; }
        public virtual DbSet<IvFlowChartD> IvFlowChartDs { get; set; }
        public virtual DbSet<IvFlowChartUserVar> IvFlowChartUserVars { get; set; }
        public virtual DbSet<IvLogDiscrecExp> IvLogDiscrecExps { get; set; }
        public virtual DbSet<IvParishJournal> IvParishJournals { get; set; }
        public virtual DbSet<IvParishJournald> IvParishJournalds { get; set; }
        public virtual DbSet<IvParishJournalz> IvParishJournalzs { get; set; }
        public virtual DbSet<IvProdsInTransit> IvProdsInTransits { get; set; }
        public virtual DbSet<IvRangeMatrixP> IvRangeMatricesP { get; set; }
        public virtual DbSet<IvRecGab> IvRecGabs { get; set; }
        public virtual DbSet<IvRemDtransQty> IvRemDtransQties { get; set; }
        public virtual DbSet<IvReportDcownerAnalysis> IvReportDcownerAnalyses { get; set; }
        public virtual DbSet<IvReportDcownerAnalysis1> IvReportDcownerAnalysis1s { get; set; }
        public virtual DbSet<IvReportSalesAnalysis> IvReportSalesAnalyses { get; set; }
        public virtual DbSet<IvReportSalesAnalysisOld> IvReportSalesAnalysisOlds { get; set; }
        public virtual DbSet<IvReportSalesFrequencyAnalysis> IvReportSalesFrequencyAnalyses { get; set; }
        public virtual DbSet<IvRevaluationPlanning> IvRevaluationPlannings { get; set; }
        public virtual DbSet<IvRlog> IvRlogs { get; set; }
        public virtual DbSet<IvSumbonu> IvSumbonus { get; set; }
        public virtual DbSet<JobError> JobErrors { get; set; }
        public virtual DbSet<LflHistory> LflHistories { get; set; }
        public virtual DbSet<LfldetailHistory> LfldetailHistories { get; set; }
        public virtual DbSet<Ost> Osts { get; set; }
        public virtual DbSet<Ost201712> Ost201712s { get; set; }
        public virtual DbSet<Ost201801> Ost201801s { get; set; }
        public virtual DbSet<Ost201802> Ost201802s { get; set; }
        public virtual DbSet<Ost201803> Ost201803s { get; set; }
        public virtual DbSet<Ost201804> Ost201804s { get; set; }
        public virtual DbSet<Ost201805> Ost201805s { get; set; }
        public virtual DbSet<Ost201806> Ost201806s { get; set; }
        public virtual DbSet<Ost201807> Ost201807s { get; set; }
        public virtual DbSet<Ost201808> Ost201808s { get; set; }
        public virtual DbSet<Ost201809> Ost201809s { get; set; }
        public virtual DbSet<Ost201810> Ost201810s { get; set; }
        public virtual DbSet<Ost201811> Ost201811s { get; set; }
        public virtual DbSet<Ost201812> Ost201812s { get; set; }
        public virtual DbSet<Ost201901> Ost201901s { get; set; }
        public virtual DbSet<Ost201902> Ost201902s { get; set; }
        public virtual DbSet<Ost20190207> Ost20190207s { get; set; }
        public virtual DbSet<Ost201903> Ost201903s { get; set; }
        public virtual DbSet<PCommunalTax> PCommunalTaxes { get; set; }
        public virtual DbSet<PCommunalTax1> PCommunalTaxs { get; set; }
        public virtual DbSet<PCommunalTaxD> PCommunalTaxDs { get; set; }
        public virtual DbSet<PCommunalTaxDd> PCommunalTaxDds { get; set; }
        public virtual DbSet<PCpi> PCpis { get; set; }
        public virtual DbSet<PCwtime> PCwtimes { get; set; }
        public virtual DbSet<PCwtime1> PCwtimes1 { get; set; }
        public virtual DbSet<PCwtimeCor> PCwtimeCors { get; set; }
        public virtual DbSet<PCwtimeCor1> PCwtimeCors1 { get; set; }
        public virtual DbSet<PCwtimeD> PCwtimeDs { get; set; }
        public virtual DbSet<PCwtimeDd> PCwtimeDds { get; set; }
        public virtual DbSet<PCwtimeDdext> PCwtimeDdexts { get; set; }
        public virtual DbSet<PCwtimesE> PCwtimesEs { get; set; }
        public virtual DbSet<PCwtimesEe> PCwtimesEes { get; set; }
        public virtual DbSet<PDtran> PDtrans { get; set; }
        public virtual DbSet<PEdi> PEdis { get; set; }
        public virtual DbSet<PEdiss> PEdisses { get; set; }
        public virtual DbSet<PEdissE> PEdissEs1 { get; set; }
        public virtual DbSet<PEexc> PEexcs { get; set; }
        public virtual DbSet<PEexc1> PEexcs1 { get; set; }
        public virtual DbSet<PEgiv> PEgivs { get; set; }
        public virtual DbSet<PEgiv1> PEgivs1 { get; set; }
        public virtual DbSet<PEleav> PEleavs { get; set; }
        public virtual DbSet<PEleav1> PEleavs1 { get; set; }
        public virtual DbSet<PEleavCor> PEleavCors { get; set; }
        public virtual DbSet<PEleavCor1> PEleavCors1 { get; set; }
        public virtual DbSet<PEleavCorD> PEleavCorDs { get; set; }
        public virtual DbSet<PEleavD> PEleavDs { get; set; }
        public virtual DbSet<PEleavDd> PEleavDds { get; set; }
        public virtual DbSet<PEleavDp> PEleavDps { get; set; }
        public virtual DbSet<PEleavsDpe> PEleavsDpes { get; set; }
        public virtual DbSet<PEleavsE> PEleavsEs { get; set; }
        public virtual DbSet<PEmpIn> PEmpIns { get; set; }
        public virtual DbSet<PEmpInLeav> PEmpInLeavs { get; set; }
        public virtual DbSet<PEmpInLexp> PEmpInLexps { get; set; }
        public virtual DbSet<PEmpInLrec> PEmpInLrecs { get; set; }
        public virtual DbSet<PEmpInWtime> PEmpInWtimes { get; set; }
        public virtual DbSet<PEmpSchedExt> PEmpSchedExts { get; set; }
        public virtual DbSet<PEmpSchedExt1> PEmpSchedExts1 { get; set; }
        public virtual DbSet<PEmpSchedExtD> PEmpSchedExtDs { get; set; }
        public virtual DbSet<PEsic> PEsics { get; set; }
        public virtual DbSet<PEsic1> PEsics1 { get; set; }
        public virtual DbSet<PEsicA> PEsicAs { get; set; }
        public virtual DbSet<PEsicAsE> PEsicAsEs { get; set; }
        public virtual DbSet<PEsicD> PEsicDs { get; set; }
        public virtual DbSet<PEsicsE> PEsicsEs { get; set; }
        public virtual DbSet<PEtrp> PEtrps { get; set; }
        public virtual DbSet<PEtrp1> PEtrps1 { get; set; }
        public virtual DbSet<PEtrpsE> PEtrpsEs { get; set; }
        public virtual DbSet<PEwri> PEwris { get; set; }
        public virtual DbSet<PEwri1> PEwris1 { get; set; }
        public virtual DbSet<PEwriP> PEwriPs { get; set; }
        public virtual DbSet<PEwrisE> PEwrisEs { get; set; }
        public virtual DbSet<PEwrk> PEwrks { get; set; }
        public virtual DbSet<PEwrk1> PEwrks1 { get; set; }
        public virtual DbSet<PEwrkD> PEwrkDs { get; set; }
        public virtual DbSet<PEwrksE> PEwrksEs { get; set; }
        public virtual DbSet<PLeaveSched> PLeaveScheds { get; set; }
        public virtual DbSet<PLeaveSched1> PLeaveScheds1 { get; set; }
        public virtual DbSet<PLeaveSchedD> PLeaveSchedDs { get; set; }
        public virtual DbSet<PLexc> PLexcs { get; set; }
        public virtual DbSet<PLexc1> PLexcs1 { get; set; }
        public virtual DbSet<PLexcD> PLexcDs { get; set; }
        public virtual DbSet<PLexcsE> PLexcsEs { get; set; }
        public virtual DbSet<PLexp> PLexps { get; set; }
        public virtual DbSet<PLexp1> PLexps1 { get; set; }
        public virtual DbSet<PLexpD> PLexpDs { get; set; }
        public virtual DbSet<PLexpsE> PLexpsEs { get; set; }
        public virtual DbSet<PLmem> PLmems { get; set; }
        public virtual DbSet<PLmem1> PLmems1 { get; set; }
        public virtual DbSet<PLmemD> PLmemDs { get; set; }
        public virtual DbSet<PLrec> PLrecs { get; set; }
        public virtual DbSet<PLrec1> PLrecs1 { get; set; }
        public virtual DbSet<PLrecD> PLrecDs { get; set; }
        public virtual DbSet<PLrecDcor> PLrecDcors { get; set; }
        public virtual DbSet<PLrecDcorCr> PLrecDcorCrs { get; set; }
        public virtual DbSet<PLrecDd> PLrecDds { get; set; }
        public virtual DbSet<PLrecDdsE> PLrecDdsEs { get; set; }
        public virtual DbSet<PLrecsE> PLrecsEs { get; set; }
        public virtual DbSet<PLstr> PLstrs { get; set; }
        public virtual DbSet<PLstr1> PLstrs1 { get; set; }
        public virtual DbSet<PLstrD> PLstrDs { get; set; }
        public virtual DbSet<POpwrk> POpwrks { get; set; }
        public virtual DbSet<POpwrk1> POpwrks1 { get; set; }
        public virtual DbSet<POpwrkD> POpwrkDs { get; set; }
        public virtual DbSet<POpwrksE> POpwrksEs { get; set; }
        public virtual DbSet<PPostStruc> PPostStrucs { get; set; }
        public virtual DbSet<PPostStruc1> PPostStrucs1 { get; set; }
        public virtual DbSet<PPostStrucD> PPostStrucDs { get; set; }
        public virtual DbSet<PPostStrucEdate> PPostStrucEdates { get; set; }
        public virtual DbSet<PSubStruc> PSubStrucs { get; set; }
        public virtual DbSet<PSubStruc1> PSubStrucs1 { get; set; }
        public virtual DbSet<PSubStrucD> PSubStrucDs { get; set; }
        public virtual DbSet<PTser> PTsers { get; set; }
        public virtual DbSet<PTser1> PTsers1 { get; set; }
        public virtual DbSet<PTserD> PTserDs { get; set; }
        public virtual DbSet<PTsersE> PTsersEs { get; set; }
        public virtual DbSet<PWexc> PWexcs { get; set; }
        public virtual DbSet<PWexc1> PWexcs1 { get; set; }
        public virtual DbSet<ProductInBonusOnDate> ProductInBonusOnDates { get; set; }
        public virtual DbSet<QaAchievement> QaAchievements { get; set; }
        public virtual DbSet<QaLog> QaLogs { get; set; }
        public virtual DbSet<QaLogsD> QaLogsDs { get; set; }
        public virtual DbSet<QaSession> QaSessions { get; set; }
        public virtual DbSet<QaSessionD> QaSessionDs { get; set; }
        public virtual DbSet<QaType> QaTypes { get; set; }
        public virtual DbSet<RAsset> RAssets { get; set; }
        public virtual DbSet<RAssetC> RAssetCs { get; set; }
        public virtual DbSet<RAssetG> RAssetGs { get; set; }
        public virtual DbSet<RAssetG1> RAssetG1s { get; set; }
        public virtual DbSet<RAssetGdep> RAssetGdeps { get; set; }
        public virtual DbSet<RAssetH> RAssetHs { get; set; }
        public virtual DbSet<RBank> RBanks { get; set; }
        public virtual DbSet<RBankGr> RBankGrs { get; set; }
        public virtual DbSet<RBserv> RBservs { get; set; }
        public virtual DbSet<RBservParam> RBservParams { get; set; }
        public virtual DbSet<RBservProd> RBservProds { get; set; }
        public virtual DbSet<RCandidate> RCandidates { get; set; }
        public virtual DbSet<RCandidateFile> RCandidateFiles { get; set; }
        public virtual DbSet<RCarr> RCarrs { get; set; }
        public virtual DbSet<RCarrsC> RCarrsCs { get; set; }
        public virtual DbSet<RCodes1> RCodes1s { get; set; }
        public virtual DbSet<RCodes2> RCodes2s { get; set; }
        public virtual DbSet<RCodes3> RCodes3s { get; set; }
        public virtual DbSet<RCodes4> RCodes4s { get; set; }
        public virtual DbSet<RCodes5> RCodes5s { get; set; }
        public virtual DbSet<RCodes6> RCodes6s { get; set; }
        public virtual DbSet<RComp> RComps { get; set; }
        public virtual DbSet<RCompContact> RCompContacts { get; set; }
        public virtual DbSet<RCompG> RCompGs { get; set; }
        public virtual DbSet<RCompGrs1> RCompGrs1s { get; set; }
        public virtual DbSet<RCompGrs2> RCompGrs2s { get; set; }
        public virtual DbSet<RCompGrs3> RCompGrs3s { get; set; }
        public virtual DbSet<RCompGrs4> RCompGrs4s { get; set; }
        public virtual DbSet<RCompGrs5> RCompGrs5s { get; set; }
        public virtual DbSet<RCompMg> RCompMgs { get; set; }
        public virtual DbSet<RCompValue> RCompValues { get; set; }
        public virtual DbSet<RCompsAc> RCompsAcs { get; set; }
        public virtual DbSet<RCompsAdd> RCompsAdds { get; set; }
        public virtual DbSet<RCompsCc> RCompsCcs { get; set; }
        public virtual DbSet<RCountry> RCountries { get; set; }
        public virtual DbSet<RCr> RCrs { get; set; }
        public virtual DbSet<RCrdeskG> RCrdeskGs { get; set; }
        public virtual DbSet<RCrmm> RCrmms { get; set; }
        public virtual DbSet<RCrmp> RCrmps { get; set; }
        public virtual DbSet<RCrpospay> RCrpospays { get; set; }
        public virtual DbSet<RCrshed> RCrsheds { get; set; }
        public virtual DbSet<RCrsrv> RCrsrvs { get; set; }
        public virtual DbSet<RCruniInput> RCruniInputs { get; set; }
        public virtual DbSet<RCurr> RCurrs { get; set; }
        public virtual DbSet<RCurrD> RCurrDs { get; set; }
        public virtual DbSet<RCurrH> RCurrHs { get; set; }
        public virtual DbSet<RDbi> RDbis { get; set; }
        public virtual DbSet<RDcard> RDcards { get; set; }
        public virtual DbSet<RDcfirstPurchase> RDcfirstPurchases { get; set; }
        public virtual DbSet<RDctype> RDctypes { get; set; }
        public virtual DbSet<RDctypeG> RDctypeGs { get; set; }
        public virtual DbSet<RDctypeP> RDctypePs { get; set; }
        public virtual DbSet<RDep> RDeps { get; set; }
        public virtual DbSet<RDesk> RDesks { get; set; }
        public virtual DbSet<RDeskG> RDeskGs { get; set; }
        public virtual DbSet<RDeviceType> RDeviceTypes { get; set; }
        public virtual DbSet<RDisc> RDiscs { get; set; }
        public virtual DbSet<RDiscChargeD> RDiscChargeDs { get; set; }
        public virtual DbSet<RDiscChargeDt> RDiscChargeDts { get; set; }
        public virtual DbSet<RDiscDc> RDiscDcs { get; set; }
        public virtual DbSet<RDiscMessage> RDiscMessages { get; set; }
        public virtual DbSet<RDiscMessagesT> RDiscMessagesTs { get; set; }
        public virtual DbSet<RDiscSale> RDiscSales { get; set; }
        public virtual DbSet<RDiscSaleBonu> RDiscSaleBonus { get; set; }
        public virtual DbSet<RDiscSaleD> RDiscSaleDs { get; set; }
        public virtual DbSet<RDiscSaleDbonu> RDiscSaleDbonus { get; set; }
        public virtual DbSet<RDiscSaleDt> RDiscSaleDts { get; set; }
        public virtual DbSet<RDiscSaleT> RDiscSaleTs { get; set; }
        public virtual DbSet<RDiscsT> RDiscsTs { get; set; }
        public virtual DbSet<RDisplay> RDisplays { get; set; }
        public virtual DbSet<RDocShed> RDocSheds { get; set; }
        public virtual DbSet<RDocShedD> RDocShedDs { get; set; }
        public virtual DbSet<REmp> REmps { get; set; }
        public virtual DbSet<REmpAcc> REmpAccs { get; set; }
        public virtual DbSet<REmpAct> REmpActs { get; set; }
        public virtual DbSet<REmpAdd> REmpAdds { get; set; }
        public virtual DbSet<REmpFile> REmpFiles { get; set; }
        public virtual DbSet<REmpInc> REmpIncs { get; set; }
        public virtual DbSet<REmpKin> REmpKins { get; set; }
        public virtual DbSet<REmpMo> REmpMos { get; set; }
        public virtual DbSet<REmpMp> REmpMps { get; set; }
        public virtual DbSet<REmpMpst> REmpMpsts { get; set; }
        public virtual DbSet<REmpName> REmpNames { get; set; }
        public virtual DbSet<REmpNamesDate> REmpNamesDates { get; set; }
        public virtual DbSet<RExecutor> RExecutors { get; set; }
        public virtual DbSet<RExecutorService> RExecutorServices { get; set; }
        public virtual DbSet<RExecutorShift> RExecutorShifts { get; set; }
        public virtual DbSet<RExtFile> RExtFiles { get; set; }
        public virtual DbSet<RGacc> RGaccs { get; set; }
        public virtual DbSet<RGaccFa> RGaccFas { get; set; }
        public virtual DbSet<RGaccs1> RGaccs1s { get; set; }
        public virtual DbSet<RGaccs2> RGaccs2s { get; set; }
        public virtual DbSet<RGoper> RGopers { get; set; }
        public virtual DbSet<RGoperC> RGoperCs { get; set; }
        public virtual DbSet<RGoperD> RGoperDs { get; set; }
        public virtual DbSet<RGoperFc> RGoperFcs { get; set; }
        public virtual DbSet<RGoperFd> RGoperFds { get; set; }
        public virtual DbSet<RGvol> RGvols { get; set; }
        public virtual DbSet<RHoliday> RHolidays { get; set; }
        public virtual DbSet<RLevy> RLevies { get; set; }
        public virtual DbSet<RLevyCr> RLevyCrs { get; set; }
        public virtual DbSet<RLevyRate> RLevyRates { get; set; }
        public virtual DbSet<RMenu> RMenus { get; set; }
        public virtual DbSet<RMenuM> RMenuMs { get; set; }
        public virtual DbSet<RMenuP> RMenuPs { get; set; }
        public virtual DbSet<RMod> RMods { get; set; }
        public virtual DbSet<RNorm> RNorms { get; set; }
        public virtual DbSet<RNormMh> RNormMhs { get; set; }
        public virtual DbSet<ROper> ROpers { get; set; }
        public virtual DbSet<ROperCr> ROperCrs { get; set; }
        public virtual DbSet<ROrderMonitor> ROrderMonitors { get; set; }
        public virtual DbSet<ROur> ROurs { get; set; }
        public virtual DbSet<ROurValue> ROurValues { get; set; }
        public virtual DbSet<ROursAc> ROursAcs { get; set; }
        public virtual DbSet<ROursCc> ROursCcs { get; set; }
        public virtual DbSet<RPayForm> RPayForms { get; set; }
        public virtual DbSet<RPayType> RPayTypes { get; set; }
        public virtual DbSet<RPayTypeCat> RPayTypeCats { get; set; }
        public virtual DbSet<RPc> RPcs { get; set; }
        public virtual DbSet<RPerson> RPersons { get; set; }
        public virtual DbSet<RPersonDc> RPersonDcs { get; set; }
        public virtual DbSet<RPersonExecutorsBl> RPersonExecutorsBls { get; set; }
        public virtual DbSet<RPersonKin> RPersonKins { get; set; }
        public virtual DbSet<RPersonPreference> RPersonPreferences { get; set; }
        public virtual DbSet<RPersonResourcesBl> RPersonResourcesBls { get; set; }
        public virtual DbSet<RPl> RPls { get; set; }
        public virtual DbSet<RPospay> RPospays { get; set; }
        public virtual DbSet<RPost> RPosts { get; set; }
        public virtual DbSet<RPostC> RPostCs { get; set; }
        public virtual DbSet<RPostMc> RPostMcs { get; set; }
        public virtual DbSet<RPrev> RPrevs { get; set; }
        public virtual DbSet<RProcessing> RProcessings { get; set; }
        public virtual DbSet<RProd> RProds { get; set; }
        public virtual DbSet<RProdAc> RProdAcs { get; set; }
        public virtual DbSet<RProdBg> RProdBgs { get; set; }
        public virtual DbSet<RProdBserv> RProdBservs { get; set; }
        public virtual DbSet<RProdC> RProdCs { get; set; }
        public virtual DbSet<RProdCv> RProdCvs { get; set; }
        public virtual DbSet<RProdEc> RProdEcs { get; set; }
        public virtual DbSet<RProdG> RProdGs { get; set; }
        public virtual DbSet<RProdG1> RProdG1s { get; set; }
        public virtual DbSet<RProdG2> RProdG2s { get; set; }
        public virtual DbSet<RProdG3> RProdG3s { get; set; }
        public virtual DbSet<RProdImage> RProdImages { get; set; }
        public virtual DbSet<RProdLv> RProdLvs { get; set; }
        public virtual DbSet<RProdM> RProdMs { get; set; }
        public virtual DbSet<RProdMa> RProdMas { get; set; }
        public virtual DbSet<RProdMe> RProdMes { get; set; }
        public virtual DbSet<RProdMp> RProdMps { get; set; }
        public virtual DbSet<RProdMp1> RProdMps1 { get; set; }
        public virtual DbSet<RProdMpch> RProdMpches { get; set; }
        public virtual DbSet<RProdMpch1> RProdMpchs { get; set; }
        public virtual DbSet<RProdMpsE> RProdMpsEs { get; set; }
        public virtual DbSet<RProdMq> RProdMqs { get; set; }
        public virtual DbSet<RProdMse> RProdMses { get; set; }
        public virtual DbSet<RProdOper> RProdOpers { get; set; }
        public virtual DbSet<RProdTurnOver> RProdTurnOvers { get; set; }
        public virtual DbSet<RProdValue> RProdValues { get; set; }
        public virtual DbSet<RProdsDimension> RProdsDimensions { get; set; }
        public virtual DbSet<RProdum> RProdAs { get; set; }
        public virtual DbSet<RResource> RResources { get; set; }
        public virtual DbSet<RResourceSched> RResourceScheds { get; set; }
        public virtual DbSet<RResourceType> RResourceTypes { get; set; }
        public virtual DbSet<RScale> RScales { get; set; }
        public virtual DbSet<RScaleDef> RScaleDefs { get; set; }
        public virtual DbSet<RScaleDefKey> RScaleDefKeys { get; set; }
        public virtual DbSet<RScaleGr> RScaleGrs { get; set; }
        public virtual DbSet<RScaleGrMw> RScaleGrMws { get; set; }
        public virtual DbSet<RSec> RSecs { get; set; }
        public virtual DbSet<RService> RServices { get; set; }
        public virtual DbSet<RServiceCompatibility> RServiceCompatibilities { get; set; }
        public virtual DbSet<RServiceResource> RServiceResources { get; set; }
        public virtual DbSet<RShed> RSheds { get; set; }
        public virtual DbSet<RShedM> RShedMs { get; set; }
        public virtual DbSet<RShedMd> RShedMds { get; set; }
        public virtual DbSet<RSpend> RSpends { get; set; }
        public virtual DbSet<RState> RStates { get; set; }
        public virtual DbSet<RStateDoc> RStateDocs { get; set; }
        public virtual DbSet<RStateDocsChange> RStateDocsChanges { get; set; }
        public virtual DbSet<RStateRule> RStateRules { get; set; }
        public virtual DbSet<RStateRuleUser> RStateRuleUsers { get; set; }
        public virtual DbSet<RStock> RStocks { get; set; }
        public virtual DbSet<RStockCrprod> RStockCrprods { get; set; }
        public virtual DbSet<RStockG> RStockGs { get; set; }
        public virtual DbSet<RStockSub> RStockSubs { get; set; }
        public virtual DbSet<RSub> RSubs { get; set; }
        public virtual DbSet<RSubStock> RSubStocks { get; set; }
        public virtual DbSet<RTag> RTags { get; set; }
        public virtual DbSet<RTagC> RTagCs { get; set; }
        public virtual DbSet<RTaxRate> RTaxRates { get; set; }
        public virtual DbSet<RTaxRegion> RTaxRegions { get; set; }
        public virtual DbSet<RTaxRegionRate> RTaxRegionRates { get; set; }
        public virtual DbSet<RTaxis> RTaxes { get; set; }
        public virtual DbSet<RUni> RUnis { get; set; }
        public virtual DbSet<RUniType> RUniTypes { get; set; }
        public virtual DbSet<RUser> RUsers { get; set; }
        public virtual DbSet<RWp> RWps { get; set; }
        public virtual DbSet<RWpref> RWprefs { get; set; }
        public virtual DbSet<RWprole> RWproles { get; set; }
        public virtual DbSet<RWrkType> RWrkTypes { get; set; }
        public virtual DbSet<RWtsign> RWtsigns { get; set; }
        public virtual DbSet<RWweek> RWweeks { get; set; }
        public virtual DbSet<RemDd> RemDds { get; set; }
        public virtual DbSet<RemSumOnMonthLastDayByStock> RemSumOnMonthLastDayByStocks { get; set; }
        public virtual DbSet<Round> Rounds { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<Sale1> Sales1 { get; set; }
        public virtual DbSet<SaleStatistic> SaleStatistics { get; set; }
        public virtual DbSet<SaleStatisticForTest> SaleStatisticForTests { get; set; }
        public virtual DbSet<ServiceStatus> ServiceStatuses { get; set; }
        public virtual DbSet<Sql06Rudenko> Sql06Rudenkos { get; set; }
        public virtual DbSet<SqlCommand> SqlCommands { get; set; }
        public virtual DbSet<SqlText> SqlTexts { get; set; }
        public virtual DbSet<TAcc> TAccs { get; set; }
        public virtual DbSet<TAcc1> TAccs1 { get; set; }
        public virtual DbSet<TAccD> TAccDs { get; set; }
        public virtual DbSet<TAccPay> TAccPays { get; set; }
        public virtual DbSet<TAccRoute> TAccRoutes { get; set; }
        public virtual DbSet<TAccSale> TAccSales { get; set; }
        public virtual DbSet<TAccSpend> TAccSpends { get; set; }
        public virtual DbSet<TBalanceProd> TBalanceProds { get; set; }
        public virtual DbSet<TBooking> TBookings { get; set; }
        public virtual DbSet<TBookingD> TBookingDs { get; set; }
        public virtual DbSet<TBookingTemp> TBookingTemps { get; set; }
        public virtual DbSet<TBookingTempD> TBookingTempDs { get; set; }
        public virtual DbSet<TCo> TCos { get; set; }
        public virtual DbSet<TCosD> TCosDs { get; set; }
        public virtual DbSet<TCosSpend> TCosSpends { get; set; }
        public virtual DbSet<TCoss> TCosses { get; set; }
        public virtual DbSet<TCret> TCrets { get; set; }
        public virtual DbSet<TCret1> TCrets1 { get; set; }
        public virtual DbSet<TCretD> TCretDs { get; set; }
        public virtual DbSet<TCretRoute> TCretRoutes { get; set; }
        public virtual DbSet<TCretSpend> TCretSpends { get; set; }
        public virtual DbSet<TCrjournal> TCrjournals { get; set; }
        public virtual DbSet<TCrjournalDocSubtype> TCrjournalDocSubtypes { get; set; }
        public virtual DbSet<TCrjournalDocType> TCrjournalDocTypes { get; set; }
        public virtual DbSet<TCrret> TCrrets { get; set; }
        public virtual DbSet<TCrret1> TCrrets1 { get; set; }
        public virtual DbSet<TCrretD> TCrretDs { get; set; }
        public virtual DbSet<TCrretDlv> TCrretDlvs { get; set; }
        public virtual DbSet<TCrretDrazn0631> TCrretDrazn0631s { get; set; }
        public virtual DbSet<TCrretPay> TCrretPays { get; set; }
        public virtual DbSet<TCrretPaysRazn0631> TCrretPaysRazn0631s { get; set; }
        public virtual DbSet<TCrretShadow> TCrretShadows { get; set; }
        public virtual DbSet<TCrretShadowD> TCrretShadowDs { get; set; }
        public virtual DbSet<TCrretShadowDlv> TCrretShadowDlvs { get; set; }
        public virtual DbSet<TCrretShadowPay> TCrretShadowPays { get; set; }
        public virtual DbSet<TCst> TCsts { get; set; }
        public virtual DbSet<TCst1> TCsts1 { get; set; }
        public virtual DbSet<TCst2> TCst2s { get; set; }
        public virtual DbSet<TCst21> TCst2s1 { get; set; }
        public virtual DbSet<TCst2D> TCst2Ds { get; set; }
        public virtual DbSet<TCstD> TCstDs { get; set; }
        public virtual DbSet<TCstRoute> TCstRoutes { get; set; }
        public virtual DbSet<TCstSpend> TCstSpends { get; set; }
        public virtual DbSet<TDeskRe> TDeskRes { get; set; }
        public virtual DbSet<TDeskResD> TDeskResDs { get; set; }
        public virtual DbSet<TDeskRess> TDeskResses { get; set; }
        public virtual DbSet<TDi> TDis { get; set; }
        public virtual DbSet<TDisD> TDisDs { get; set; }
        public virtual DbSet<TDisDNewAchId> TDisDNewAchIds { get; set; }
        public virtual DbSet<TDisDd> TDisDds { get; set; }
        public virtual DbSet<TDisRoute> TDisRoutes { get; set; }
        public virtual DbSet<TDisSpend> TDisSpends { get; set; }
        public virtual DbSet<TDiss> TDisses { get; set; }
        public virtual DbSet<TEoexp> TEoexps { get; set; }
        public virtual DbSet<TEoexp1> TEoexps1 { get; set; }
        public virtual DbSet<TEoexpD> TEoexpDs { get; set; }
        public virtual DbSet<TEoexpDd> TEoexpDds { get; set; }
        public virtual DbSet<TEoexpRoute> TEoexpRoutes { get; set; }
        public virtual DbSet<TEoexpSpend> TEoexpSpends { get; set; }
        public virtual DbSet<TEorec> TEorecs { get; set; }
        public virtual DbSet<TEorec1> TEorecs1 { get; set; }
        public virtual DbSet<TEorecD> TEorecDs { get; set; }
        public virtual DbSet<TEorecRoute> TEorecRoutes { get; set; }
        public virtual DbSet<TEorecSpend> TEorecSpends { get; set; }
        public virtual DbSet<TEpp> TEpps { get; set; }
        public virtual DbSet<TEpp1> TEpps1 { get; set; }
        public virtual DbSet<TEppD> TEppDs { get; set; }
        public virtual DbSet<TEppRoute> TEppRoutes { get; set; }
        public virtual DbSet<TEppSpend> TEppSpends { get; set; }
        public virtual DbSet<TEst> TEsts { get; set; }
        public virtual DbSet<TEst1> TEsts1 { get; set; }
        public virtual DbSet<TEstD> TEstDs { get; set; }
        public virtual DbSet<TExc> TExcs { get; set; }
        public virtual DbSet<TExc1> TExc1s { get; set; }
        public virtual DbSet<TExc2> TExcs1 { get; set; }
        public virtual DbSet<TExcD> TExcDs { get; set; }
        public virtual DbSet<TExcRoute> TExcRoutes { get; set; }
        public virtual DbSet<TExcSpend> TExcSpends { get; set; }
        public virtual DbSet<TExp> TExps { get; set; }
        public virtual DbSet<TExp1> TExps1 { get; set; }
        public virtual DbSet<TExpD> TExpDs { get; set; }
        public virtual DbSet<TExpRoute> TExpRoutes { get; set; }
        public virtual DbSet<TExpSpend> TExpSpends { get; set; }
        public virtual DbSet<TInv> TInvs { get; set; }
        public virtual DbSet<TInv1> TInvs1 { get; set; }
        public virtual DbSet<TInvD> TInvDs { get; set; }
        public virtual DbSet<TInvRoute> TInvRoutes { get; set; }
        public virtual DbSet<TInvSpend> TInvSpends { get; set; }
        public virtual DbSet<TIoexp> TIoexps { get; set; }
        public virtual DbSet<TIoexp1> TIoexps1 { get; set; }
        public virtual DbSet<TIoexpD> TIoexpDs { get; set; }
        public virtual DbSet<TIoexpRoute> TIoexpRoutes { get; set; }
        public virtual DbSet<TIoexpSpend> TIoexpSpends { get; set; }
        public virtual DbSet<TIorec> TIorecs { get; set; }
        public virtual DbSet<TIorec1> TIorecs1 { get; set; }
        public virtual DbSet<TIorecD> TIorecDs { get; set; }
        public virtual DbSet<TIorecRoute> TIorecRoutes { get; set; }
        public virtual DbSet<TIorecSpend> TIorecSpends { get; set; }
        public virtual DbSet<TLogDiscExp> TLogDiscExps { get; set; }
        public virtual DbSet<TLogDiscExpP> TLogDiscExpPs { get; set; }
        public virtual DbSet<TLogDiscRec> TLogDiscRecs { get; set; }
        public virtual DbSet<TLogDiscRecTemp> TLogDiscRecTemps { get; set; }
        public virtual DbSet<TMonIntExp> TMonIntExps { get; set; }
        public virtual DbSet<TMonIntExp1> TMonIntExps1 { get; set; }
        public virtual DbSet<TMonIntRec> TMonIntRecs { get; set; }
        public virtual DbSet<TMonIntRec1> TMonIntRecs1 { get; set; }
        public virtual DbSet<TMonRec> TMonRecs { get; set; }
        public virtual DbSet<TOrderMonitorsTemp> TOrderMonitorsTemps { get; set; }
        public virtual DbSet<TPinP> TPinPs { get; set; }
        public virtual DbSet<TPinP1> TPinPs1 { get; set; }
        public virtual DbSet<TPinPSql06temp> TPinPSql06temps { get; set; }
        public virtual DbSet<TPinPch> TPinPches { get; set; }
        public virtual DbSet<TProdTurnD> TProdTurnDs { get; set; }
        public virtual DbSet<TRec> TRecs { get; set; }
        public virtual DbSet<TRec1> TRecs1 { get; set; }
        public virtual DbSet<TRecD> TRecDs { get; set; }
        public virtual DbSet<TRecRoute> TRecRoutes { get; set; }
        public virtual DbSet<TRecSpend> TRecSpends { get; set; }
        public virtual DbSet<TRem> TRems { get; set; }
        public virtual DbSet<TRem1> TRems1 { get; set; }
        public virtual DbSet<TRemD1c> TRemD1cs { get; set; }
        public virtual DbSet<TRemD2> TRemDs2 { get; set; }
        public virtual DbSet<TRemDAssortmentManagement> TRemDAssortmentManagements { get; set; }
        public virtual DbSet<TRemDBe> TRemDBes { get; set; }
        public virtual DbSet<TRemDCompare> TRemDCompares { get; set; }
        public virtual DbSet<TRemDStatic> TRemDStatics { get; set; }
        public virtual DbSet<TRemDStaticD> TRemDStaticDs { get; set; }
        public virtual DbSet<TRemDStaticD52> TRemDStaticD52s { get; set; }
        public virtual DbSet<TRemDStaticH> TRemDStaticHes { get; set; }
        public virtual DbSet<TRemDatePl> TRemDatePls { get; set; }
        public virtual DbSet<TRemDatePlre> TRemDatePlres { get; set; }
        public virtual DbSet<TRemDatePp> TRemDatePps { get; set; }
        public virtual DbSet<TRemDatePpre> TRemDatePpres { get; set; }
        public virtual DbSet<TRemDateQty> TRemDateQties { get; set; }
        public virtual DbSet<TRemDateQtyRe> TRemDateQtyRes { get; set; }
        public virtual DbSet<TRemDay> TRemDays { get; set; }
        public virtual DbSet<TRemDayProd> TRemDayProds { get; set; }
        public virtual DbSet<TRemDbyDateAnalytic> TRemDbyDateAnalytics { get; set; }
        public virtual DbSet<TRemDi> TRemDis { get; set; }
        public virtual DbSet<TRemDi1> TRemDis1 { get; set; }
        public virtual DbSet<TRemDis2> TRemDis2s { get; set; }
        public virtual DbSet<TRemDsium> TRemDsia { get; set; }
        public virtual DbSet<TRemExpire> TRemExpires { get; set; }
        public virtual DbSet<TRemPl> TRemPls { get; set; }
        public virtual DbSet<TRemPlre> TRemPlres { get; set; }
        public virtual DbSet<TRemPp> TRemPps { get; set; }
        public virtual DbSet<TRemPpre> TRemPpres { get; set; }
        public virtual DbSet<TRemQty> TRemQties { get; set; }
        public virtual DbSet<TRemQtyRe> TRemQtyRes { get; set; }
        public virtual DbSet<TRemResPl> TRemResPls { get; set; }
        public virtual DbSet<TRemResPp> TRemResPps { get; set; }
        public virtual DbSet<TRemd> TRemds { get; set; }
        public virtual DbSet<TRemd1> TRemds1 { get; set; }
        public virtual DbSet<TRemdAnalytic> TRemdAnalytics { get; set; }
        public virtual DbSet<TRemdRevizor> TRemdRevizors { get; set; }
        public virtual DbSet<TRemdRudenko> TRemdRudenkos { get; set; }
        public virtual DbSet<TReplicaVen> TReplicaVens { get; set; }
        public virtual DbSet<TReplicaVen5555> TReplicaVen5555s { get; set; }
        public virtual DbSet<TRestShift> TRestShifts { get; set; }
        public virtual DbSet<TRestShift1> TRestShifts1 { get; set; }
        public virtual DbSet<TRestShiftD> TRestShiftDs { get; set; }
        public virtual DbSet<TRet> TRets { get; set; }
        public virtual DbSet<TRet1> TRets1 { get; set; }
        public virtual DbSet<TRetD> TRetDs { get; set; }
        public virtual DbSet<TRetRoute> TRetRoutes { get; set; }
        public virtual DbSet<TRetSpend> TRetSpends { get; set; }
        public virtual DbSet<TSale> TSales { get; set; }
        public virtual DbSet<TSale1> TSales1 { get; set; }
        public virtual DbSet<TSaleC> TSaleCs { get; set; }
        public virtual DbSet<TSaleCrazn0631> TSaleCrazn0631s { get; set; }
        public virtual DbSet<TSaleD> TSaleDs { get; set; }
        public virtual DbSet<TSaleDlv> TSaleDlvs { get; set; }
        public virtual DbSet<TSaleDrazn0631> TSaleDrazn0631s { get; set; }
        public virtual DbSet<TSaleM> TSaleMs { get; set; }
        public virtual DbSet<TSalePay> TSalePays { get; set; }
        public virtual DbSet<TSalePaysRazn0631> TSalePaysRazn0631s { get; set; }
        public virtual DbSet<TSaleRazn0631> TSaleRazn0631s { get; set; }
        public virtual DbSet<TSaleShadow> TSaleShadows { get; set; }
        public virtual DbSet<TSaleShadowC> TSaleShadowCs { get; set; }
        public virtual DbSet<TSaleShadowD> TSaleShadowDs { get; set; }
        public virtual DbSet<TSaleShadowDlv> TSaleShadowDlvs { get; set; }
        public virtual DbSet<TSaleShadowM> TSaleShadowMs { get; set; }
        public virtual DbSet<TSaleShadowPay> TSaleShadowPays { get; set; }
        public virtual DbSet<TSaleTemp> TSaleTemps { get; set; }
        public virtual DbSet<TSaleTempD> TSaleTempDs { get; set; }
        public virtual DbSet<TSaleTempM> TSaleTempMs { get; set; }
        public virtual DbSet<TSaleTempPay> TSaleTempPays { get; set; }
        public virtual DbSet<TSest> TSests { get; set; }
        public virtual DbSet<TSest1> TSests1 { get; set; }
        public virtual DbSet<TSestD> TSestDs { get; set; }
        public virtual DbSet<TSexp> TSexps { get; set; }
        public virtual DbSet<TSexp1> TSexps1 { get; set; }
        public virtual DbSet<TSexpA> TSexpAs { get; set; }
        public virtual DbSet<TSexpD> TSexpDs { get; set; }
        public virtual DbSet<TSexpE> TSexpEs { get; set; }
        public virtual DbSet<TSexpM> TSexpMs { get; set; }
        public virtual DbSet<TSpec> TSpecs { get; set; }
        public virtual DbSet<TSpecD> TSpecDs { get; set; }
        public virtual DbSet<TSpecD1> TSpecDs1 { get; set; }
        public virtual DbSet<TSpecDesc> TSpecDescs { get; set; }
        public virtual DbSet<TSpecParam> TSpecParams { get; set; }
        public virtual DbSet<TSpecPrice> TSpecPrices { get; set; }
        public virtual DbSet<TSpecT> TSpecTs { get; set; }
        public virtual DbSet<TSpexp> TSpexps { get; set; }
        public virtual DbSet<TSpexp1> TSpexps1 { get; set; }
        public virtual DbSet<TSpexpA> TSpexpAs { get; set; }
        public virtual DbSet<TSpexpD> TSpexpDs { get; set; }
        public virtual DbSet<TSpexpE> TSpexpEs { get; set; }
        public virtual DbSet<TSpexpM> TSpexpMs { get; set; }
        public virtual DbSet<TSprec> TSprecs { get; set; }
        public virtual DbSet<TSprec1> TSprecs1 { get; set; }
        public virtual DbSet<TSprecA> TSprecAs { get; set; }
        public virtual DbSet<TSprecD> TSprecDs { get; set; }
        public virtual DbSet<TSprecE> TSprecEs { get; set; }
        public virtual DbSet<TSprecM> TSprecMs { get; set; }
        public virtual DbSet<TSrec> TSrecs { get; set; }
        public virtual DbSet<TSrec1> TSrecs1 { get; set; }
        public virtual DbSet<TSrecA> TSrecAs { get; set; }
        public virtual DbSet<TSrecD> TSrecDs { get; set; }
        public virtual DbSet<TSrecE> TSrecEs { get; set; }
        public virtual DbSet<TSrecM> TSrecMs { get; set; }
        public virtual DbSet<TVen> TVens { get; set; }
        public virtual DbSet<TVen1> TVens1 { get; set; }
        public virtual DbSet<TVenA> TVenAs { get; set; }
        public virtual DbSet<TVenD> TVenDs { get; set; }
        public virtual DbSet<TVenDUm> TVenDa { get; set; }
        public virtual DbSet<TVenI> TVenIs { get; set; }
        public virtual DbSet<TZInP> TZInPs { get; set; }
        public virtual DbSet<TZRep> TZReps { get; set; }
        public virtual DbSet<TempA> TempAs { get; set; }
        public virtual DbSet<TempA1> TempAs1 { get; set; }
        public virtual DbSet<TempB> TempBs { get; set; }
        public virtual DbSet<TempBadVen> TempBadVens { get; set; }
        public virtual DbSet<TempDc> TempDcs { get; set; }
        public virtual DbSet<TempDc10400> TempDc10400s { get; set; }
        public virtual DbSet<TempDc11004> TempDc11004s { get; set; }
        public virtual DbSet<TempDcWrong> TempDcWrongs { get; set; }
        public virtual DbSet<TempDcard20210101> TempDcard20210101s { get; set; }
        public virtual DbSet<TempDcards20220519Rudenko0> TempDcards20220519Rudenko0s { get; set; }
        public virtual DbSet<TempDcards20220519RudenkoDd> TempDcards20220519RudenkoDds { get; set; }
        public virtual DbSet<TempDistributionQtyD> TempDistributionQtyDs { get; set; }
        public virtual DbSet<TempDocLink> TempDocLinks { get; set; }
        public virtual DbSet<TempExcRudenko> TempExcRudenkos { get; set; }
        public virtual DbSet<TempItImpDcardId> TempItImpDcardIds { get; set; }
        public virtual DbSet<TempLogDiscExp> TempLogDiscExps { get; set; }
        public virtual DbSet<TempLogDiscRec> TempLogDiscRecs { get; set; }
        public virtual DbSet<TempRProd> TempRProds { get; set; }
        public virtual DbSet<TempRec> TempRecs { get; set; }
        public virtual DbSet<TempRem> TempRems { get; set; }
        public virtual DbSet<TempRemd206> TempRemd206s { get; set; }
        public virtual DbSet<TempRudenko20210720Crret> TempRudenko20210720Crrets { get; set; }
        public virtual DbSet<TempSaled405> TempSaled405s { get; set; }
        public virtual DbSet<TempStocksRudenko> TempStocksRudenkos { get; set; }
        public virtual DbSet<TempTsale> TempTsales { get; set; }
        public virtual DbSet<TempTsaled> TempTsaleds { get; set; }
        public virtual DbSet<TempTsalepay> TempTsalepays { get; set; }
        public virtual DbSet<TempTt20190523> TempTt20190523s { get; set; }
        public virtual DbSet<TempZDocdc> TempZDocdcs { get; set; }
        public virtual DbSet<TempZLogDiscExpDcardchid> TempZLogDiscExpDcardchids { get; set; }
        public virtual DbSet<TempZLogDiscRecDcardchid> TempZLogDiscRecDcardchids { get; set; }
        public virtual DbSet<TempZLogdiscexp> TempZLogdiscexps { get; set; }
        public virtual DbSet<TempZLogdiscrec> TempZLogdiscrecs { get; set; }
        public virtual DbSet<TempreportUnitBalancefrom06> TempreportUnitBalancefrom06s { get; set; }
        public virtual DbSet<TempreportUnitBalancefrom31> TempreportUnitBalancefrom31s { get; set; }
        public virtual DbSet<Tempt> Tempts { get; set; }
        public virtual DbSet<Test13> Test13s { get; set; }
        public virtual DbSet<TestTable> TestTables { get; set; }
        public virtual DbSet<TmpTSale31> TmpTSale31s { get; set; }
        public virtual DbSet<TmpTSaleD31> TmpTSaleD31s { get; set; }
        public virtual DbSet<TmpTurnDay> TmpTurnDays { get; set; }
        public virtual DbSet<VDatabase> VDatabases { get; set; }
        public virtual DbSet<VDelIndexOptimize> VDelIndexOptimizes { get; set; }
        public virtual DbSet<VField> VFields { get; set; }
        public virtual DbSet<VFormula> VFormulas { get; set; }
        public virtual DbSet<VGraph> VGraphs { get; set; }
        public virtual DbSet<VJoin> VJoins { get; set; }
        public virtual DbSet<VMapSg> VMapSgs { get; set; }
        public virtual DbSet<VNotify> VNotifies { get; set; }
        public virtual DbSet<VParam> VParams { get; set; }
        public virtual DbSet<VRep> VReps { get; set; }
        public virtual DbSet<VRepGr> VRepGrs { get; set; }
        public virtual DbSet<VRepUser> VRepUsers { get; set; }
        public virtual DbSet<VReplace> VReplaces { get; set; }
        public virtual DbSet<VScript> VScripts { get; set; }
        public virtual DbSet<VSizeCache> VSizeCaches { get; set; }
        public virtual DbSet<VSource> VSources { get; set; }
        public virtual DbSet<VSourceGr> VSourceGrs { get; set; }
        public virtual DbSet<VTable> VTables { get; set; }
        public virtual DbSet<VUfield> VUfields { get; set; }
        public virtual DbSet<VUgraph> VUgraphs { get; set; }
        public virtual DbSet<VUnotify> VUnotifies { get; set; }
        public virtual DbSet<VUparam> VUparams { get; set; }
        public virtual DbSet<VUrep> VUreps { get; set; }
        public virtual DbSet<VUscript> VUscripts { get; set; }
        public virtual DbSet<VUview> VUviews { get; set; }
        public virtual DbSet<VUviewField> VUviewFields { get; set; }
        public virtual DbSet<VValid> VValids { get; set; }
        public virtual DbSet<VView> VViews { get; set; }
        public virtual DbSet<VViewField> VViewFields { get; set; }
        public virtual DbSet<VbBankExpAc> VbBankExpAcs { get; set; }
        public virtual DbSet<VbBankExpCc> VbBankExpCcs { get; set; }
        public virtual DbSet<VbBankRecAc> VbBankRecAcs { get; set; }
        public virtual DbSet<VbBankRecCc> VbBankRecCcs { get; set; }
        public virtual DbSet<VcCompCor> VcCompCors { get; set; }
        public virtual DbSet<VcCompCurr> VcCompCurrs { get; set; }
        public virtual DbSet<VcCompExp> VcCompExps { get; set; }
        public virtual DbSet<VcCompRec> VcCompRecs { get; set; }
        public virtual DbSet<VcEmpCor> VcEmpCors { get; set; }
        public virtual DbSet<VcEmpCurr> VcEmpCurrs { get; set; }
        public virtual DbSet<VcEmpExc> VcEmpExcs { get; set; }
        public virtual DbSet<VcEmpExp> VcEmpExps { get; set; }
        public virtual DbSet<VcEmpRec> VcEmpRecs { get; set; }
        public virtual DbSet<VcEmpRep> VcEmpReps { get; set; }
        public virtual DbSet<VcOurCor> VcOurCors { get; set; }
        public virtual DbSet<VcPlanExp> VcPlanExps { get; set; }
        public virtual DbSet<VcPlanRec> VcPlanRecs { get; set; }
        public virtual DbSet<Ven> Vens { get; set; }
        public virtual DbSet<VvTable> VvTables { get; set; }
        public virtual DbSet<VvValid> VvValids { get; set; }
        public virtual DbSet<VzAppDoc> VzAppDocs { get; set; }
        public virtual DbSet<VzDataset> VzDatasets { get; set; }
        public virtual DbSet<VzDatasetField> VzDatasetFields { get; set; }
        public virtual DbSet<VzField> VzFields { get; set; }
        public virtual DbSet<VzNow> VzNows { get; set; }
        public virtual DbSet<VzRelation> VzRelations { get; set; }
        public virtual DbSet<VzTable> VzTables { get; set; }
        public virtual DbSet<VzTool> VzTools { get; set; }
        public virtual DbSet<VzToolApp> VzToolApps { get; set; }
        public virtual DbSet<VzToolDoc> VzToolDocs { get; set; }
        public virtual DbSet<VzValidTable> VzValidTables { get; set; }
        public virtual DbSet<ZAccDef> ZAccDefs { get; set; }
        public virtual DbSet<ZAccDefDoc> ZAccDefDocs { get; set; }
        public virtual DbSet<ZAccDefObject> ZAccDefObjects { get; set; }
        public virtual DbSet<ZAccDefTable> ZAccDefTables { get; set; }
        public virtual DbSet<ZAgentScript> ZAgentScripts { get; set; }
        public virtual DbSet<ZApp> ZApps { get; set; }
        public virtual DbSet<ZAppDoc> ZAppDocs { get; set; }
        public virtual DbSet<ZAppPrint> ZAppPrints { get; set; }
        public virtual DbSet<ZAppRole> ZAppRoles { get; set; }
        public virtual DbSet<ZAppUser> ZAppUsers { get; set; }
        public virtual DbSet<ZAufield> ZAufields { get; set; }
        public virtual DbSet<ZAugroup> ZAugroups { get; set; }
        public virtual DbSet<ZAutable> ZAutables { get; set; }
        public virtual DbSet<ZAutoUpdate> ZAutoUpdates { get; set; }
        public virtual DbSet<ZBarMask> ZBarMasks { get; set; }
        public virtual DbSet<ZContract> ZContracts { get; set; }
        public virtual DbSet<ZDataSet> ZDataSets { get; set; }
        public virtual DbSet<ZDatasetField> ZDatasetFields { get; set; }
        public virtual DbSet<ZDatasetLink> ZDatasetLinks { get; set; }
        public virtual DbSet<ZDdlevent> ZDdlevents { get; set; }
        public virtual DbSet<ZDoc> ZDocs { get; set; }
        public virtual DbSet<ZDocCat> ZDocCats { get; set; }
        public virtual DbSet<ZDocDc> ZDocDcs { get; set; }
        public virtual DbSet<ZDocDcrazn0631> ZDocDcrazn0631s { get; set; }
        public virtual DbSet<ZDocDcshadow> ZDocDcshadows { get; set; }
        public virtual DbSet<ZDocForm> ZDocForms { get; set; }
        public virtual DbSet<ZDocGrp> ZDocGrps { get; set; }
        public virtual DbSet<ZDocLink> ZDocLinks { get; set; }
        public virtual DbSet<ZDocLinkType> ZDocLinkTypes { get; set; }
        public virtual DbSet<ZDocLinks101> ZDocLinks101s { get; set; }
        public virtual DbSet<ZDocLinksTax> ZDocLinksTaxes { get; set; }
        public virtual DbSet<ZDocLinksTemp> ZDocLinksTemps { get; set; }
        public virtual DbSet<ZDocPrint> ZDocPrints { get; set; }
        public virtual DbSet<ZDocRole> ZDocRoles { get; set; }
        public virtual DbSet<ZDocShed> ZDocSheds { get; set; }
        public virtual DbSet<ZDocUser> ZDocUsers { get; set; }
        public virtual DbSet<ZField> ZFields { get; set; }
        public virtual DbSet<ZFieldsRep> ZFieldsReps { get; set; }
        public virtual DbSet<ZFieldsRepGrp> ZFieldsRepGrps { get; set; }
        public virtual DbSet<ZFile> ZFiles { get; set; }
        public virtual DbSet<ZFrudf> ZFrudfs { get; set; }
        public virtual DbSet<ZFrudfr> ZFrudfrs { get; set; }
        public virtual DbSet<ZFrudfrd> ZFrudfrds { get; set; }
        public virtual DbSet<ZInAcc> ZInAccs { get; set; }
        public virtual DbSet<ZLicense> ZLicenses { get; set; }
        public virtual DbSet<ZLogAmProd> ZLogAmProds { get; set; }
        public virtual DbSet<ZLogAu> ZLogAus { get; set; }
        public virtual DbSet<ZLogBaseRate> ZLogBaseRates { get; set; }
        public virtual DbSet<ZLogCalcDisDd> ZLogCalcDisDds { get; set; }
        public virtual DbSet<ZLogCashReg> ZLogCashRegs { get; set; }
        public virtual DbSet<ZLogCreate> ZLogCreates { get; set; }
        public virtual DbSet<ZLogDelete> ZLogDeletes { get; set; }
        public virtual DbSet<ZLogDiffTable> ZLogDiffTables { get; set; }
        public virtual DbSet<ZLogDimension> ZLogDimensions { get; set; }
        public virtual DbSet<ZLogDisExc> ZLogDisExcs { get; set; }
        public virtual DbSet<ZLogDiscExp> ZLogDiscExps { get; set; }
        public virtual DbSet<ZLogDiscExpDelDidoborshch> ZLogDiscExpDelDidoborshches { get; set; }
        public virtual DbSet<ZLogDiscExpInsDidoborshch> ZLogDiscExpInsDidoborshches { get; set; }
        public virtual DbSet<ZLogDiscExpP> ZLogDiscExpPs { get; set; }
        public virtual DbSet<ZLogDiscExpRazn0631> ZLogDiscExpRazn0631s { get; set; }
        public virtual DbSet<ZLogDiscExpShadow> ZLogDiscExpShadows { get; set; }
        public virtual DbSet<ZLogDiscRec> ZLogDiscRecs { get; set; }
        public virtual DbSet<ZLogDiscRecDelDidoborsh> ZLogDiscRecDelDidoborshes { get; set; }
        public virtual DbSet<ZLogDiscRecInsDidoborsh> ZLogDiscRecInsDidoborshes { get; set; }
        public virtual DbSet<ZLogDiscRecRazn0631> ZLogDiscRecRazn0631s { get; set; }
        public virtual DbSet<ZLogDiscRecShadow> ZLogDiscRecShadows { get; set; }
        public virtual DbSet<ZLogDiscRecTemp> ZLogDiscRecTemps { get; set; }
        public virtual DbSet<ZLogEotwrite> ZLogEotwrites { get; set; }
        public virtual DbSet<ZLogEowrite> ZLogEowrites { get; set; }
        public virtual DbSet<ZLogImpSale> ZLogImpSales { get; set; }
        public virtual DbSet<ZLogMetric> ZLogMetrics { get; set; }
        public virtual DbSet<ZLogPrint> ZLogPrints { get; set; }
        public virtual DbSet<ZLogProcessing> ZLogProcessings { get; set; }
        public virtual DbSet<ZLogProcessingExchange> ZLogProcessingExchanges { get; set; }
        public virtual DbSet<ZLogProcessingOp> ZLogProcessingOps { get; set; }
        public virtual DbSet<ZLogProdMq> ZLogProdMqs { get; set; }
        public virtual DbSet<ZLogRProd> ZLogRProds { get; set; }
        public virtual DbSet<ZLogRProdsClass> ZLogRProdsClasses { get; set; }
        public virtual DbSet<ZLogScale> ZLogScales { get; set; }
        public virtual DbSet<ZLogState> ZLogStates { get; set; }
        public virtual DbSet<ZLogStockAttribute> ZLogStockAttributes { get; set; }
        public virtual DbSet<ZLogTRemDStatitic> ZLogTRemDStatitics { get; set; }
        public virtual DbSet<ZLogTool> ZLogTools { get; set; }
        public virtual DbSet<ZLogUpdate> ZLogUpdates { get; set; }
        public virtual DbSet<ZLogrProdsPgrId6> ZLogrProdsPgrId6s { get; set; }
        public virtual DbSet<ZLookup> ZLookups { get; set; }
        public virtual DbSet<ZMetricaEvent> ZMetricaEvents { get; set; }
        public virtual DbSet<ZObject> ZObjects { get; set; }
        public virtual DbSet<ZOpenAge> ZOpenAges { get; set; }
        public virtual DbSet<ZOpenAgeH> ZOpenAgeHs { get; set; }
        public virtual DbSet<ZRelation> ZRelations { get; set; }
        public virtual DbSet<ZReplicaCmd> ZReplicaCmds { get; set; }
        public virtual DbSet<ZReplicaConfigIn> ZReplicaConfigIns { get; set; }
        public virtual DbSet<ZReplicaConfigOut> ZReplicaConfigOuts { get; set; }
        public virtual DbSet<ZReplicaConfigSent> ZReplicaConfigSents { get; set; }
        public virtual DbSet<ZReplicaExchangeLog> ZReplicaExchangeLogs { get; set; }
        public virtual DbSet<ZReplicaField> ZReplicaFields { get; set; }
        public virtual DbSet<ZReplicaFilter> ZReplicaFilters { get; set; }
        public virtual DbSet<ZReplicaIn> ZReplicaIns { get; set; }
        public virtual DbSet<ZReplicaOut> ZReplicaOuts { get; set; }
        public virtual DbSet<ZReplicaPub> ZReplicaPubs { get; set; }
        public virtual DbSet<ZReplicaReplace> ZReplicaReplaces { get; set; }
        public virtual DbSet<ZReplicaState> ZReplicaStates { get; set; }
        public virtual DbSet<ZReplicaSub> ZReplicaSubs { get; set; }
        public virtual DbSet<ZReplicaTable> ZReplicaTables { get; set; }
        public virtual DbSet<ZRole> ZRoles { get; set; }
        public virtual DbSet<ZRoleDoc> ZRoleDocs { get; set; }
        public virtual DbSet<ZRoleObject> ZRoleObjects { get; set; }
        public virtual DbSet<ZRoleTable> ZRoleTables { get; set; }
        public virtual DbSet<ZRoleUser> ZRoleUsers { get; set; }
        public virtual DbSet<ZTable> ZTables { get; set; }
        public virtual DbSet<ZTool> ZTools { get; set; }
        public virtual DbSet<ZToolApp> ZToolApps { get; set; }
        public virtual DbSet<ZToolDoc> ZToolDocs { get; set; }
        public virtual DbSet<ZToolField> ZToolFields { get; set; }
        public virtual DbSet<ZToolPage> ZToolPages { get; set; }
        public virtual DbSet<ZToolRep> ZToolReps { get; set; }
        public virtual DbSet<ZToolUserEvent> ZToolUserEvents { get; set; }
        public virtual DbSet<ZUserCodes1> ZUserCodes1s { get; set; }
        public virtual DbSet<ZUserCodes2> ZUserCodes2s { get; set; }
        public virtual DbSet<ZUserCodes3> ZUserCodes3s { get; set; }
        public virtual DbSet<ZUserCodes4> ZUserCodes4s { get; set; }
        public virtual DbSet<ZUserCodes5> ZUserCodes5s { get; set; }
        public virtual DbSet<ZUserComp> ZUserComps { get; set; }
        public virtual DbSet<ZUserCompG> ZUserCompGs { get; set; }
        public virtual DbSet<ZUserDoc> ZUserDocs { get; set; }
        public virtual DbSet<ZUserObject> ZUserObjects { get; set; }
        public virtual DbSet<ZUserOpenAge> ZUserOpenAges { get; set; }
        public virtual DbSet<ZUserOpenAgeH> ZUserOpenAgeHs { get; set; }
        public virtual DbSet<ZUserOur> ZUserOurs { get; set; }
        public virtual DbSet<ZUserPl> ZUserPls { get; set; }
        public virtual DbSet<ZUserProdC> ZUserProdCs { get; set; }
        public virtual DbSet<ZUserProdG> ZUserProdGs { get; set; }
        public virtual DbSet<ZUserProdG1> ZUserProdG1s { get; set; }
        public virtual DbSet<ZUserStock> ZUserStocks { get; set; }
        public virtual DbSet<ZUserStockG> ZUserStockGs { get; set; }
        public virtual DbSet<ZUserTable> ZUserTables { get; set; }
        public virtual DbSet<ZUserVar> ZUserVars { get; set; }
        public virtual DbSet<ZVar> ZVars { get; set; }
        public virtual DbSet<ZVarPage> ZVarPages { get; set; }
        public virtual DbSet<ZVarsOpenAgeBeginHistory> ZVarsOpenAgeBeginHistories { get; set; }
        public virtual DbSet<ZVarsTv> ZVarsTvs { get; set; }
        public virtual DbSet<ZWcopy> ZWcopies { get; set; }
        public virtual DbSet<ZWcopyD> ZWcopyDs { get; set; }
        public virtual DbSet<ZWcopyDf> ZWcopyDfs { get; set; }
        public virtual DbSet<ZWcopyDv> ZWcopyDvs { get; set; }
        public virtual DbSet<ZWcopyF> ZWcopyFs { get; set; }
        public virtual DbSet<ZWcopyFf> ZWcopyFfs { get; set; }
        public virtual DbSet<ZWcopyFuf> ZWcopyFufs { get; set; }
        public virtual DbSet<ZWcopyFv> ZWcopyFvs { get; set; }
        public virtual DbSet<ZWcopyFvuf> ZWcopyFvufs { get; set; }
        public virtual DbSet<ZWcopyP> ZWcopyPs { get; set; }
        public virtual DbSet<ZWcopyT> ZWcopyTs { get; set; }
        public virtual DbSet<ZWcopyU> ZWcopyUs { get; set; }
        public virtual DbSet<ZWcopyUv> ZWcopyUvs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=SQL31,1433;Initial Catalog=Avrora37; Integrated Security=false; User ID=rpitvInfo; Password=QQQqqq123");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("RpiTvInfo")
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS");

            modelBuilder.Entity<AzTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_azTime", "dbo");

                entity.Property(e => e.Info)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("start_time");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StepTime)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("step_time");
            });

            modelBuilder.Entity<BAcc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_Acc")
                    .IsClustered(false);

                entity.ToTable("b_Acc", "dbo");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BAcc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_Accs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BAccD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.Note1 })
                    .HasName("_pk_b_AccD")
                    .IsClustered(false);

                entity.ToTable("b_AccD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BAexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_AExp")
                    .IsClustered(false);

                entity.ToTable("b_AExp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompEmp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurEmp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Text1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Text2)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BAexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_AExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BArec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_ARec")
                    .IsClustered(false);

                entity.ToTable("b_ARec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompEmp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurEmp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Text1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Text2)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BArec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_ARecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BArepA>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_ARepA")
                    .IsClustered(false);

                entity.ToTable("b_ARepA", "dbo");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BArepA1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_ARepAs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BArepAa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_ARepAa", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<BArepAd>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.AssId })
                    .HasName("_pk_b_ARepADS")
                    .IsClustered(false);

                entity.ToTable("b_ARepADS", "dbo");

                entity.HasIndex(e => e.AcodeId1, "ACodeID1");

                entity.HasIndex(e => e.AcodeId2, "ACodeID2");

                entity.HasIndex(e => e.AcodeId3, "ACodeID3");

                entity.HasIndex(e => e.AcodeId4, "ACodeID4");

                entity.HasIndex(e => e.AcodeId5, "ACodeID5");

                entity.HasIndex(e => e.AcurrId, "ACurrID");

                entity.HasIndex(e => e.AkursCc, "AKursCC");

                entity.HasIndex(e => e.AkursMc, "AKursMC");

                entity.HasIndex(e => e.AsumAc, "ASumAC");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GstaccId, "GSTAccID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.AcodeId1).HasColumnName("ACodeID1");

                entity.Property(e => e.AcodeId2).HasColumnName("ACodeID2");

                entity.Property(e => e.AcodeId3).HasColumnName("ACodeID3");

                entity.Property(e => e.AcodeId4).HasColumnName("ACodeID4");

                entity.Property(e => e.AcodeId5).HasColumnName("ACodeID5");

                entity.Property(e => e.AcurrId).HasColumnName("ACurrID");

                entity.Property(e => e.AkursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AKursCC");

                entity.Property(e => e.AkursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AKursMC");

                entity.Property(e => e.AsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ASumAC");

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GstaccId).HasColumnName("GSTAccID");

                entity.Property(e => e.GstsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GSTSum_wt");

                entity.Property(e => e.GsttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GSTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BArepAdp>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId, e.Ppid })
                    .HasName("_pk_b_ARepADP")
                    .IsClustered(false);

                entity.ToTable("b_ARepADP", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.PcodeId1, "PCodeID1");

                entity.HasIndex(e => e.PcodeId2, "PCodeID2");

                entity.HasIndex(e => e.PcodeId3, "PCodeID3");

                entity.HasIndex(e => e.PcodeId4, "PCodeID4");

                entity.HasIndex(e => e.PcodeId5, "PCodeID5");

                entity.HasIndex(e => e.PcurrId, "PCurrID");

                entity.HasIndex(e => e.PkursCc, "PKursCC");

                entity.HasIndex(e => e.PkursMc, "PKursMC");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "_b_ARepADP_ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_ARepADP");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.PcodeId1).HasColumnName("PCodeID1");

                entity.Property(e => e.PcodeId2).HasColumnName("PCodeID2");

                entity.Property(e => e.PcodeId3).HasColumnName("PCodeID3");

                entity.Property(e => e.PcodeId4).HasColumnName("PCodeID4");

                entity.Property(e => e.PcodeId5).HasColumnName("PCodeID5");

                entity.Property(e => e.PcurrId).HasColumnName("PCurrID");

                entity.Property(e => e.PkursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PKursCC");

                entity.Property(e => e.PkursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PKursMC");

                entity.Property(e => e.PriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BArepAdv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DocDesc })
                    .HasName("_pk_b_ARepADV")
                    .IsClustered(false);

                entity.ToTable("b_ARepADV", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GvtaccId, "GVTAccID");

                entity.HasIndex(e => e.VcodeId1, "VCodeID1");

                entity.HasIndex(e => e.VcodeId2, "VCodeID2");

                entity.HasIndex(e => e.VcodeId3, "VCodeID3");

                entity.HasIndex(e => e.VcodeId4, "VCodeID4");

                entity.HasIndex(e => e.VcodeId5, "VCodeID5");

                entity.HasIndex(e => e.VcurrId, "VCurrID");

                entity.HasIndex(e => e.VkursCc, "VKursCC");

                entity.HasIndex(e => e.VkursMc, "VKursMC");

                entity.HasIndex(e => e.VsumAc, "VSumAC");

                entity.HasIndex(e => new { e.ChId, e.SumCcNt, e.TaxSum, e.SumCcWt }, "_b_ARepADV_ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GvtaccId).HasColumnName("GVTAccID");

                entity.Property(e => e.GvtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GVTSum_wt");

                entity.Property(e => e.GvttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GVTTaxSum");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.VcodeId1).HasColumnName("VCodeID1");

                entity.Property(e => e.VcodeId2).HasColumnName("VCodeID2");

                entity.Property(e => e.VcodeId3).HasColumnName("VCodeID3");

                entity.Property(e => e.VcodeId4).HasColumnName("VCodeID4");

                entity.Property(e => e.VcodeId5).HasColumnName("VCodeID5");

                entity.Property(e => e.VcurrId).HasColumnName("VCurrID");

                entity.Property(e => e.VkursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("VKursCC");

                entity.Property(e => e.VkursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("VKursMC");

                entity.Property(e => e.VsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("VSumAC");
            });

            modelBuilder.Entity<BBankExpAc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_BankExpAC")
                    .IsClustered(false);

                entity.ToTable("b_BankExpAC", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CkursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CKursCC");

                entity.Property(e => e.CkursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CKursMC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CSumCC");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<BBankExpCc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_BankExpCC")
                    .IsClustered(false);

                entity.ToTable("b_BankExpCC", "dbo");

                entity.HasIndex(e => e.AccountCc, "AccountCC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountCc, "CompAccountCC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountCC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BBankPayAc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_BankPayAC")
                    .IsClustered(false);

                entity.ToTable("b_BankPayAC", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CounId, "CounID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.PayType, "PayType");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.OurId, e.AccountAc }, "r_OursACb_BAPay");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.BankOperId).HasColumnName("BankOperID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompBank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompBankBlz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompBankBLZ");

                entity.Property(e => e.CompBankFw)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CompBankFW");

                entity.Property(e => e.CompBankSwift)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompBankSWIFT");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CorrBank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CorrBankBlz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CorrBankBLZ");

                entity.Property(e => e.CorrBankFw)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CorrBankFW");

                entity.Property(e => e.CorrBankSwift)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CorrBankSWIFT");

                entity.Property(e => e.CounId).HasColumnName("CounID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BBankPayCc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_BankPayCC")
                    .IsClustered(false);

                entity.ToTable("b_BankPayCC", "dbo");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.OurId, e.AccountCc }, "r_OursCCb_BCPay");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountCC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BBankRecAc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_BankRecAC")
                    .IsClustered(false);

                entity.ToTable("b_BankRecAC", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CkursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CKursCC");

                entity.Property(e => e.CkursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CKursMC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CSumCC");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<BBankRecCc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_BankRecCC")
                    .IsClustered(false);

                entity.ToTable("b_BankRecCC", "dbo");

                entity.HasIndex(e => e.AccountCc, "AccountCC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountCc, "CompAccountCC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountCC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BCexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_CExp")
                    .IsClustered(false);

                entity.ToTable("b_CExp", "dbo");

                entity.HasIndex(e => e.CashEmpId, "CashEmpID");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Appx)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ByDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CashEmpId).HasColumnName("CashEmpID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompTxt)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BCexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_CExps", "dbo");

                entity.Property(e => e.CashEmpId).HasColumnName("CashEmpID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BCinv>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_CInv")
                    .IsClustered(false);

                entity.ToTable("b_CInv", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursAc, "KursAC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.TaxPercent, "TaxPercent");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DtyCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DtyCC");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PrcCC");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TaxPercent).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BCinv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_CInvs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DtyCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DtyCC");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PrcCC");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TaxPercent).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BCinvD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_CInvD")
                    .IsClustered(false);

                entity.ToTable("b_CInvD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcIn, e.TaxSum, e.SumAc }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_CInvD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BCrec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_CRec")
                    .IsClustered(false);

                entity.ToTable("b_CRec", "dbo");

                entity.HasIndex(e => e.CashEmpId, "CashEmpID");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Appx)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ByDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CashEmpId).HasColumnName("CashEmpID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompTxt)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BCrec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_CRecs", "dbo");

                entity.Property(e => e.CashEmpId).HasColumnName("CashEmpID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BCrepA>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_CRepA")
                    .IsClustered(false);

                entity.ToTable("b_CRepA", "dbo");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BCrepA1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_CRepAs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BCrepAa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_CRepAa", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<BCrepAd>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.AssId })
                    .HasName("_pk_b_CRepADS")
                    .IsClustered(false);

                entity.ToTable("b_CRepADS", "dbo");

                entity.HasIndex(e => e.AcodeId1, "ACodeID1");

                entity.HasIndex(e => e.AcodeId2, "ACodeID2");

                entity.HasIndex(e => e.AcodeId3, "ACodeID3");

                entity.HasIndex(e => e.AcodeId4, "ACodeID4");

                entity.HasIndex(e => e.AcodeId5, "ACodeID5");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GstaccId, "GSTAccID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.AcodeId1).HasColumnName("ACodeID1");

                entity.Property(e => e.AcodeId2).HasColumnName("ACodeID2");

                entity.Property(e => e.AcodeId3).HasColumnName("ACodeID3");

                entity.Property(e => e.AcodeId4).HasColumnName("ACodeID4");

                entity.Property(e => e.AcodeId5).HasColumnName("ACodeID5");

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GstaccId).HasColumnName("GSTAccID");

                entity.Property(e => e.GstsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GSTSum_wt");

                entity.Property(e => e.GsttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GSTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BCrepAdp>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId, e.Ppid })
                    .HasName("_pk_b_CRepADP")
                    .IsClustered(false);

                entity.ToTable("b_CRepADP", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.PcodeId1, "PCodeID1");

                entity.HasIndex(e => e.PcodeId2, "PCodeID2");

                entity.HasIndex(e => e.PcodeId3, "PCodeID3");

                entity.HasIndex(e => e.PcodeId4, "PCodeID4");

                entity.HasIndex(e => e.PcodeId5, "PCodeID5");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_CRepADP");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.PcodeId1).HasColumnName("PCodeID1");

                entity.Property(e => e.PcodeId2).HasColumnName("PCodeID2");

                entity.Property(e => e.PcodeId3).HasColumnName("PCodeID3");

                entity.Property(e => e.PcodeId4).HasColumnName("PCodeID4");

                entity.Property(e => e.PcodeId5).HasColumnName("PCodeID5");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BCrepAdv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DocDesc })
                    .HasName("_pk_b_CRepADV")
                    .IsClustered(false);

                entity.ToTable("b_CRepADV", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GvtaccId, "GVTAccID");

                entity.HasIndex(e => e.VcodeId1, "VCodeID1");

                entity.HasIndex(e => e.VcodeId2, "VCodeID2");

                entity.HasIndex(e => e.VcodeId3, "VCodeID3");

                entity.HasIndex(e => e.VcodeId4, "VCodeID4");

                entity.HasIndex(e => e.VcodeId5, "VCodeID5");

                entity.HasIndex(e => new { e.ChId, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GvtaccId).HasColumnName("GVTAccID");

                entity.Property(e => e.GvtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GVTSum_wt");

                entity.Property(e => e.GvttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GVTTaxSum");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.VcodeId1).HasColumnName("VCodeID1");

                entity.Property(e => e.VcodeId2).HasColumnName("VCodeID2");

                entity.Property(e => e.VcodeId3).HasColumnName("VCodeID3");

                entity.Property(e => e.VcodeId4).HasColumnName("VCodeID4");

                entity.Property(e => e.VcodeId5).HasColumnName("VCodeID5");
            });

            modelBuilder.Entity<BCret>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_CRet")
                    .IsClustered(false);

                entity.ToTable("b_CRet", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BCret1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_CRets", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BCretD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_CRetD");

                entity.ToTable("b_CRetD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcIn, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_CRetD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BCst>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_Cst")
                    .IsClustered(false);

                entity.ToTable("b_Cst", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DelId, "DelID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursAc, "KursAC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.TmoreCc, "TMoreCC");

                entity.HasIndex(e => e.TsumAcIn, "TSumAC_In");

                entity.HasIndex(e => e.TtrtAc, "TTrtAC");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CstCompId).HasColumnName("CstCompID");

                entity.Property(e => e.CstDocCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DelId).HasColumnName("DelID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC");

                entity.Property(e => e.KursAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC_In");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TcstSumCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TCstSumCCCor");

                entity.Property(e => e.TmoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMoreCC");

                entity.Property(e => e.TsumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC_In");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.TtrtAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTrtAC");

                entity.Property(e => e.TtrtCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTrtCC");
            });

            modelBuilder.Entity<BCst1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_Csts", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC_In");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BCstD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_CstD")
                    .IsClustered(false);

                entity.ToTable("b_CstD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CstDty2, "CstDty2");

                entity.HasIndex(e => e.Dty2Cc, "Dty2CC");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcIn, e.TaxSum, e.SumAcIn }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_CstD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CstDty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstDty2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstExc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstPriceAC");

                entity.Property(e => e.CstPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstPriceCC");

                entity.Property(e => e.CstSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumAC");

                entity.Property(e => e.CstSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumCC");

                entity.Property(e => e.CstSumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumCC_In");

                entity.Property(e => e.CstSumCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumCCCor");

                entity.Property(e => e.Dty2Cc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Dty2CC");

                entity.Property(e => e.DtyCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DtyCC");

                entity.Property(e => e.ExcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExcCC");

                entity.Property(e => e.ExcCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExcCostCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.ImpCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ImpCC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PrcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PrcCC");

                entity.Property(e => e.PriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_In");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_In");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TrtAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TrtAC");

                entity.Property(e => e.TrtCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TrtCC");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BDstack>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_DStack")
                    .IsClustered(false);

                entity.ToTable("b_DStack", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocCode, "DocType");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.NewStockId, "NewStockID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.DocId, "SrcDocID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc2Nt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC2_nt");

                entity.Property(e => e.SumCc2Wt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC2_wt");

                entity.Property(e => e.SumCc3Nt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC3_nt");

                entity.Property(e => e.SumCc3Wt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC3_wt");

                entity.Property(e => e.SumCc4Nt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC4_nt");

                entity.Property(e => e.SumCc4Wt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC4_wt");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum4).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BExp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_Exp")
                    .IsClustered(false);

                entity.ToTable("b_Exp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BExp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_Exps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BExpD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_ExpD")
                    .IsClustered(false);

                entity.ToTable("b_ExpD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcIn, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_ExpD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BExpDlv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.LevyId })
                    .HasName("pk_b_ExpDLV");

                entity.ToTable("b_ExpDLV", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.LevySum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BGoperDoc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_MapDO")
                    .IsClustered(false);

                entity.ToTable("b_GOperDocs", "dbo");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.GtaxAccId, "GTaxAccID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Dscode).HasColumnName("DSCode");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtaxAccId).HasColumnName("GTaxAccID");

                entity.Property(e => e.Priority).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<BGtran>(entity =>
            {
                entity.HasKey(e => e.GtranId)
                    .HasName("_pk_b_GTran")
                    .IsClustered(false);

                entity.ToTable("b_GTran", "dbo");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.Property(e => e.GtranId)
                    .ValueGeneratedNever()
                    .HasColumnName("GTranID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<BGtranD>(entity =>
            {
                entity.HasKey(e => new { e.GtranId, e.AchId })
                    .HasName("pk_b_GTranD")
                    .IsClustered(false);

                entity.ToTable("b_GTranD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.CAssId, "C_AssID");

                entity.HasIndex(e => e.CCodeId1, "C_CodeID1");

                entity.HasIndex(e => e.CCodeId2, "C_CodeID2");

                entity.HasIndex(e => e.CCodeId3, "C_CodeID3");

                entity.HasIndex(e => e.CCodeId4, "C_CodeID4");

                entity.HasIndex(e => e.CCodeId5, "C_CodeID5");

                entity.HasIndex(e => e.CCompId, "C_CompID");

                entity.HasIndex(e => e.CEmpId, "C_EmpID");

                entity.HasIndex(e => e.CGaccId, "C_GAccID");

                entity.HasIndex(e => e.CGvolId, "C_GVolID");

                entity.HasIndex(e => e.CProdId, "C_ProdID");

                entity.HasIndex(e => e.CStockId, "C_StockID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DAssId, "D_AssID");

                entity.HasIndex(e => e.DCodeId1, "D_CodeID1");

                entity.HasIndex(e => e.DCodeId2, "D_CodeID2");

                entity.HasIndex(e => e.DCodeId3, "D_CodeID3");

                entity.HasIndex(e => e.DCodeId4, "D_CodeID4");

                entity.HasIndex(e => e.DCodeId5, "D_CodeID5");

                entity.HasIndex(e => e.DCompId, "D_CompID");

                entity.HasIndex(e => e.DEmpId, "D_EmpID");

                entity.HasIndex(e => e.DGaccId, "D_GAccID");

                entity.HasIndex(e => e.DGvolId, "D_GVolID");

                entity.HasIndex(e => e.DProdId, "D_ProdID");

                entity.HasIndex(e => e.DStockId, "D_StockID");

                entity.HasIndex(e => e.GtranId, "GTranID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.CAssId).HasColumnName("C_AssID");

                entity.Property(e => e.CCodeId1).HasColumnName("C_CodeID1");

                entity.Property(e => e.CCodeId2).HasColumnName("C_CodeID2");

                entity.Property(e => e.CCodeId3).HasColumnName("C_CodeID3");

                entity.Property(e => e.CCodeId4).HasColumnName("C_CodeID4");

                entity.Property(e => e.CCodeId5).HasColumnName("C_CodeID5");

                entity.Property(e => e.CCompId).HasColumnName("C_CompID");

                entity.Property(e => e.CEmpId).HasColumnName("C_EmpID");

                entity.Property(e => e.CGaccId).HasColumnName("C_GAccID");

                entity.Property(e => e.CGrndLinkId).HasColumnName("C_GrndLinkID");

                entity.Property(e => e.CGvolId).HasColumnName("C_GVolID");

                entity.Property(e => e.CProdId).HasColumnName("C_ProdID");

                entity.Property(e => e.CQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("C_Qty");

                entity.Property(e => e.CStockId).HasColumnName("C_StockID");

                entity.Property(e => e.CVol1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol1");

                entity.Property(e => e.CVol2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol2");

                entity.Property(e => e.CVol3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol3");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DAssId).HasColumnName("D_AssID");

                entity.Property(e => e.DCodeId1).HasColumnName("D_CodeID1");

                entity.Property(e => e.DCodeId2).HasColumnName("D_CodeID2");

                entity.Property(e => e.DCodeId3).HasColumnName("D_CodeID3");

                entity.Property(e => e.DCodeId4).HasColumnName("D_CodeID4");

                entity.Property(e => e.DCodeId5).HasColumnName("D_CodeID5");

                entity.Property(e => e.DCompId).HasColumnName("D_CompID");

                entity.Property(e => e.DEmpId).HasColumnName("D_EmpID");

                entity.Property(e => e.DGaccId).HasColumnName("D_GAccID");

                entity.Property(e => e.DGrndLinkId).HasColumnName("D_GrndLinkID");

                entity.Property(e => e.DGvolId).HasColumnName("D_GVolID");

                entity.Property(e => e.DProdId).HasColumnName("D_ProdID");

                entity.Property(e => e.DQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("D_Qty");

                entity.Property(e => e.DStockId).HasColumnName("D_StockID");

                entity.Property(e => e.DVol1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol1");

                entity.Property(e => e.DVol2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol2");

                entity.Property(e => e.DVol3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol3");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BGview>(entity =>
            {
                entity.HasKey(e => e.ViewId)
                    .HasName("_pk_b_GView")
                    .IsClustered(false);

                entity.ToTable("b_GView", "dbo");

                entity.HasIndex(e => e.DocCode, "DocType");

                entity.HasIndex(e => e.ViewName, "ViewName");

                entity.Property(e => e.ViewId)
                    .ValueGeneratedNever()
                    .HasColumnName("ViewID");

                entity.Property(e => e.AboxState1).HasColumnName("ABoxState1");

                entity.Property(e => e.AboxState2).HasColumnName("ABoxState2");

                entity.Property(e => e.AboxState3).HasColumnName("ABoxState3");

                entity.Property(e => e.CGaccUse).HasColumnName("C_GAccUse");

                entity.Property(e => e.CGaccs)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("C_GAccs");

                entity.Property(e => e.CboxState1).HasColumnName("CBoxState1");

                entity.Property(e => e.CboxState2).HasColumnName("CBoxState2");

                entity.Property(e => e.CboxState3).HasColumnName("CBoxState3");

                entity.Property(e => e.CboxState4).HasColumnName("CBoxState4");

                entity.Property(e => e.CboxState5).HasColumnName("CBoxState5");

                entity.Property(e => e.CboxState6).HasColumnName("CBoxState6");

                entity.Property(e => e.CboxState7).HasColumnName("CBoxState7");

                entity.Property(e => e.Ctrans).HasColumnName("CTrans");

                entity.Property(e => e.DGaccUse).HasColumnName("D_GAccUse");

                entity.Property(e => e.DGaccs)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("D_GAccs");

                entity.Property(e => e.Dtrans).HasColumnName("DTrans");

                entity.Property(e => e.OurList)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ViewName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BGviewD>(entity =>
            {
                entity.HasKey(e => new { e.ViewId, e.DimName })
                    .HasName("_pk_b_GViewD")
                    .IsClustered(false);

                entity.ToTable("b_GViewD", "dbo");

                entity.HasIndex(e => e.DimCaption, "DimCaption");

                entity.HasIndex(e => e.DimGroup, "DimGroup");

                entity.HasIndex(e => e.DimIndex, "DimIndex");

                entity.HasIndex(e => e.DimLastState, "DimLastState");

                entity.HasIndex(e => e.DimLoc, "DimLoc");

                entity.HasIndex(e => e.DimName, "DimName");

                entity.HasIndex(e => e.DimSort, "DimSort");

                entity.HasIndex(e => e.DimState, "DimState");

                entity.HasIndex(e => e.DimWidth, "DimWidth");

                entity.HasIndex(e => e.ParentCaption, "ParentCaption");

                entity.HasIndex(e => e.ViewId, "ViewID");

                entity.Property(e => e.ViewId).HasColumnName("ViewID");

                entity.Property(e => e.DimName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DimCaption)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentCaption)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BGviewU>(entity =>
            {
                entity.HasKey(e => new { e.ViewId, e.UserId })
                    .HasName("_pk_b_GViewU")
                    .IsClustered(false);

                entity.ToTable("b_GViewU", "dbo");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.HasIndex(e => e.ViewId, "ViewID");

                entity.Property(e => e.ViewId).HasColumnName("ViewID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<BInv>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_Inv")
                    .IsClustered(false);

                entity.ToTable("b_Inv", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BInv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_Invs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BInvD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_InvD")
                    .IsClustered(false);

                entity.ToTable("b_InvD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcIn, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_InvD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BInvDlv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.LevyId })
                    .HasName("pk_b_InvDLV");

                entity.ToTable("b_InvDLV", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.LevySum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BLexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_LExp")
                    .IsClustered(false);

                entity.ToTable("b_LExp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LexpPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpPrc");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");
            });

            modelBuilder.Entity<BLexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_LExps", "dbo");

                entity.Property(e => e.AccDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.LexpPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpPrc");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BLexpD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.EmpId })
                    .HasName("_pk_b_LExpD")
                    .IsClustered(false);

                entity.ToTable("b_LExpD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.SumCc, "SumCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<BLrec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_LRec")
                    .IsClustered(false);

                entity.ToTable("b_LRec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => e.WorkDays, "WorkDays");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TadvanceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TAdvanceCC");

                entity.Property(e => e.TalimonyCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TAlimonyCC");

                entity.Property(e => e.TchargeCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TChargeCC");

                entity.Property(e => e.TcrateCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TCRateCC");

                entity.Property(e => e.TempTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TEmpTaxCC");

                entity.Property(e => e.TincomeTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TIncomeTaxCC");

                entity.Property(e => e.TinsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TInsureCC");

                entity.Property(e => e.TinsureTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TInsureTaxCC");

                entity.Property(e => e.TleaveCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLeaveCC");

                entity.Property(e => e.TloanCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLoanCC");

                entity.Property(e => e.TmchargeCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMChargeCC");

                entity.Property(e => e.TmchargeCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMChargeCC1");

                entity.Property(e => e.TmchargeCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMChargeCC2");

                entity.Property(e => e.TmhelpCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMHelpCC");

                entity.Property(e => e.TmoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMoreCC");

                entity.Property(e => e.TmoreCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMoreCC1");

                entity.Property(e => e.TmoreCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMoreCC2");

                entity.Property(e => e.TnleaveCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNLeaveCC");

                entity.Property(e => e.TpensionTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPensionTaxCC");

                entity.Property(e => e.TpregCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPregCC");

                entity.Property(e => e.TsickCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSickCC");

                entity.Property(e => e.TunionCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TUnionCC");
            });

            modelBuilder.Entity<BLrec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_LRecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Tcharge)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TCharge");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TunCharge)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TUnCharge");
            });

            modelBuilder.Entity<BLrecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_LRecD")
                    .IsClustered(false);

                entity.ToTable("b_LRecD", "dbo");

                entity.HasIndex(e => e.AdvanceCc, "AdvanceCC");

                entity.HasIndex(e => e.AlimonyCc, "AlimonyCC");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.ChargeCc, "ChargeCC");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.IncomeTaxCc, "IncomeTaxCC");

                entity.HasIndex(e => e.InsureCc, "InsureCC");

                entity.HasIndex(e => e.InsureTaxCc, "InsureTaxCC");

                entity.HasIndex(e => e.LeaveCc, "LeaveCC");

                entity.HasIndex(e => e.MchargeCc, "MChargeCC");

                entity.HasIndex(e => e.MchargeCc1, "MChargeCC1");

                entity.HasIndex(e => e.MchargeCc2, "MChargeCC2");

                entity.HasIndex(e => e.MhelpCc, "MHelpCC");

                entity.HasIndex(e => e.MoreCc, "MoreCC");

                entity.HasIndex(e => e.MoreCc1, "MoreCC1");

                entity.HasIndex(e => e.MoreCc2, "MoreCC2");

                entity.HasIndex(e => e.NleaveCc, "NLeaveCC");

                entity.HasIndex(e => e.PensionTaxCc, "PensionTaxCC");

                entity.HasIndex(e => e.SickCc, "SickCC");

                entity.HasIndex(e => e.SickDays, "SickDays");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.HasIndex(e => e.WorkDays, "WorkDays");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AdvanceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AdvanceCC");

                entity.Property(e => e.AlimonyCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AlimonyCC");

                entity.Property(e => e.ChargeCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChargeCC");

                entity.Property(e => e.CrateCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CRateCC");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EmpTaxCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.IncomeTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IncomeTaxCC");

                entity.Property(e => e.InsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("InsureCC");

                entity.Property(e => e.InsureTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("InsureTaxCC");

                entity.Property(e => e.LeaveCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LeaveCC");

                entity.Property(e => e.LoanCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LoanCC");

                entity.Property(e => e.MchargeCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MChargeCC");

                entity.Property(e => e.MchargeCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MChargeCC1");

                entity.Property(e => e.MchargeCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MChargeCC2");

                entity.Property(e => e.MhelpCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MHelpCC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.MoreCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC1");

                entity.Property(e => e.MoreCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC2");

                entity.Property(e => e.NleaveCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NLeaveCC");

                entity.Property(e => e.PensionTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PensionTaxCC");

                entity.Property(e => e.PregCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PregCC");

                entity.Property(e => e.SickCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SickCC");

                entity.Property(e => e.TuniSocChargeСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TUniSocChargeСС");

                entity.Property(e => e.TuniSocDedСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TUniSocDedСС");

                entity.Property(e => e.UniSocChargeContractsСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocChargeContractsСС");

                entity.Property(e => e.UniSocChargeSickСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocChargeSickСС");

                entity.Property(e => e.UniSocChargeСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocChargeСС");

                entity.Property(e => e.UniSocDedContractsCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocDedContractsCC");

                entity.Property(e => e.UniSocDedSickCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocDedSickCC");

                entity.Property(e => e.UniSocDedСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocDedСС");

                entity.Property(e => e.UnionCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnionCC");
            });

            modelBuilder.Entity<BPacc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_PAcc")
                    .IsClustered(false);

                entity.ToTable("b_PAcc", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BPacc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_PAccs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BPaccD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_PAccD")
                    .IsClustered(false);

                entity.ToTable("b_PAccD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_PAccD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BPcost>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_PCost")
                    .IsClustered(false);

                entity.ToTable("b_PCost", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TexpCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExpCostCC");

                entity.Property(e => e.TexpPosCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExpPosCostCC");

                entity.Property(e => e.TexpPosProdCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExpPosProdCostCC");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");
            });

            modelBuilder.Entity<BPcost1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_PCosts", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TexpCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExpCostCC");

                entity.Property(e => e.TexpPosCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExpPosCostCC");

                entity.Property(e => e.TexpPosProdCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExpPosProdCostCC");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");
            });

            modelBuilder.Entity<BPcostD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_b_PCostD")
                    .IsClustered(false);

                entity.ToTable("b_PCostD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.ExpCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExpCostCC");

                entity.Property(e => e.ExpPosCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExpPosCostCC");

                entity.Property(e => e.ExpPosProdCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExpPosProdCostCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.NewPpid).HasColumnName("NewPPID");

                entity.Property(e => e.NewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_nt");

                entity.Property(e => e.NewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_wt");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BPcostDdexp>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SrcPosId })
                    .HasName("pk_b_PCostDDExp")
                    .IsClustered(false);

                entity.ToTable("b_PCostDDExp", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetCompId).HasColumnName("DetCompID");

                entity.Property(e => e.DetNote)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DetSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumCC_nt");

                entity.Property(e => e.DetSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumCC_wt");

                entity.Property(e => e.DetTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");
            });

            modelBuilder.Entity<BPcostDdexpProd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SrcPosId })
                    .HasName("pk_b_PCostDDExpProds")
                    .IsClustered(false);

                entity.ToTable("b_PCostDDExpProds", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetPpid).HasColumnName("DetPPID");

                entity.Property(e => e.DetPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetPriceCC_nt");

                entity.Property(e => e.DetPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetPriceCC_wt");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.DetQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumCC_nt");

                entity.Property(e => e.DetSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumCC_wt");

                entity.Property(e => e.DetTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");
            });

            modelBuilder.Entity<BPcostDexp>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_b_PCostDExp")
                    .IsClustered(false);

                entity.ToTable("b_PCostDExp", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetCompId).HasColumnName("DetCompID");

                entity.Property(e => e.DetNote)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DetSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumCC_nt");

                entity.Property(e => e.DetSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumCC_wt");

                entity.Property(e => e.DetTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");
            });

            modelBuilder.Entity<BPest>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_PEst")
                    .IsClustered(false);

                entity.ToTable("b_PEst", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BPest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_PEsts", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TNewSumMC");

                entity.Property(e => e.TnewSumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TNewSumMC_nt");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BPestD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_PEstD")
                    .IsClustered(false);

                entity.ToTable("b_PEstD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.NewPpid, "NewPPID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ChId, e.NewSumCcNt, e.NewTaxSum, e.NewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_PEstD");

                entity.HasIndex(e => new { e.ProdId, e.NewPpid }, "b_PInPb_PEstD1");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.NewPpid).HasColumnName("NewPPID");

                entity.Property(e => e.NewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_nt");

                entity.Property(e => e.NewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_wt");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BPexc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_PExc")
                    .IsClustered(false);

                entity.ToTable("b_PExc", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.NewStockId, "NewStockID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BPexc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_PExcs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BPexcD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_PExcD")
                    .IsClustered(false);

                entity.ToTable("b_PExcD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_PExcD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BPinP>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.Ppid })
                    .HasName("_pk_b_PInP")
                    .IsClustered(false);

                entity.ToTable("b_PInP", "dbo");

                entity.HasIndex(e => e.CompId, "CompID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CostAc, "CostAC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CostCc, "CostCC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CounId, "CounID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PriceMc, "PriceMC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Priority, "Priority")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdDate, "ProdDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.ProdPpproducer, "ProdPPProducer")
                    .HasFillFactor(90);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Article)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CostAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostAC");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.CounId).HasColumnName("CounID");

                entity.Property(e => e.CstDocCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.File1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.Ppdelay).HasColumnName("PPDelay");

                entity.Property(e => e.Ppdesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PPDesc");

                entity.Property(e => e.Ppweight)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PPWeight");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdPpdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ProdPPDate");

                entity.Property(e => e.ProdPpproducer)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ProdPPProducer");
            });

            modelBuilder.Entity<BPinP1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_PInPs", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CostAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostAC");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.PriceMcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC_In");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<BPven>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_PVen")
                    .IsClustered(false);

                entity.ToTable("b_PVen", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BPven1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_PVens", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BPvenA>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("_pk_b_PVenA");

                entity.ToTable("b_PVenA", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.ChId, e.TsrcPosId }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.TsrcPosId, "TSrcPosID");

                entity.HasIndex(e => new { e.TnewSumCcWt, e.TnewTaxSum, e.TnewSumCcNt, e.TnewQty }, "ZNewTotals");

                entity.HasIndex(e => new { e.TsumCcWt, e.TtaxSum, e.TsumCcNt, e.Tqty }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Norma1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TnewQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewQty");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TsrcPosId).HasColumnName("TSrcPosID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BPvenD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DetProdId, e.SrcPosId })
                    .HasName("_pk_b_PVenD");

                entity.ToTable("b_PVenD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => new { e.ChId, e.DetProdId }, "ChIDDetProdID");

                entity.HasIndex(e => new { e.DetProdId, e.Ppid }, "DetProdIDPPID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BRec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_Rec")
                    .IsClustered(false);

                entity.ToTable("b_Rec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BRec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_Recs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BRecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_RecD")
                    .IsClustered(false);

                entity.ToTable("b_RecD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_RecD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.CostSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRem>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.StockId, e.ProdId, e.Ppid })
                    .HasName("_pk_b_Rem")
                    .IsClustered(false);

                entity.ToTable("b_Rem", "dbo");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_Rem");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BRemAl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RemAL", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("SumMC");

                entity.Property(e => e.Tacc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TAcc");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.Trem)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TRem");

                entity.Property(e => e.TremSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TRemSumCC");

                entity.Property(e => e.TremSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TRemSumMC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRemAp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RemAP", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRemAq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RemAQ", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRemD>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.StockId, e.ProdId, e.Ppid })
                    .HasName("_pk_b_RemD")
                    .IsClustered(false);

                entity.ToTable("b_RemD", "dbo");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_RemD");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BRemDl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RemDL", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("SumMC");

                entity.Property(e => e.Tacc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TAcc");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.Trem)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TRem");

                entity.Property(e => e.TremSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TRemSumCC");

                entity.Property(e => e.TremSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TRemSumMC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRemDp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RemDP", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRemDq>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RemDQ", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRepA>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_RepA")
                    .IsClustered(false);

                entity.ToTable("b_RepA", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BRepA1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RepAs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BRepAa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_RepAa", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<BRepAd>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.AssId })
                    .HasName("_pk_b_RepADS")
                    .IsClustered(false);

                entity.ToTable("b_RepADS", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRepAdp>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId, e.Ppid })
                    .HasName("_pk_b_RepADP")
                    .IsClustered(false);

                entity.ToTable("b_RepADP", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_RepADP");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BRepAdv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DocDesc })
                    .HasName("_pk_b_RepADV")
                    .IsClustered(false);

                entity.ToTable("b_RepADV", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.ChId, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BuyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BRet>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_Ret")
                    .IsClustered(false);

                entity.ToTable("b_Ret", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TranCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranCC");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BRet1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_Rets", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BRetD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_RetD")
                    .IsClustered(false);

                entity.ToTable("b_RetD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcIn, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_RetD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BRetDlv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.LevyId })
                    .HasName("pk_b_RetDLV");

                entity.ToTable("b_RetDLV", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.LevySum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSdep>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SDep")
                    .IsClustered(false);

                entity.ToTable("b_SDep", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSdep1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SDeps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSdepD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SDepD")
                    .IsClustered(false);

                entity.ToTable("b_SDepD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSexc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SExc")
                    .IsClustered(false);

                entity.ToTable("b_SExc", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.NewEmpId, "NewEmpID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewDepId).HasColumnName("NewDepID");

                entity.Property(e => e.NewEmpId).HasColumnName("NewEmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSexc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SExcs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewEmpId).HasColumnName("NewEmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSexcD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SExcD")
                    .IsClustered(false);

                entity.ToTable("b_SExcD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SExp")
                    .IsClustered(false);

                entity.ToTable("b_SExp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSexpD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SExpD")
                    .IsClustered(false);

                entity.ToTable("b_SExpD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSinv>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SInv")
                    .IsClustered(false);

                entity.ToTable("b_SInv", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSinv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SInvs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSinvD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SInvD")
                    .IsClustered(false);

                entity.ToTable("b_SInvD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSput>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SPut")
                    .IsClustered(false);

                entity.ToTable("b_SPut", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSput1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SPuts", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSputD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SPutD")
                    .IsClustered(false);

                entity.ToTable("b_SPutD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSrec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SRec")
                    .IsClustered(false);

                entity.ToTable("b_SRec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSrec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SRecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSrecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SRecD")
                    .IsClustered(false);

                entity.ToTable("b_SRecD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSrep>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SRep")
                    .IsClustered(false);

                entity.ToTable("b_SRep", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.RepType, "RepType");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSrep1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SReps", "dbo");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");

                entity.Property(e => e.TtaxSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTaxSumCC");

                entity.Property(e => e.TtaxSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TTaxSumMC");
            });

            modelBuilder.Entity<BSrepAa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SRepAa", "dbo");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FsumCcNt)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("FSumCC_nt");

                entity.Property(e => e.FsumCcWt)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("FSumCC_wt");

                entity.Property(e => e.FsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("FSumMC_nt");

                entity.Property(e => e.FsumMcWt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("FSumMC_wt");

                entity.Property(e => e.FtaxSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("FTaxSumCC");

                entity.Property(e => e.FtaxSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("FTaxSumMC");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<BSrepDp>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SRepDP")
                    .IsClustered(false);

                entity.ToTable("b_SRepDP", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.PcodeId1, "PCodeID1");

                entity.HasIndex(e => e.PcodeId2, "PCodeID2");

                entity.HasIndex(e => e.PcodeId3, "PCodeID3");

                entity.HasIndex(e => e.PcodeId4, "PCodeID4");

                entity.HasIndex(e => e.PcodeId5, "PCodeID5");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_SRepDP");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.PcodeId1).HasColumnName("PCodeID1");

                entity.Property(e => e.PcodeId2).HasColumnName("PCodeID2");

                entity.Property(e => e.PcodeId3).HasColumnName("PCodeID3");

                entity.Property(e => e.PcodeId4).HasColumnName("PCodeID4");

                entity.Property(e => e.PcodeId5).HasColumnName("PCodeID5");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BSrepDv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.VsrcPosId })
                    .HasName("_pk_b_SRepDV")
                    .IsClustered(false);

                entity.ToTable("b_SRepDV", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.VcodeId1, "VCodeID1");

                entity.HasIndex(e => e.VcodeId2, "VCodeID2");

                entity.HasIndex(e => e.VcodeId3, "VCodeID3");

                entity.HasIndex(e => e.VcodeId4, "VCodeID4");

                entity.HasIndex(e => e.VcodeId5, "VCodeID5");

                entity.HasIndex(e => new { e.CostSumCcWt, e.CostTaxSum, e.CostSumCcNt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.VsrcPosId).HasColumnName("VSrcPosID");

                entity.Property(e => e.CostSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostSumCC_nt");

                entity.Property(e => e.CostSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostSumCC_wt");

                entity.Property(e => e.CostTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposTsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTSum_wt");

                entity.Property(e => e.GposTtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GPosTTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.VcodeId1).HasColumnName("VCodeID1");

                entity.Property(e => e.VcodeId2).HasColumnName("VCodeID2");

                entity.Property(e => e.VcodeId3).HasColumnName("VCodeID3");

                entity.Property(e => e.VcodeId4).HasColumnName("VCodeID4");

                entity.Property(e => e.VcodeId5).HasColumnName("VCodeID5");
            });

            modelBuilder.Entity<BSven>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SVen")
                    .IsClustered(false);

                entity.ToTable("b_SVen", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSven1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SVens", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSvenD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SVenD")
                    .IsClustered(false);

                entity.ToTable("b_SVenD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Age).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.AgeRem).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.AssDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.DepRestSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DepRestSumCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TdepSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TDepSumCC");

                entity.Property(e => e.TmodSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TModSumCC");

                entity.Property(e => e.TrepSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRepSumCC");

                entity.Property(e => e.TwerSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TWerSumCC");

                entity.Property(e => e.WerRestSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WerRestSumCC");
            });

            modelBuilder.Entity<BSwer>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_SWer")
                    .IsClustered(false);

                entity.ToTable("b_SWer", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BSwer1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_SWers", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BSwerD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_SWerD")
                    .IsClustered(false);

                entity.ToTable("b_SWerD", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BTexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TExp")
                    .IsClustered(false);

                entity.ToTable("b_TExp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.DocType, "DocType");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcNt0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_0");

                entity.Property(e => e.SumCcNt20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_20");

                entity.Property(e => e.SumCcNt7)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_7");

                entity.Property(e => e.SumCcNtFree)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_Free");

                entity.Property(e => e.SumCcNtNo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_No");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_0");

                entity.Property(e => e.TaxSum20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_20");

                entity.Property(e => e.TaxSum7)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_7");

                entity.Property(e => e.TaxSumFree)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_Free");

                entity.Property(e => e.TaxSumNo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_No");
            });

            modelBuilder.Entity<BTexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_TExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BTran>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TranS")
                    .IsClustered(false);

                entity.ToTable("b_TranS", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.InDocId, "SrcDocID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BTranC>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TranC")
                    .IsClustered(false);

                entity.ToTable("b_TranC", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.DocId, "SrcDocID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => e.SumAc1, "SumAC1");

                entity.HasIndex(e => e.SumAc1Nt, "SumAC1_nt");

                entity.HasIndex(e => e.SumAcNt, "SumAC_nt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => e.TaxSum1, "TaxSum1");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumAc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC1");

                entity.Property(e => e.SumAc1Nt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC1_nt");

                entity.Property(e => e.SumAcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_nt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BTranC1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_TranCs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCc1)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC1");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMc1)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC1");
            });

            modelBuilder.Entity<BTranE>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TranE")
                    .IsClustered(false);

                entity.ToTable("b_TranE", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.InDocId, "SrcDocID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => e.SumAc1, "SumAC1");

                entity.HasIndex(e => e.SumAc1Nt, "SumAC1_nt");

                entity.HasIndex(e => e.SumAcNt, "SumAC_nt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => e.TaxSum1, "TaxSum1");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumAc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC1");

                entity.Property(e => e.SumAc1Nt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC1_nt");

                entity.Property(e => e.SumAcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_nt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BTranE1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_TranEs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCc1)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC1");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMc1)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC1");
            });

            modelBuilder.Entity<BTranH>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TranH")
                    .IsClustered(false);

                entity.ToTable("b_TranH", "dbo");

                entity.HasIndex(e => e.CAssId, "C_AssID");

                entity.HasIndex(e => e.CCodeId1, "C_CodeID1");

                entity.HasIndex(e => e.CCodeId2, "C_CodeID2");

                entity.HasIndex(e => e.CCodeId3, "C_CodeID3");

                entity.HasIndex(e => e.CCodeId4, "C_CodeID4");

                entity.HasIndex(e => e.CCodeId5, "C_CodeID5");

                entity.HasIndex(e => e.CCompId, "C_CompID");

                entity.HasIndex(e => e.CEmpId, "C_EmpID");

                entity.HasIndex(e => e.CGaccId, "C_GAccID");

                entity.HasIndex(e => e.CGvolId, "C_GVolID");

                entity.HasIndex(e => e.CProdId, "C_ProdID");

                entity.HasIndex(e => e.CStockId, "C_StockID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DAssId, "D_AssID");

                entity.HasIndex(e => e.DCodeId1, "D_CodeID1");

                entity.HasIndex(e => e.DCodeId2, "D_CodeID2");

                entity.HasIndex(e => e.DCodeId3, "D_CodeID3");

                entity.HasIndex(e => e.DCodeId4, "D_CodeID4");

                entity.HasIndex(e => e.DCodeId5, "D_CodeID5");

                entity.HasIndex(e => e.DCompId, "D_CompID");

                entity.HasIndex(e => e.DEmpId, "D_EmpID");

                entity.HasIndex(e => e.DGaccId, "D_GAccID");

                entity.HasIndex(e => e.DGvolId, "D_GVolID");

                entity.HasIndex(e => e.DProdId, "D_ProdID");

                entity.HasIndex(e => e.DStockId, "D_StockID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CAssId).HasColumnName("C_AssID");

                entity.Property(e => e.CCodeId1).HasColumnName("C_CodeID1");

                entity.Property(e => e.CCodeId2).HasColumnName("C_CodeID2");

                entity.Property(e => e.CCodeId3).HasColumnName("C_CodeID3");

                entity.Property(e => e.CCodeId4).HasColumnName("C_CodeID4");

                entity.Property(e => e.CCodeId5).HasColumnName("C_CodeID5");

                entity.Property(e => e.CCompId).HasColumnName("C_CompID");

                entity.Property(e => e.CEmpId).HasColumnName("C_EmpID");

                entity.Property(e => e.CGaccId).HasColumnName("C_GAccID");

                entity.Property(e => e.CGvolId).HasColumnName("C_GVolID");

                entity.Property(e => e.CProdId).HasColumnName("C_ProdID");

                entity.Property(e => e.CQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("C_Qty");

                entity.Property(e => e.CStockId).HasColumnName("C_StockID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DAssId).HasColumnName("D_AssID");

                entity.Property(e => e.DCodeId1).HasColumnName("D_CodeID1");

                entity.Property(e => e.DCodeId2).HasColumnName("D_CodeID2");

                entity.Property(e => e.DCodeId3).HasColumnName("D_CodeID3");

                entity.Property(e => e.DCodeId4).HasColumnName("D_CodeID4");

                entity.Property(e => e.DCodeId5).HasColumnName("D_CodeID5");

                entity.Property(e => e.DCompId).HasColumnName("D_CompID");

                entity.Property(e => e.DEmpId).HasColumnName("D_EmpID");

                entity.Property(e => e.DGaccId).HasColumnName("D_GAccID");

                entity.Property(e => e.DGvolId).HasColumnName("D_GVolID");

                entity.Property(e => e.DProdId).HasColumnName("D_ProdID");

                entity.Property(e => e.DQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("D_Qty");

                entity.Property(e => e.DStockId).HasColumnName("D_StockID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.SrcDocName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BTranP>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TranP")
                    .IsClustered(false);

                entity.ToTable("b_TranP", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.InDocId, "SrcDocID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumCcIn, "SumCC_In");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_TranP");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BTranP1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_TranPs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BTranSs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_TranSs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<BTranV>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TranV")
                    .IsClustered(false);

                entity.ToTable("b_TranV", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.InDocId, "SrcDocID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => e.SumAc1, "SumAC1");

                entity.HasIndex(e => e.SumAc1Nt, "SumAC1_nt");

                entity.HasIndex(e => e.SumAcNt, "SumAC_nt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => e.TaxSum1, "TaxSum1");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumAc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC1");

                entity.Property(e => e.SumAc1Nt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC1_nt");

                entity.Property(e => e.SumAcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_nt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BTranV1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_TranVs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCc1)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC1");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMc1)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC1");
            });

            modelBuilder.Entity<BTrec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_TRec")
                    .IsClustered(false);

                entity.ToTable("b_TRec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.DocType, "DocType");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.GtaccId, "GTAccID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GposId).HasColumnName("GPosID");

                entity.Property(e => e.GtaccId).HasColumnName("GTAccID");

                entity.Property(e => e.GtadvAccId).HasColumnName("GTAdvAccID");

                entity.Property(e => e.GtadvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvSum_wt");

                entity.Property(e => e.GtadvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTAdvTaxSum");

                entity.Property(e => e.GtcorrAdvSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvSum_wt");

                entity.Property(e => e.GtcorrAdvTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrAdvTaxSum");

                entity.Property(e => e.GtcorrSumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrSum_wt");

                entity.Property(e => e.GtcorrTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTCorrTaxSum");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.GtsumWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTSum_wt");

                entity.Property(e => e.GttaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GTTaxSum");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayForm)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcNt0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_0");

                entity.Property(e => e.SumCcNt20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_20");

                entity.Property(e => e.SumCcNt7)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_7");

                entity.Property(e => e.SumCcNtFree)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_Free");

                entity.Property(e => e.SumCcNtNo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_No");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_0");

                entity.Property(e => e.TaxSum20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_20");

                entity.Property(e => e.TaxSum7)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_7");

                entity.Property(e => e.TaxSumFree)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_Free");

                entity.Property(e => e.TaxSumNo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_No");
            });

            modelBuilder.Entity<BTrec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_TRecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TsumMcNt)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC_nt");
            });

            modelBuilder.Entity<BWbill>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_WBill")
                    .IsClustered(false);

                entity.ToTable("b_WBill", "dbo");

                entity.HasIndex(e => e.CarrId, "CarrID");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.TrailerId1, "TrailerID1");

                entity.HasIndex(e => e.TrailerId2, "TrailerID2");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CarrId).HasColumnName("CarrID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EndSpInf).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EndTime).HasColumnType("smalldatetime");

                entity.Property(e => e.GiveFuell).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InRemFuell).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NexpFuell)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NExpFuell");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RaceLength).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemFuell).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StartSpInf).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StartTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TrailerId1).HasColumnName("TrailerID1");

                entity.Property(e => e.TrailerId2).HasColumnName("TrailerID2");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BWbill1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("b_WBills", "dbo");

                entity.Property(e => e.CarrId).HasColumnName("CarrID");

                entity.Property(e => e.CarrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RaceLength).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TrailerId1).HasColumnName("TrailerID1");

                entity.Property(e => e.TrailerId2).HasColumnName("TrailerID2");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<BWbillA>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_WBillA")
                    .IsClustered(false);

                entity.ToTable("b_WBillA", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_WBillA");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<BWbillD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_b_WBillD")
                    .IsClustered(false);

                entity.ToTable("b_WBillD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.IntEndTime).HasColumnType("smalldatetime");

                entity.Property(e => e.IntStartTime).HasColumnType("smalldatetime");

                entity.Property(e => e.JobDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LoadPoint)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubordDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UnLoadPoint)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BZIn>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInS")
                    .IsClustered(false);

                entity.ToTable("b_zInS", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.SumCcNt, e.TaxSum, e.SumCcWt, e.AgeSumCcNt }, "ZTotals");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AgeDepSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AgeDepSumCC_nt");

                entity.Property(e => e.AgeSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AgeSumCC_nt");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BZInBa>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInBA")
                    .IsClustered(false);

                entity.ToTable("b_zInBA", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => new { e.OurId, e.AccountAc }, "r_OursACb_zInBA");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BZInBc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInBC")
                    .IsClustered(false);

                entity.ToTable("b_zInBC", "dbo");

                entity.HasIndex(e => e.AccountCc, "AccountCC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.SumCc, "SumCC");

                entity.HasIndex(e => new { e.OurId, e.AccountCc }, "r_OursCCb_zInBC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<BZInC>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInC")
                    .IsClustered(false);

                entity.ToTable("b_zInC", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountCC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BZInCa>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInCA")
                    .IsClustered(false);

                entity.ToTable("b_zInCA", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BZInE>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInE")
                    .IsClustered(false);

                entity.ToTable("b_zInE", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BZInH>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_b_zInH")
                    .IsClustered(false);

                entity.ToTable("b_zInH", "dbo");

                entity.HasIndex(e => e.CAssId, "C_AssID");

                entity.HasIndex(e => e.CCodeId1, "C_CodeID1");

                entity.HasIndex(e => e.CCodeId2, "C_CodeID2");

                entity.HasIndex(e => e.CCodeId3, "C_CodeID3");

                entity.HasIndex(e => e.CCodeId4, "C_CodeID4");

                entity.HasIndex(e => e.CCodeId5, "C_CodeID5");

                entity.HasIndex(e => e.CCompId, "C_CompID");

                entity.HasIndex(e => e.CEmpId, "C_EmpID");

                entity.HasIndex(e => e.CGaccId, "C_GAccID");

                entity.HasIndex(e => e.CGvolId, "C_GVolID");

                entity.HasIndex(e => e.CProdId, "C_ProdID");

                entity.HasIndex(e => e.CStockId, "C_StockID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DAssId, "D_AssID");

                entity.HasIndex(e => e.DCodeId1, "D_CodeID1");

                entity.HasIndex(e => e.DCodeId2, "D_CodeID2");

                entity.HasIndex(e => e.DCodeId3, "D_CodeID3");

                entity.HasIndex(e => e.DCodeId4, "D_CodeID4");

                entity.HasIndex(e => e.DCodeId5, "D_CodeID5");

                entity.HasIndex(e => e.DCompId, "D_CompID");

                entity.HasIndex(e => e.DEmpId, "D_EmpID");

                entity.HasIndex(e => e.DGaccId, "D_GAccID");

                entity.HasIndex(e => e.DGvolId, "D_GVolID");

                entity.HasIndex(e => e.DProdId, "D_ProdID");

                entity.HasIndex(e => e.DStockId, "D_StockID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CAssId).HasColumnName("C_AssID");

                entity.Property(e => e.CCodeId1).HasColumnName("C_CodeID1");

                entity.Property(e => e.CCodeId2).HasColumnName("C_CodeID2");

                entity.Property(e => e.CCodeId3).HasColumnName("C_CodeID3");

                entity.Property(e => e.CCodeId4).HasColumnName("C_CodeID4");

                entity.Property(e => e.CCodeId5).HasColumnName("C_CodeID5");

                entity.Property(e => e.CCompId).HasColumnName("C_CompID");

                entity.Property(e => e.CEmpId).HasColumnName("C_EmpID");

                entity.Property(e => e.CGaccId).HasColumnName("C_GAccID");

                entity.Property(e => e.CGvolId).HasColumnName("C_GVolID");

                entity.Property(e => e.CProdId).HasColumnName("C_ProdID");

                entity.Property(e => e.CQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("C_Qty");

                entity.Property(e => e.CStockId).HasColumnName("C_StockID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DAssId).HasColumnName("D_AssID");

                entity.Property(e => e.DCodeId1).HasColumnName("D_CodeID1");

                entity.Property(e => e.DCodeId2).HasColumnName("D_CodeID2");

                entity.Property(e => e.DCodeId3).HasColumnName("D_CodeID3");

                entity.Property(e => e.DCodeId4).HasColumnName("D_CodeID4");

                entity.Property(e => e.DCodeId5).HasColumnName("D_CodeID5");

                entity.Property(e => e.DCompId).HasColumnName("D_CompID");

                entity.Property(e => e.DEmpId).HasColumnName("D_EmpID");

                entity.Property(e => e.DGaccId).HasColumnName("D_GAccID");

                entity.Property(e => e.DGvolId).HasColumnName("D_GVolID");

                entity.Property(e => e.DProdId).HasColumnName("D_ProdID");

                entity.Property(e => e.DQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("D_Qty");

                entity.Property(e => e.DStockId).HasColumnName("D_StockID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<BZInP>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInP")
                    .IsClustered(false);

                entity.ToTable("b_zInP", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "b_PInPb_zInP");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<BZInV>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_b_zInV")
                    .IsClustered(false);

                entity.ToTable("b_zInV", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CCompCor>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_CompCor")
                    .IsClustered(false);

                entity.ToTable("c_CompCor", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CCompCurr>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_CompCurr")
                    .IsClustered(false);

                entity.ToTable("c_CompCurr", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.NewAccountAc, "NewAccountAC");

                entity.HasIndex(e => e.NewCompAccountAc, "NewCompAccountAC");

                entity.HasIndex(e => e.NewCurrId, "NewCurrID");

                entity.HasIndex(e => e.NewKursCc, "NewKursCC");

                entity.HasIndex(e => e.NewKursMc, "NewKursMC");

                entity.HasIndex(e => e.NewSumAc, "NewSumAC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NewAccountAC");

                entity.Property(e => e.NewCompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NewCompAccountAC");

                entity.Property(e => e.NewCurrId).HasColumnName("NewCurrID");

                entity.Property(e => e.NewKursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursCC");

                entity.Property(e => e.NewKursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursMC");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CCompExp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_CompExp")
                    .IsClustered(false);

                entity.ToTable("c_CompExp", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CCompIn>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_CompIn")
                    .IsClustered(false);

                entity.ToTable("c_CompIn", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CCompRec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_CompRec")
                    .IsClustered(false);

                entity.ToTable("c_CompRec", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CEmpCor>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_EmpCor")
                    .IsClustered(false);

                entity.ToTable("c_EmpCor", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CEmpCurr>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_EmpCurr")
                    .IsClustered(false);

                entity.ToTable("c_EmpCurr", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.NewAccountAc, "NewAccountAC");

                entity.HasIndex(e => e.NewCurrId, "NewCurrID");

                entity.HasIndex(e => e.NewKursCc, "NewKursCC");

                entity.HasIndex(e => e.NewKursMc, "NewKursMC");

                entity.HasIndex(e => e.NewSumAc, "NewSumAC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NewAccountAC");

                entity.Property(e => e.NewCurrId).HasColumnName("NewCurrID");

                entity.Property(e => e.NewKursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursCC");

                entity.Property(e => e.NewKursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursMC");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CEmpExc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_EmpExc")
                    .IsClustered(false);

                entity.ToTable("c_EmpExc", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.NewEmpId, "NewEmpID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewEmpId).HasColumnName("NewEmpID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CEmpExp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_EmpExp")
                    .IsClustered(false);

                entity.ToTable("c_EmpExp", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CEmpIn>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_EmpIn")
                    .IsClustered(false);

                entity.ToTable("c_EmpIn", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CEmpRec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_EmpRec")
                    .IsClustered(false);

                entity.ToTable("c_EmpRec", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CEmpRep>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_EmpRep")
                    .IsClustered(false);

                entity.ToTable("c_EmpRep", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<COurCor>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_OurCor")
                    .IsClustered(false);

                entity.ToTable("c_OurCor", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<COurIn>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_OurIn")
                    .IsClustered(false);

                entity.ToTable("c_OurIn", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CPlanExp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_PlanExp")
                    .IsClustered(false);

                entity.ToTable("c_PlanExp", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CPlanRec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_c_PlanRec")
                    .IsClustered(false);

                entity.ToTable("c_PlanRec", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<CSal>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_c_Sal")
                    .IsClustered(false);

                entity.ToTable("c_Sal", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.CashSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CashSumAC");

                entity.Property(e => e.CashVenAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CashVenAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChargeRate1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChargeRate2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChargeRate3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OutAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OutAC");

                entity.Property(e => e.PlanSumCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PlanSumCC1");

                entity.Property(e => e.PlanSumCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PlanSumCC2");

                entity.Property(e => e.PlanSumCc3)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PlanSumCC3");

                entity.Property(e => e.ShortageCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ShortageCC");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.VenBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("VenBDate");

                entity.Property(e => e.VenEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("VenEDate");
            });

            modelBuilder.Entity<CSal1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("c_Sals", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<CSalD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.EmpId, e.PostId })
                    .HasName("pk_c_SalD")
                    .IsClustered(false);

                entity.ToTable("c_SalD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.MchargeCc, "MChargeCC");

                entity.HasIndex(e => e.MchargeCc1, "MChargeCC1");

                entity.HasIndex(e => e.MchargeCc2, "MChargeCC2");

                entity.HasIndex(e => e.MoreCc, "MoreCC");

                entity.HasIndex(e => e.MoreCc1, "MoreCC1");

                entity.HasIndex(e => e.MoreCc2, "MoreCC2");

                entity.HasIndex(e => e.PostId, "PostID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.AdvanceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AdvanceAC");

                entity.Property(e => e.AllFactTime)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AssShortSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AssShortSumCC");

                entity.Property(e => e.CreditIn).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CreditOut).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.ExcFactTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.FactTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.HolidayAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("HolidayAC");

                entity.Property(e => e.IncomeTaxSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IncomeTaxSumCC");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LeavRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LwsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LWSumCC");

                entity.Property(e => e.MchargeCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MChargeCC");

                entity.Property(e => e.MchargeCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MChargeCC1");

                entity.Property(e => e.MchargeCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MChargeCC2");

                entity.Property(e => e.MilitarySumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MilitarySumCC");

                entity.Property(e => e.MobileSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MobileSumCC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.MoreCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC1");

                entity.Property(e => e.MoreCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC2");

                entity.Property(e => e.NormHour).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OutAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OutAC");

                entity.Property(e => e.PrizeForTheLoss).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShFactTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShortageCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ShortageCC");

                entity.Property(e => e.SickAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SickAC");

                entity.Property(e => e.SickRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SurChargeAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SurChargeAC");

                entity.Property(e => e.UniSocSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocSumCC");
            });

            modelBuilder.Entity<CashOperationForAnalyticsByMonth>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.StartDate, e.FinishDate });

                entity.ToTable("CashOperationForAnalytics_ByMonth", "report");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinishDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BetweenVenDateCrretSumInBonuses)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BetweenVenDate_CRRetSum_In_Bonuses");

                entity.Property(e => e.BetweenVenDateCrretSumInCashAndCard)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BetweenVenDate_CRRetSum_In_CashAndCard");

                entity.Property(e => e.BetweenVenDateSaleSumInBonuses)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BetweenVenDate_SaleSum_In_Bonuses");

                entity.Property(e => e.BetweenVenDateSaleSumInCashAndCard)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BetweenVenDate_SaleSum_In_CashAndCard");

                entity.Property(e => e.CrretSumInBonuses)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CRRetSum_In_Bonuses");

                entity.Property(e => e.CrretSumInCashAndCard)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CRRetSum_In_CashAndCard");

                entity.Property(e => e.PeriodBetweenVenDateFinishDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PeriodBetweenVenDate_FinishDate");

                entity.Property(e => e.PeriodBetweenVenDateStartDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("PeriodBetweenVenDate_StartDate");

                entity.Property(e => e.SaleDayCount).HasColumnType("numeric(4, 2)");

                entity.Property(e => e.SaleSumInBonuses)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSum_In_Bonuses");

                entity.Property(e => e.SaleSumInCashAndCard)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSum_In_CashAndCard");

                entity.Property(e => e.UpdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Update_Time");
            });

            modelBuilder.Entity<ChRangeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ChRangeValue", "dbo");

                entity.Property(e => e.Conclus)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Dbname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DBName");

                entity.Property(e => e.Stockid).HasColumnName("stockid");
            });

            modelBuilder.Entity<CkzMonitoringDatum>(entity =>
            {
                entity.ToTable("ckz_MonitoringData", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommandLog>(entity =>
            {
                entity.ToTable("CommandLog", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Command).IsRequired();

                entity.Property(e => e.CommandType)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.DatabaseName).HasMaxLength(128);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ExtendedInfo).HasColumnType("xml");

                entity.Property(e => e.IndexName).HasMaxLength(128);

                entity.Property(e => e.ObjectName).HasMaxLength(128);

                entity.Property(e => e.ObjectType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SchemaName).HasMaxLength(128);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StatisticsName).HasMaxLength(128);
            });

            modelBuilder.Entity<CountProd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("count_prod", "dbo");

                entity.Property(e => e.Prodid).HasColumnName("prodid");

                entity.Property(e => e.Summ)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<DelPinp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("del_pinp", "dbo");

                entity.Property(e => e.Newppid).HasColumnName("newppid");

                entity.Property(e => e.Prodid).HasColumnName("prodid");
            });

            modelBuilder.Entity<ExecutionPlanDateHistory>(entity =>
            {
                entity.HasKey(e => e.Dates)
                    .HasName("PK__Executio__BFFD859286F63F4B");

                entity.ToTable("ExecutionPlanDate_History", "dbo");

                entity.Property(e => e.Dates).HasColumnType("smalldatetime");

                entity.Property(e => e.ChainFactDay).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChainFactToDate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChainPlanDay).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChainPlanToDate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExecutionPlanDayPercent).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExecutionPlanDayUah)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExecutionPlanDayUAH");

                entity.Property(e => e.ExecutionPlanToDatePercent).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExecutionPlanToDateUah)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExecutionPlanToDateUAH");
            });

            modelBuilder.Entity<HpFilter>(entity =>
            {
                entity.ToTable("hp_Filters", "dbo");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.FilterName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HpGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hp_Groups", "dbo");

                entity.Property(e => e.GrId).HasColumnName("GrID");

                entity.Property(e => e.GrName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RepId).HasColumnName("RepID");
            });

            modelBuilder.Entity<HpImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hp_Imports", "dbo");

                entity.Property(e => e.ImpName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HpReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hp_Reports", "dbo");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.RepName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HpReportsF>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hp_ReportsF", "dbo");

                entity.Property(e => e.FilterId).HasColumnName("FilterID");

                entity.Property(e => e.RepId).HasColumnName("RepID");
            });

            modelBuilder.Entity<HpUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hp_Users", "dbo");

                entity.Property(e => e.GrId).HasColumnName("GrID");

                entity.Property(e => e.UsName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IImpTempl>(entity =>
            {
                entity.HasKey(e => e.TemplId)
                    .HasName("pk_i_ImpTempls")
                    .IsClustered(false);

                entity.ToTable("i_ImpTempls", "dbo");

                entity.HasIndex(e => e.TmpTableName, "Ix_TmpTableName")
                    .IsUnique();

                entity.HasIndex(e => e.TemplName, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.TemplId)
                    .ValueGeneratedNever()
                    .HasColumnName("TemplID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Spname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SPName");

                entity.Property(e => e.TemplName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TmpTableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IImpTemplA>(entity =>
            {
                entity.HasKey(e => new { e.TableId, e.TemplId })
                    .HasName("pk_i_ImpTemplA")
                    .IsClustered(false);

                entity.ToTable("i_ImpTemplA", "dbo");

                entity.HasIndex(e => new { e.TableOrderId, e.TemplId }, "TableOrderID_TemplID");

                entity.Property(e => e.TableId).HasColumnName("TableID");

                entity.Property(e => e.TemplId).HasColumnName("TemplID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableOrderId).HasColumnName("TableOrderID");
            });

            modelBuilder.Entity<IImpTemplD>(entity =>
            {
                entity.HasKey(e => new { e.TemplId, e.TableId, e.FieldName })
                    .HasName("pk_i_ImpTemplD")
                    .IsClustered(false);

                entity.ToTable("i_ImpTemplD", "dbo");

                entity.Property(e => e.TemplId).HasColumnName("TemplID");

                entity.Property(e => e.TableId).HasColumnName("TableID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SrcColName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SrcRowId).HasColumnName("SrcRowID");
            });

            modelBuilder.Entity<IcSalRate>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.Varname })
                    .HasName("pk_ic_SalRate")
                    .IsClustered(false);

                entity.ToTable("ic_SalRate", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Varname)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Vardesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("vardesc");

                entity.Property(e => e.Varvalue)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("varvalue");
            });

            modelBuilder.Entity<IlchenkoExcTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ilchenko_Exc_Temp", "dbo");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CorrectionQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSecId).HasColumnName("NewSecID");

                entity.Property(e => e.PcatKmid).HasColumnName("PCatKMID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ReasonMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Sscccode)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("SSCCCode");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ImDefectQa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("im_DefectQA", "dbo");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FileValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<ImDefectoverageQa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("im_DefectoverageQA", "dbo");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FileValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<ImDeficitQa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("im_DeficitQA", "dbo");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FileValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<ImOverageQa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("im_OverageQA", "dbo");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FileValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<ImRegisterQa>(entity =>
            {
                entity.ToTable("im_RegisterQA", "dbo");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.FileValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ImportDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvoiceId).HasColumnName("invoiceId");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<IrAm>(entity =>
            {
                entity.HasKey(e => e.Amid)
                    .HasName("pk_ir_AM")
                    .IsClustered(false);

                entity.ToTable("ir_AM", "dbo");

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => e.Amname, "UniqueIndex1")
                    .IsUnique();

                entity.Property(e => e.Amid)
                    .ValueGeneratedNever()
                    .HasColumnName("AMID");

                entity.Property(e => e.Amdesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AMDesc");

                entity.Property(e => e.Amname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AMName");

                entity.Property(e => e.ChId).HasColumnName("ChID");
            });

            modelBuilder.Entity<IrAmd>(entity =>
            {
                entity.HasKey(e => new { e.Amid, e.ProdId })
                    .HasName("pk_ir_AMD")
                    .IsClustered(false);

                entity.ToTable("ir_AMD", "dbo");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.DelGid).HasColumnName("DelGID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.MinRem).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RnTo).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IrBrend>(entity =>
            {
                entity.HasKey(e => e.BrendId)
                    .HasName("pk_ir_Brends");

                entity.ToTable("ir_Brends", "dbo");

                entity.HasIndex(e => e.BrendName, "BrendID")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.BrendId)
                    .ValueGeneratedNever()
                    .HasColumnName("BrendID");

                entity.Property(e => e.BrendName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");
            });

            modelBuilder.Entity<IrCentralWarehouse>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_ir_CentralWarehouse")
                    .IsClustered(false);

                entity.ToTable("ir_CentralWarehouse", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CellDimensions)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CellNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.RowNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Row_number");

                entity.Property(e => e.SelectionLevel)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SpanNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TraversalOrder)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ZoneNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrChildStock>(entity =>
            {
                entity.HasKey(e => new { e.ChildStockId, e.StockId })
                    .HasName("pk_ir_ChildStocks")
                    .IsClustered(false);

                entity.ToTable("ir_ChildStocks", "dbo");

                entity.HasIndex(e => e.ChildStockId, "ChildStockID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.ChildStockId).HasColumnName("ChildStockID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<IrCity>(entity =>
            {
                entity.HasKey(e => e.CityId)
                    .HasName("pk_ir_Citys")
                    .IsClustered(false);

                entity.ToTable("ir_Citys", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.City, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.CityId)
                    .ValueGeneratedNever()
                    .HasColumnName("CityID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrCollectionDay>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK_ir_CollectionDays_ChID");

                entity.ToTable("ir_CollectionDays", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Fri).HasColumnName("FRI");

                entity.Property(e => e.Mon).HasColumnName("MON");

                entity.Property(e => e.Sat).HasColumnName("SAT");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Sun).HasColumnName("SUN");

                entity.Property(e => e.Thu).HasColumnName("THU");

                entity.Property(e => e.Tue).HasColumnName("TUE");

                entity.Property(e => e.Wed).HasColumnName("WED");
            });

            modelBuilder.Entity<IrCommunicationChannel>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_ir_CommunicationChannels")
                    .IsClustered(false);

                entity.ToTable("ir_CommunicationChannels", "dbo");

                entity.HasIndex(e => e.ChannelName, "ChannelName")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ChannelId, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.ChannelId).HasColumnName("ChannelID");

                entity.Property(e => e.ChannelName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrCompsChild>(entity =>
            {
                entity.HasKey(e => new { e.CompId, e.ChildCompId })
                    .HasName("pk_ir_CompsChild")
                    .IsClustered(false);

                entity.ToTable("ir_CompsChild", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ChildCompId).HasColumnName("ChildCompID");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildCompName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CompAccountCc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountCC");

                entity.Property(e => e.Phone)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrCrexciseGr>(entity =>
            {
                entity.HasKey(e => new { e.ExciseGrId, e.Crid })
                    .HasName("pk_ir_CRExciseGrs")
                    .IsClustered(false);

                entity.ToTable("ir_CRExciseGrs", "dbo");

                entity.Property(e => e.ExciseGrId).HasColumnName("ExciseGrID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.ChId).HasColumnName("ChID");
            });

            modelBuilder.Entity<IrCrsetting>(entity =>
            {
                entity.HasKey(e => e.CrId)
                    .HasName("pk_ir_CRSettings")
                    .IsClustered(false);

                entity.ToTable("ir_CRSettings", "dbo");

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(100);

                entity.Property(e => e.CrId)
                    .ValueGeneratedNever()
                    .HasColumnName("CrID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<IrCstCode>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_ir_CstCodes")
                    .IsClustered(false);

                entity.ToTable("ir_CstCodes", "dbo");

                entity.HasIndex(e => new { e.CstProdCode, e.CstTypeId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => e.CstProdNameDesc, "UniqueIndex1")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CstFullProdName)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CstProdName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CstProdNameDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CstTypeId).HasColumnName("CstTypeID");
            });

            modelBuilder.Entity<IrDeliveryGroup>(entity =>
            {
                entity.HasKey(e => e.DelGid)
                    .HasName("pk_ir_DeliveryGroup")
                    .IsClustered(false);

                entity.ToTable("ir_DeliveryGroup", "dbo");

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => e.DelGname, "UniqueIndex1")
                    .IsUnique();

                entity.Property(e => e.DelGid)
                    .ValueGeneratedNever()
                    .HasColumnName("DelGID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DelGdesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DelGDesc");

                entity.Property(e => e.DelGname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DelGName");

                entity.Property(e => e.DelTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Fri).HasColumnName("FRI");

                entity.Property(e => e.Krate)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KRate");

                entity.Property(e => e.Mon).HasColumnName("MON");

                entity.Property(e => e.Pan)
                    .HasColumnName("PAn")
                    .HasDefaultValueSql("(14)");

                entity.Property(e => e.SafTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Sat).HasColumnName("SAT");

                entity.Property(e => e.Sun).HasColumnName("SUN");

                entity.Property(e => e.Thu).HasColumnName("THU");

                entity.Property(e => e.Tue).HasColumnName("TUE");

                entity.Property(e => e.Wed).HasColumnName("WED");
            });

            modelBuilder.Entity<IrDiscountsForEntitiesPerson>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_ir_discountsForEntitiesPersons");

                entity.ToTable("ir_discountsForEntitiesPersons", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.BdateDiscount)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDateDiscount");

                entity.Property(e => e.DiscountPercentage).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EdateDiscount)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDateDiscount");

                entity.Property(e => e.PlId).HasColumnName("PlID");
            });

            modelBuilder.Entity<IrFop>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_ir_Fops");

                entity.ToTable("ir_Fops", "dbo");

                entity.HasIndex(e => e.FinId, "FinID")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.FinId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FinID");

                entity.Property(e => e.FopFio)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FopFIO");

                entity.Property(e => e.FopTaxCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RroInstalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RroUninstalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<IrGoodsSpecification>(entity =>
            {
                entity.HasKey(e => e.ProdId)
                    .HasName("pk_ir_GoodsSpecification");

                entity.ToTable("ir_GoodsSpecification", "dbo");

                entity.Property(e => e.ProdId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProdID");

                entity.Property(e => e.BarCode)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BoxHeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BoxLayerLength).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BoxLayerWidth).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BoxLength).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BoxQtyOnPallet).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BoxQtyOnRow).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BoxRowsOnpallet)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BoxRowsONPallet");

                entity.Property(e => e.BoxWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BoxWidth).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Layerweight)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("layerweight");

                entity.Property(e => e.PalletAllQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PalletGrossWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PalletHeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PalletNetWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Palletlength).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Palletwidth)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("palletwidth");

                entity.Property(e => e.SubBoxHeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubBoxLength).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubBoxWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubBoxWidth).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubboxQtyInBox).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnitGrossWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnitHeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnitLength).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnitNetWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnitQtyInbox)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnitQtyINBox");

                entity.Property(e => e.UnitQtyInsubBox)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnitQtyINSubBox");

                entity.Property(e => e.UnitWidth).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IrItemGr>(entity =>
            {
                entity.HasKey(e => e.ItemGrId)
                    .HasName("pk_ir_ItemGrs")
                    .IsClustered(false);

                entity.ToTable("ir_ItemGrs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ItemGrName, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ItemGrId)
                    .ValueGeneratedNever()
                    .HasColumnName("ItemGrID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ItemGrName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<IrItemGrCodes1>(entity =>
            {
                entity.HasKey(e => e.CodeId1)
                    .HasName("pk_ir_ItemGrCodes1")
                    .IsClustered(false);

                entity.ToTable("ir_ItemGrCodes1", "dbo");

                entity.Property(e => e.CodeId1)
                    .ValueGeneratedNever()
                    .HasColumnName("CodeID1");

                entity.Property(e => e.ItemGrId).HasColumnName("ItemGrID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<IrMerchGroup>(entity =>
            {
                entity.HasKey(e => e.MerchGrId)
                    .HasName("pk_ir_MerchGroup")
                    .IsClustered(false);

                entity.ToTable("ir_MerchGroup", "dbo");

                entity.HasIndex(e => e.MerchGrName, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.MerchGrId)
                    .ValueGeneratedNever()
                    .HasColumnName("MerchGrID");

                entity.Property(e => e.MerchGrName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrMerchGroupD>(entity =>
            {
                entity.HasKey(e => new { e.MerchGrId, e.PgrId2 })
                    .HasName("pk_ir_MerchGroupD");

                entity.ToTable("ir_MerchGroupD", "dbo");

                entity.Property(e => e.MerchGrId).HasColumnName("MerchGrID");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");
            });

            modelBuilder.Entity<IrPcatReview>(entity =>
            {
                entity.HasKey(e => e.ReviewId)
                    .HasName("pk_ir_PCatReview");

                entity.ToTable("ir_PCatReview", "dbo");

                entity.HasIndex(e => e.ReviewName, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ReviewId)
                    .ValueGeneratedNever()
                    .HasColumnName("ReviewID");

                entity.Property(e => e.ReviewName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrPcatReviewD>(entity =>
            {
                entity.HasKey(e => new { e.ReviewId, e.PgrId2 })
                    .HasName("pk_ir_PCatReviewD");

                entity.ToTable("ir_PCatReviewD", "dbo");

                entity.Property(e => e.ReviewId).HasColumnName("ReviewID");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");
            });

            modelBuilder.Entity<IrPersonEmp>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.ChId })
                    .HasName("pk_ir_PersonEmp");

                entity.ToTable("ir_PersonEmp", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PersonId, "PersonID")
                    .HasFillFactor(100);

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DeinstallationDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Deinstallation_Date");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.InstallationDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Installation_Date");
            });

            modelBuilder.Entity<IrProdEp>(entity =>
            {
                entity.HasKey(e => e.EpId)
                    .HasName("pk_ir_ProdEP")
                    .IsClustered(false);

                entity.ToTable("ir_ProdEp", "dbo");

                entity.Property(e => e.EpId)
                    .ValueGeneratedNever()
                    .HasColumnName("EpID");

                entity.Property(e => e.EpName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrProdEpd>(entity =>
            {
                entity.HasKey(e => new { e.EpId, e.ProdId })
                    .HasName("pk_ir_ProdEPd")
                    .IsClustered(false);

                entity.ToTable("ir_ProdEpd", "dbo");

                entity.Property(e => e.EpId).HasColumnName("EpID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<IrProdG6>(entity =>
            {
                entity.HasKey(e => e.Pgrid6)
                    .HasName("pk_ir_ProdG6");

                entity.ToTable("ir_ProdG6", "dbo");

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => e.Pgrname6, "UniqueIndex1")
                    .IsUnique();

                entity.Property(e => e.Pgrid6)
                    .ValueGeneratedNever()
                    .HasColumnName("pgrid6");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Pgrname6)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("pgrname6");
            });

            modelBuilder.Entity<IrProdGh>(entity =>
            {
                entity.HasKey(e => new { e.DocDate, e.PgrId })
                    .HasName("pk_ir_ProdGH")
                    .IsClustered(false);

                entity.ToTable("ir_ProdGH", "dbo");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");
            });

            modelBuilder.Entity<IrProdKm>(entity =>
            {
                entity.HasKey(e => e.PcatKmid)
                    .HasName("pk_ir_ProdKM")
                    .IsClustered(false);

                entity.ToTable("ir_ProdKM", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PcatKmname, "PCatKMName")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.PcatKmid)
                    .ValueGeneratedNever()
                    .HasColumnName("PcatKMID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PcatKmname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PCatKMName");
            });

            modelBuilder.Entity<IrProdSubgroupPrint>(entity =>
            {
                entity.HasKey(e => e.PcatSubgroupid)
                    .HasName("pk_ir_ProdSubgroupPrint")
                    .IsClustered(false);

                entity.ToTable("ir_ProdSubgroupPrint", "dbo");

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Pcatsubgroupname, "UniqueIndex1")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.PcatSubgroupid)
                    .ValueGeneratedNever()
                    .HasColumnName("PCatSubgroupid");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Pcatsubgroupname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PCatsubgroupname");
            });

            modelBuilder.Entity<IrProdSumHistory>(entity =>
            {
                entity.HasKey(e => new { e.Bdate, e.StockId, e.ProdId, e.CompId })
                    .HasName("pk_ir_ProdSumHistory")
                    .IsClustered(false);

                entity.ToTable("ir_ProdSumHistory", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");
            });

            modelBuilder.Entity<IrProdsCc>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("pk_ir_ProdsCC")
                    .IsClustered(false);

                entity.ToTable("ir_ProdsCC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Bdate1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate1");

                entity.Property(e => e.ChannelId).HasColumnName("ChannelID");

                entity.Property(e => e.ComBdate)
                    .HasColumnType("datetime")
                    .HasColumnName("ComBDate");

                entity.Property(e => e.ComEdate)
                    .HasColumnType("datetime")
                    .HasColumnName("ComEDate");

                entity.Property(e => e.ComName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ComPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CurrentPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DateOfEntry).HasColumnType("smalldatetime");

                entity.Property(e => e.Edate1)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate1");

                entity.Property(e => e.PlId0).HasColumnName("PlID0");

                entity.Property(e => e.PlId1).HasColumnName("PlID1");

                entity.Property(e => e.PlId2).HasColumnName("PlID2");

                entity.Property(e => e.PlId3).HasColumnName("PlID3");

                entity.Property(e => e.PlId4).HasColumnName("PlID4");

                entity.Property(e => e.PlId5).HasColumnName("PlID5");

                entity.Property(e => e.PlId6).HasColumnName("PlID6");

                entity.Property(e => e.PlId7).HasColumnName("PlID7");

                entity.Property(e => e.WempId).HasColumnName("WEmpID");
            });

            modelBuilder.Entity<IrRecCat>(entity =>
            {
                entity.HasKey(e => e.RecCatId)
                    .HasName("pk_ir_RecCats")
                    .IsClustered(false);

                entity.ToTable("ir_RecCats", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.RecCatName, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.RecCatId)
                    .ValueGeneratedNever()
                    .HasColumnName("RecCatID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ColCatCof).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CostOfArrival).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormPerHour).HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PtypeCodeId).HasColumnName("PTypeCodeID");

                entity.Property(e => e.RecCatName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowRatio).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IrRegion>(entity =>
            {
                entity.HasKey(e => e.RegionId)
                    .HasName("pk_ir_Regions")
                    .IsClustered(false);

                entity.ToTable("ir_Regions", "dbo");

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => e.Region, "UniqueIndex1")
                    .IsUnique();

                entity.Property(e => e.RegionId)
                    .ValueGeneratedNever()
                    .HasColumnName("RegionID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrSeason>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_ir_Seasons")
                    .IsClustered(false);

                entity.ToTable("ir_Seasons", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Arrdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("arrdate");

                entity.Property(e => e.ForderDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FOrderDate");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.Recarrdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("recarrdate");

                entity.Property(e => e.ShptDate).HasColumnType("smalldatetime");

                entity.Property(e => e.СonfirmDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<IrShedulesTt>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_ir_ShedulesTT")
                    .IsClustered(false);

                entity.ToTable("ir_ShedulesTT", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.Fri).HasColumnName("FRI");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.Sat).HasColumnName("SAT");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Sun).HasColumnName("SUN");

                entity.Property(e => e.Thu).HasColumnName("THU");

                entity.Property(e => e.Wed).HasColumnName("WED");
            });

            modelBuilder.Entity<IrShop>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_ir_Shops")
                    .IsClustered(false);

                entity.ToTable("ir_Shops", "dbo");

                entity.HasIndex(e => new { e.DbiId, e.Pccode, e.StockId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => e.StockId, "UniqueIndex1")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.BarcodeExp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BarcodeRec)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DbVersion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DB_Version")
                    .HasDefaultValueSql("('3.8.0.311_b')");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.GeoDistance).HasColumnName("geo_distance");

                entity.Property(e => e.GeoDistanceMsg)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("geo_distance_msg");

                entity.Property(e => e.GeoX)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("geo_x");

                entity.Property(e => e.GeoY)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("geo_y");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IsWork).HasDefaultValueSql("((0))");

                entity.Property(e => e.LinkedUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("linked_updated");

                entity.Property(e => e.LinkedVersion).HasColumnName("linked_version");

                entity.Property(e => e.NearbyStocks)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pccode).HasColumnName("PCCode");

                entity.Property(e => e.ServerName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TeamViewer1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TeamViewer2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TeamViewer3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TimeEnd)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStart)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrShopsBeforeJob>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ir_Shops_before_job", "dbo");

                entity.Property(e => e.BarcodeExp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BarcodeRec)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbVersion)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DB_Version");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.GeoDistance).HasColumnName("geo_distance");

                entity.Property(e => e.GeoDistanceMsg)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("geo_distance_msg");

                entity.Property(e => e.GeoX)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("geo_x");

                entity.Property(e => e.GeoY)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("geo_y");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkedUpdated)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("linked_updated");

                entity.Property(e => e.LinkedVersion).HasColumnName("linked_version");

                entity.Property(e => e.NearbyStocks)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pccode).HasColumnName("PCCode");

                entity.Property(e => e.ServerName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TeamViewer1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TeamViewer2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TeamViewer3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TimeEnd)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TimeStart)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrStatisticsAzTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ir_Statistics_AzTmp", "dbo");

                entity.Property(e => e.BaseFreeMb)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BaseFreeMB");

                entity.Property(e => e.BaseSizeMb)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BaseSizeMB");

                entity.Property(e => e.DataFreeMd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DataFreeMD");

                entity.Property(e => e.Datetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("datetime");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DBName");

                entity.Property(e => e.Logid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("logid");
            });

            modelBuilder.Entity<IrStockArendum>(entity =>
            {
                entity.HasKey(e => e.StockId)
                    .HasName("pk_ir_StockArenda")
                    .IsClustered(false);

                entity.ToTable("ir_StockArenda", "dbo");

                entity.Property(e => e.StockId)
                    .ValueGeneratedNever()
                    .HasColumnName("StockID");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.PriceArend).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyArendArea).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyRack).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtySaleArea).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyStockArea).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumArend).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IrStockBrend>(entity =>
            {
                entity.HasKey(e => new { e.PgrId1, e.StockId })
                    .HasName("pk_ir_StockBrends")
                    .IsClustered(false);

                entity.ToTable("ir_StockBrends", "dbo");

                entity.HasIndex(e => e.PgrId1, "PGrID1");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.QtyPogMeters).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IrStockCodeId5>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.CodeId5, e.Crid })
                    .HasName("pk_ir_StockCodeID5")
                    .IsClustered(false);

                entity.ToTable("ir_StockCodeID5", "dbo");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Crid).HasColumnName("CRID");
            });

            modelBuilder.Entity<IrStockDate>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.SrcPosId })
                    .HasName("pk_ir_StockDates");

                entity.ToTable("ir_StockDates", "dbo");

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(100);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OpenDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ReasonOfMovingId).HasColumnName("ReasonOfMovingID");
            });

            modelBuilder.Entity<IrStockStaff>(entity =>
            {
                entity.HasKey(e => new { e.PostId, e.StockId })
                    .HasName("pk_ir_StockStaff")
                    .IsClustered(false);

                entity.ToTable("ir_StockStaff", "dbo");

                entity.HasIndex(e => e.PostId, "PostID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ExtraWrate)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraWRate");

                entity.Property(e => e.NormTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Wrate)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WRate");
            });

            modelBuilder.Entity<IrSubStock>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.PcatId })
                    .HasName("pk_ir_SubStocks")
                    .IsClustered(false);

                entity.ToTable("ir_SubStocks", "dbo");

                entity.HasIndex(e => e.PcatId, "PCatID");

                entity.HasIndex(e => e.SubStockId, "SubStockID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");
            });

            modelBuilder.Entity<IrUnPrPg1>(entity =>
            {
                entity.HasKey(e => new { e.PgrId1, e.ChId })
                    .HasName("pk_ir_UnPrPG1")
                    .IsClustered(false);

                entity.ToTable("ir_UnPrPG1", "dbo");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrUnPrPg1d>(entity =>
            {
                entity.HasKey(e => new { e.PgrId1, e.Pricemc })
                    .HasName("pk_ir_UnPrPG1D")
                    .IsClustered(false);

                entity.ToTable("ir_UnPrPG1D", "dbo");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.Pricemc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("pricemc");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IrWteam>(entity =>
            {
                entity.HasKey(e => e.WteamId)
                    .HasName("pk_ir_WTeams")
                    .IsClustered(false);

                entity.ToTable("ir_WTeams", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.WteamName, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.WteamId)
                    .ValueGeneratedNever()
                    .HasColumnName("WTeamID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WteamName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("WTeamName");
            });

            modelBuilder.Entity<ItAktPlan>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_AktPlan")
                    .IsClustered(false);

                entity.ToTable("it_AktPlan", "dbo");

                entity.HasIndex(e => new { e.DocId, e.OurId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");
            });

            modelBuilder.Entity<ItAktPlanD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_AktPlanD")
                    .IsClustered(false);

                entity.ToTable("it_AktPlanD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MinQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItAktPlanPcat>(entity =>
            {
                entity.HasKey(e => new { e.PcatId, e.ChId })
                    .HasName("pk_it_AktPlanPCat")
                    .IsClustered(false);

                entity.ToTable("it_AktPlanPCat", "dbo");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItAktPlanSpend>(entity =>
            {
                entity.HasKey(e => new { e.SpendCode, e.ChId })
                    .HasName("pk_it_AktPlanSpends")
                    .IsClustered(false);

                entity.ToTable("it_AktPlanSpends", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.ItAktPlanSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_it_AktPlanSpends_it_AktPlan");
            });

            modelBuilder.Entity<ItAktPlanStock>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("pk_it_AktPlanStocks")
                    .IsClustered(false);

                entity.ToTable("it_AktPlanStocks", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItAllrateBasePgrId>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_ALLRateBasePGrID")
                    .IsClustered(false);

                entity.ToTable("it_ALLRateBasePGrID", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<ItAllrateBasePgrIdd>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId, e.PgrId })
                    .HasName("pk_it_ALLRateBasePGrIDD");

                entity.ToTable("it_ALLRateBasePGrIDD", "dbo");

                entity.HasIndex(e => new { e.ChId, e.PgrId }, "IX_ChID_PGrID_Includes")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItAllrateBasesCat>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_ALLRateBasesGR")
                    .IsClustered(false);

                entity.ToTable("it_ALLRateBasesCat", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<ItAllrateBasesCatD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId, e.PcatId })
                    .HasName("pk_it_ALLRateBasesGrD")
                    .IsClustered(false);

                entity.ToTable("it_ALLRateBasesCatD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItAllrateBasesD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("pk_it_ALLRateBasesD")
                    .IsClustered(false);

                entity.ToTable("it_ALLRateBasesD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItAllrateBasis>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_ALLRateBases")
                    .IsClustered(false);

                entity.ToTable("it_ALLRateBases", "dbo");

                entity.HasIndex(e => e.DocDate, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<ItBonu>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_Bonuses")
                    .IsClustered(false);

                entity.ToTable("it_Bonus", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<ItBonusD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_BonusD")
                    .IsClustered(false);

                entity.ToTable("it_BonusD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.PcatId, "PCatID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PgrId, "PGrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PgrId1, "PGrID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PgrId2, "PGrID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PgrId3, "PGrID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SrcPosId, "SrcPosID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Brate)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRate");

                entity.Property(e => e.ChangeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatSubgroupid)
                    .HasColumnName("PCatSubgroupid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.ValidStocks)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItCalcRemsQty2Cache>(entity =>
            {
                entity.HasKey(e => new { e.DocDate, e.OurId, e.StockId, e.ProdId })
                    .HasName("pk_it_CalcRemsQtyCache");

                entity.ToTable("it_CalcRemsQty2Cache", "dbo");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItCancPrice>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_CancPrice")
                    .IsClustered(false);

                entity.ToTable("it_CancPrice", "dbo");

                entity.HasIndex(e => e.DocId, "DocDate_DocID_StockID_OurID");

                entity.HasIndex(e => new { e.DocDate, e.StockId, e.PriceType, e.OurId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItCancPriceCat>(entity =>
            {
                entity.HasKey(e => new { e.PcatId, e.ChId })
                    .HasName("pk_it_CancPriceCats")
                    .IsClustered(false);

                entity.ToTable("it_CancPriceCats", "dbo");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.ChId).HasColumnName("ChID");
            });

            modelBuilder.Entity<ItCancPriceD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("pk_it_CancPriceD")
                    .IsClustered(false);

                entity.ToTable("it_CancPriceD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItCashRegister>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_CashRegisters");

                entity.ToTable("it_CashRegisters", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AdminEmpId).HasColumnName("AdminEmpID");

                entity.Property(e => e.CountedEmpId).HasColumnName("CountedEmpID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TotalCash).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItCashRegistersD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_CashRegistersD");

                entity.ToTable("it_CashRegistersD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.NotesCodeId21850)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NotesCodeID2_1850");

                entity.Property(e => e.NotesCodeId21905)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NotesCodeID2_1905");

                entity.Property(e => e.NotesCodeId22031)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NotesCodeID2_2031");

                entity.Property(e => e.NotesCodeId22061)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NotesCodeID2_2061");

                entity.Property(e => e.NotesCodeId22069)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NotesCodeID2_2069");

                entity.Property(e => e.NotesCodeId22070)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NotesCodeID2_2070");

                entity.Property(e => e.QtyBill1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_1");

                entity.Property(e => e.QtyBill10)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_10");

                entity.Property(e => e.QtyBill100)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_100");

                entity.Property(e => e.QtyBill1000)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_1000");

                entity.Property(e => e.QtyBill2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_2");

                entity.Property(e => e.QtyBill20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_20");

                entity.Property(e => e.QtyBill200)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_200");

                entity.Property(e => e.QtyBill5)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_5");

                entity.Property(e => e.QtyBill50)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_50");

                entity.Property(e => e.QtyBill500)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyBill_500");

                entity.Property(e => e.SumBill1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_1");

                entity.Property(e => e.SumBill10)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_10");

                entity.Property(e => e.SumBill100)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_100");

                entity.Property(e => e.SumBill1000)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_1000");

                entity.Property(e => e.SumBill2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_2");

                entity.Property(e => e.SumBill20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_20");

                entity.Property(e => e.SumBill200)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_200");

                entity.Property(e => e.SumBill5)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_5");

                entity.Property(e => e.SumBill50)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_50");

                entity.Property(e => e.SumBill500)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumBill_500");
            });

            modelBuilder.Entity<ItCexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_CExp")
                    .IsClustered(false);

                entity.ToTable("it_CExp", "dbo");

                entity.HasIndex(e => e.BookkeeperEmpId, "BookkeeperEmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Crid, "CRID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CashEmpId, "CashEmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DocId, "DocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IntDocId, "IntDocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrincipalEmpId, "PrincipalEmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocId, e.OurId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Appx)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BookkeeperEmpId).HasColumnName("BookkeeperEmpID");

                entity.Property(e => e.ByDoc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CashEmpId).HasColumnName("CashEmpID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Note1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrincipalEmpId).HasColumnName("PrincipalEmpID");

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<ItCheckStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_CheckStocks", "dbo");

                entity.Property(e => e.CheckDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("checkDate");

                entity.Property(e => e.SumQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumQty");
            });

            modelBuilder.Entity<ItChildCompPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_ChildCompPays")
                    .IsClustered(false);

                entity.ToTable("it_ChildCompPays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.ChildCompId).HasColumnName("ChildCompID");

                entity.Property(e => e.ChildCompName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.WaybillDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("waybillDate");

                entity.Property(e => e.WaybillId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("waybillID");
            });

            modelBuilder.Entity<ItCprice>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_CPrices")
                    .IsClustered(false);

                entity.ToTable("it_CPrices", "dbo");

                entity.HasIndex(e => e.DocId, "UniqueIndex1")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItCpricesD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("pk_it_CPricesD")
                    .IsClustered(false);

                entity.ToTable("it_CPricesD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.CpriceType).HasColumnName("CPriceType");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceccWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Pricecc_wt");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<ItCrec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_CRec")
                    .IsClustered(false);

                entity.ToTable("it_CRec", "dbo");

                entity.HasIndex(e => e.BookkeeperEmpId, "BookkeeperEmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Crid, "CRID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CashEmpId, "CashEmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocId, "DocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IntDocId, "IntDocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PrincipalEmpId, "PrincipalEmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocId, e.OurId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Appx)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BookkeeperEmpId).HasColumnName("BookkeeperEmpID");

                entity.Property(e => e.ByDoc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CashEmpId).HasColumnName("CashEmpID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Note1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrincipalEmpId).HasColumnName("PrincipalEmpID");

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<ItCretChildCompPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.Srcposid })
                    .HasName("pk_it_CRetChildCompPays")
                    .IsClustered(false);

                entity.ToTable("it_CRetChildCompPays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Srcposid).HasColumnName("srcposid");

                entity.Property(e => e.ChildCompName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Childcompid).HasColumnName("childcompid");

                entity.Property(e => e.Compid).HasColumnName("compid");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.SumccWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc_wt");
            });

            modelBuilder.Entity<ItDashBoardRemOnDateInPriceCcIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_DashBoardRemOnDate_InPriceCC_In", "dbo");

                entity.Property(e => e.Date).HasColumnType("smalldatetime");

                entity.Property(e => e.RemSumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemSumCC_In");
            });

            modelBuilder.Entity<ItDayRem>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_DayRem")
                    .IsClustered(false);

                entity.ToTable("it_DayRem", "dbo");

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CalcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ItDayRemD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.OurId, e.StockId, e.SecId, e.ProdId, e.Ppid })
                    .HasName("pk_it_DayRemD")
                    .IsClustered(false);

                entity.ToTable("it_DayRemD", "dbo");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "ProdID_PPID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItDisEmp>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_DisEmpS")
                    .IsClustered(false);

                entity.ToTable("it_DisEmpS", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Btime).HasColumnType("datetime");

                entity.Property(e => e.EmpFillingId).HasColumnName("EmpFillingID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Etime).HasColumnType("datetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<ItDisRateBasesPcat>(entity =>
            {
                entity.HasKey(e => new { e.PcatId, e.ChId, e.StockId })
                    .HasName("pk_it_DisRateBasesPCat")
                    .IsClustered(false);

                entity.ToTable("it_DisRateBasesPCat", "dbo");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItDisRateBasesPgrId>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.Stockid, e.Pgrid })
                    .HasName("pk_it_DisRateBasesPGrID")
                    .IsClustered(false);

                entity.ToTable("it_DisRateBasesPGrID", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Stockid).HasColumnName("stockid");

                entity.Property(e => e.Pgrid).HasColumnName("pgrid");

                entity.Property(e => e.Baserate)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("baserate");

                entity.Property(e => e.Normremasumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("normremasumcc");

                entity.Property(e => e.Remasumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("remasumcc");

                entity.Property(e => e.Remrecsumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("remrecsumcc");

                entity.Property(e => e.Salesumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("salesumcc");
            });

            modelBuilder.Entity<ItDisRateBasis>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("pk_it_DisRateBases")
                    .IsClustered(false);

                entity.ToTable("it_DisRateBases", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItDisSale>(entity =>
            {
                entity.HasKey(e => e.Chid);

                entity.ToTable("it_disSale", "dbo");

                entity.HasIndex(e => e.Docdate, "docdate")
                    .HasFillFactor(80);

                entity.HasIndex(e => new { e.Stockid, e.Number }, "ix_it_disSale_stockid_number_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.Number, e.Stockid }, "number")
                    .HasFillFactor(100);

                entity.Property(e => e.Chid)
                    .ValueGeneratedNever()
                    .HasColumnName("chid");

                entity.Property(e => e.Docdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("docdate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockid).HasColumnName("stockid");
            });

            modelBuilder.Entity<ItEkvContract>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_EkvContract")
                    .IsClustered(false);

                entity.ToTable("it_EkvContract", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<ItEkvContractD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_EkvContractD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");
            });

            modelBuilder.Entity<ItEmpTax>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_EmpTax")
                    .IsClustered(false);

                entity.ToTable("it_EmpTax", "dbo");

                entity.HasIndex(e => e.StateCode, "StateCode");

                entity.HasIndex(e => new { e.DocId, e.OurId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<ItEmpTaxD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_EmpTaxD")
                    .IsClustered(false);

                entity.ToTable("it_EmpTaxD", "dbo");

                entity.HasIndex(e => new { e.ChId, e.EmpId }, "ChID_EmpID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IncomeTaxSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IncomeTaxSumCC");

                entity.Property(e => e.MilitarySumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MilitarySumCC");

                entity.Property(e => e.MoreCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UniSocSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocSumCC");
            });

            modelBuilder.Entity<ItEoeRateBasesPcat>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId, e.PcatId })
                    .HasName("pk_it_EoeRateBasesPCat")
                    .IsClustered(false);

                entity.ToTable("it_EoeRateBasesPCat", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItEoexpC>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.CurrId })
                    .HasName("pk_it_EOExpC");

                entity.ToTable("it_EOExpC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");
            });

            modelBuilder.Entity<ItEoexpDNewAchId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_EOExpD_NewAChID", "dbo");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<ItEoexpRateBasis>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("pk_it_EOExpRateBases");

                entity.ToTable("it_EOExpRateBases", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItEoexpValue>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.VarName })
                    .HasName("pk_it_EOExpValues");

                entity.ToTable("it_EOExpValues", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.VarName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarValue)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItEoprep>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_EOPrep");

                entity.ToTable("it_EOPrep", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompGrId2, "CompGrID2");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpSn).HasColumnName("ExpSN");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreAC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrdBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdBDate");

                entity.Property(e => e.OrdEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdEDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumAC");

                entity.Property(e => e.TranAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranAC");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");
            });

            modelBuilder.Entity<ItEoprepD>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_it_EOPrepD");

                entity.ToTable("it_EOPrepD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.NewQty, "NewQty");

                entity.HasIndex(e => e.NewSumAc, "NewSumAC");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Qty, "Qty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RemQty, "RemQty");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.Article1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.KursLast).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LastPriceInBaks).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notemenager)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.Otm).HasColumnName("OTM");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PersentMarriage)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Pgrid).HasColumnName("PGrid");

                entity.Property(e => e.PosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StatusMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit14).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit21).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit7).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitN).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItEoprepDReserve>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_it_EOPrepD_reserve");

                entity.ToTable("it_EOPrepD_reserve", "dbo");

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.Article1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.KursLast).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LastPriceInBaks).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notemenager)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.Otm).HasColumnName("OTM");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PersentMarriage)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Pgrid).HasColumnName("PGrid");

                entity.Property(e => e.PosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StatusMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit14).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit21).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit7).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitN).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItEoprepDd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DetSrcPosId })
                    .HasName("_pk_it_EOPrepDD");

                entity.ToTable("it_EOPrepDD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DetOurId, "DetOurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DetProdId, "DetProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DetSecId, "DetSecID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DetStockId, "DetStockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DetStockId, e.DetProdId }, "DetStockID_DetProdID")
                    .HasFillFactor(90);

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.DetExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetNewSumAC");

                entity.Property(e => e.DetNremDays).HasColumnName("DetNRemDays");

                entity.Property(e => e.DetOurId).HasColumnName("DetOurID");

                entity.Property(e => e.DetPosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DetPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetPriceAC");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.DetQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetRemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetSecId).HasColumnName("DetSecID");

                entity.Property(e => e.DetStockId).HasColumnName("DetStockID");

                entity.Property(e => e.DetSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumAC");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItEoprepDdReserve>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DetSrcPosId })
                    .HasName("_pk_it_EOPrepDD_reserve");

                entity.ToTable("it_EOPrepDD_reserve", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.DetExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetNewSumAC");

                entity.Property(e => e.DetNremDays).HasColumnName("DetNRemDays");

                entity.Property(e => e.DetOurId).HasColumnName("DetOurID");

                entity.Property(e => e.DetPosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DetPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetPriceAC");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.DetQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetRemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetSecId).HasColumnName("DetSecID");

                entity.Property(e => e.DetStockId).HasColumnName("DetStockID");

                entity.Property(e => e.DetSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumAC");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItEoprepReserve>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_EOPrep_reserve");

                entity.ToTable("it_EOPrep_reserve", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpSn).HasColumnName("ExpSN");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreAC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrdBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdBDate");

                entity.Property(e => e.OrdEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdEDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumAC");

                entity.Property(e => e.TranAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranAC");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");
            });

            modelBuilder.Entity<ItEoremD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_EORemD", "dbo");

                entity.HasIndex(e => new { e.StockId, e.ProdId }, "pk_RemD");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItEppChildCompPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.Srcposid })
                    .HasName("pk_it_EppChildCompPays")
                    .IsClustered(false);

                entity.ToTable("it_EppChildCompPays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Srcposid).HasColumnName("srcposid");

                entity.Property(e => e.Childcompid).HasColumnName("childcompid");

                entity.Property(e => e.Childcompname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("childcompname");

                entity.Property(e => e.Compid).HasColumnName("compid");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.SumccWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc_wt");
            });

            modelBuilder.Entity<ItExplan>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_Explan")
                    .IsClustered(false);

                entity.ToTable("it_Explan", "dbo");

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StateCode, "StateCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocId, e.OurId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CheckQa)
                    .HasColumnType("datetime")
                    .HasColumnName("CheckQA");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ReasonEmpId).HasColumnName("ReasonEmpID");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");

                entity.Property(e => e.SenderStockId).HasColumnName("SenderStockID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TransfertEmpId).HasColumnName("TransfertEmpID");
            });

            modelBuilder.Entity<ItExplanD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_ExplanD")
                    .IsClustered(false);

                entity.ToTable("it_ExplanD", "dbo");

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.DestStockId).HasColumnName("DestStockID");

                entity.Property(e => e.DiffQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurplusNotPay)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurplusPay)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SurplusRet)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Total)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ItFlowChart>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_FlowChart")
                    .IsClustered(false);

                entity.ToTable("it_FlowChart", "dbo");

                entity.HasIndex(e => new { e.DocId, e.ProdId, e.OurId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.BaseUm)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BaseUM");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OutQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OutUm)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("OutUM");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItFlowChartD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_FlowChartD")
                    .IsClustered(false);

                entity.ToTable("it_FlowChartD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GrossQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NetQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WastePrc).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItFlowChartMode>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_FlowChartMode")
                    .IsClustered(false);

                entity.ToTable("it_FlowChartMode", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.GoperName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("GOperName");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItFlowChartPriceParam>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_FlowChartPriceParams")
                    .IsClustered(false);

                entity.ToTable("it_FlowChartPriceParams", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItFlowChartStock>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("pk_it_FlowChartStocks")
                    .IsClustered(false);

                entity.ToTable("it_FlowChartStocks", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItFlowChartValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_FlowChartValues", "dbo");

                entity.HasIndex(e => e.VarValue, "VarValue_VarName")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.VarName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarValue)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItImpDcardId>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_it_ImpDcardID")
                    .IsClustered(false);

                entity.ToTable("it_ImpDcardID", "dbo");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.BirthDay).HasColumnType("smalldatetime");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DcardIdold)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DcardIDOld");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneMob)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.ItImpDcardIds)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_it_ImpDcardID_r_DCards");
            });

            modelBuilder.Entity<ItImpSale>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_imp_Sale");

                entity.ToTable("it_imp_Sale", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CashSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CashSumCC");

                entity.Property(e => e.ChangeSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChangeSumCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CreditID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocCreateTime).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TpurSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_nt");

                entity.Property(e => e.TpurSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_wt");

                entity.Property(e => e.TpurTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurTaxSum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Wpid).HasColumnName("WPID");
            });

            modelBuilder.Entity<ItImpSaleC>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_it_imp_SaleC");

                entity.ToTable("it_imp_SaleC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItImpSaleD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_it_imp_SaleD");

                entity.ToTable("it_imp_SaleD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_nt");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItImpSalePay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_imp_SalePays");

                entity.ToTable("it_imp_SalePays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<ItImportSale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_ImportSale", "dbo");

                entity.Property(e => e.St).HasColumnName("st");

                entity.Property(e => e.Stockid).HasColumnName("stockid");
            });

            modelBuilder.Entity<ItInvUnknBarCode>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_InvUnknBarCodes")
                    .IsClustered(false);

                entity.ToTable("it_InvUnknBarCodes", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItLogCalcCatEoexp>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_it_Log_CalcCatEOExp");

                entity.ToTable("it_Log_CalcCatEOExp", "dbo");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ExecStr).IsUnicode(false);

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ItLogChargeBonu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_LogChargeBonus", "dbo");

                entity.HasIndex(e => new { e.DocCode, e.ChId }, "DocCode_ChID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ItLogDiscRecExp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_logDiscRecExp")
                    .IsClustered(false);

                entity.ToTable("it_logDiscRecExp", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DcardChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.LogId).HasColumnName("LogID");
            });

            modelBuilder.Entity<ItLogEmpBarcode>(entity =>
            {
                entity.HasKey(e => e.Chid);

                entity.ToTable("it_log_Emp_Barcodes", "dbo");

                entity.Property(e => e.Chid).ValueGeneratedNever();

                entity.Property(e => e.DateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ItLogProdHigh>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.StockId })
                    .HasName("PK_LogProdHigh");

                entity.ToTable("it_LogProdHigh", "dbo");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.HighDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ItLogProdLow>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.StockId })
                    .HasName("PK_LogProdLow");

                entity.ToTable("it_LogProdLow", "dbo");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.LowDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ItLogimpSale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_logimpSale", "dbo");

                entity.Property(e => e.Msg)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("msg");
            });

            modelBuilder.Entity<ItLogisticsResultsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_LogisticsResultsHistory", "dbo");

                entity.Property(e => e.ColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItManTemplate>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_ManTemplate")
                    .IsClustered(false);

                entity.ToTable("it_ManTemplate", "dbo");

                entity.HasIndex(e => new { e.DocId, e.OurId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItManTemplateD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_ManTemplateD")
                    .IsClustered(false);

                entity.ToTable("it_ManTemplateD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItNegativeSale>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_NegativeSale")
                    .IsClustered(false);

                entity.ToTable("it_NegativeSale", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CrId).HasColumnName("CrID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.DocChId).HasColumnName("DocChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItOrdProdsRnd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_OrdProdsRnd", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Nperiod).HasColumnName("NPeriod");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItParishJournal>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_ParishJournal");

                entity.ToTable("it_ParishJournal", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AcceptedId).HasColumnName("AcceptedID");

                entity.Property(e => e.CarNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cell)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId3).HasColumnName("CompGrID3");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ContainerNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EndReception).HasColumnType("datetime");

                entity.Property(e => e.EndUnloading).HasColumnType("datetime");

                entity.Property(e => e.PassedName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QtyPositions).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Space1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcDocdate).HasColumnType("smalldatetime");

                entity.Property(e => e.StartReception).HasColumnType("datetime");

                entity.Property(e => e.StartUnloading).HasColumnType("datetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ViolId).HasColumnName("ViolID");

                entity.Property(e => e.Weight1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItParishJournalD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_ParishJournalD")
                    .IsClustered(false);

                entity.ToTable("it_ParishJournalD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Cell)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Space1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Weight1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItPercentDeliveryHistory>(entity =>
            {
                entity.HasKey(e => e.OnDate)
                    .HasName("PK_PercentDelivery_History");

                entity.ToTable("it_PercentDelivery_History", "dbo");

                entity.Property(e => e.OnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Delivery)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("% Delivery");

                entity.Property(e => e.ExcSpace).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExcWeight).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItPlanSaleStockOnDate>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK__it_PlanS__AF02F0B882429C72");

                entity.ToTable("it_PlanSaleStockOnDate", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ItPlanSaleStockOnDateD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("PK__it_PlanS__9DCACA26A40BD7BB");

                entity.ToTable("it_PlanSaleStockOnDateD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.PlanSum).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.ItPlanSaleStockOnDateDs)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK__it_PlanSaleStockOnDateD_Sta__ChID");
            });

            modelBuilder.Entity<ItPrintUserBarcode>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_it_PrintUserBarcodes")
                    .IsClustered(false);

                entity.ToTable("it_PrintUserBarcodes", "dbo");

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("UserID");

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItProce>(entity =>
            {
                entity.HasKey(e => new { e.ProgramName, e.Command, e.Date })
                    .HasName("PK_keyID");

                entity.ToTable("it_proces", "dbo");

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("programName");

                entity.Property(e => e.Command)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Count).HasColumnName("count");
            });

            modelBuilder.Entity<ItProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_process", "dbo");

                entity.Property(e => e.Bilkby)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("bilkby");

                entity.Property(e => e.Command)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cputime).HasColumnName("cputime");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("dbname");

                entity.Property(e => e.Doscio).HasColumnName("doscio");

                entity.Property(e => e.Hostname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("hostname");

                entity.Property(e => e.Lastbatch)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("lastbatch");

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("login");

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("programName");

                entity.Property(e => e.Requestid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("requestid");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.Spid1).HasColumnName("spid1");

                entity.Property(e => e.Status)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<ItProcessTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_process_temp", "dbo");

                entity.Property(e => e.Bilkby)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("bilkby");

                entity.Property(e => e.Command)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cputime).HasColumnName("cputime");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("dbname");

                entity.Property(e => e.Doscio).HasColumnName("doscio");

                entity.Property(e => e.Hostname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("hostname");

                entity.Property(e => e.Lastbatch)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("lastbatch");

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("login");

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("programName");

                entity.Property(e => e.Requestid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("requestid");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.Spid1).HasColumnName("spid1");

                entity.Property(e => e.Status)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<ItProdsInTransit>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_ProdsInTransit");

                entity.ToTable("it_ProdsInTransit", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.DocId, e.OurId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ContainerNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ShipDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");
            });

            modelBuilder.Entity<ItProdsInTransitD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_ProdsInTransitD")
                    .IsClustered(false);

                entity.ToTable("it_ProdsInTransitD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Article4)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<ItQualityProd>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_QualityProds");

                entity.ToTable("it_QualityProds", "dbo");

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CheckStatusId).HasColumnName("CheckStatusID");

                entity.Property(e => e.FempId).HasColumnName("FEmpID");

                entity.Property(e => e.FillingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MakeProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdExpQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QualityCheckId).HasColumnName("QualityCheckID");

                entity.Property(e => e.ResultCheck)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierLetter)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItRangeMatrix>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("pk_it_RangeMatrix");

                entity.ToTable("it_RangeMatrix", "dbo");

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ShopFid).HasColumnName("ShopFID");
            });

            modelBuilder.Entity<ItRangeMatrixD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_RangeMatrixD")
                    .IsClustered(false);

                entity.ToTable("it_RangeMatrixD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.IsRangeMin)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItReDisRemSaleByDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_ReDisRemSaleByDate", "dbo");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Rem).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Sale).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItRecRateBasesPcat>(entity =>
            {
                entity.HasKey(e => new { e.PcatId, e.ChId, e.StockId })
                    .HasName("pk_it_RecRateBasesPCat")
                    .IsClustered(false);

                entity.ToTable("it_RecRateBasesPCat", "dbo");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItRecRateBasesPgrId>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.Stockid, e.Pgrid })
                    .HasName("pk_it_RecRateBasesPGrID")
                    .IsClustered(false);

                entity.ToTable("it_RecRateBasesPGrID", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Stockid).HasColumnName("stockid");

                entity.Property(e => e.Pgrid).HasColumnName("PGrid");

                entity.Property(e => e.Baserate)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("baserate");

                entity.Property(e => e.NormRemAsumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumcc");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.Salesumcc).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItRecRateBasis>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("pk_it_RecRateBases");

                entity.ToTable("it_RecRateBases", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.BaseRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NormRemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NormRemASumCC");

                entity.Property(e => e.RemAsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemASumCC");

                entity.Property(e => e.RemRecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemRecSumCC");

                entity.Property(e => e.SaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SaleSumCC");
            });

            modelBuilder.Entity<ItRecRlog>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_RecRLog")
                    .IsClustered(false);

                entity.ToTable("it_RecRLog", "dbo");

                entity.HasIndex(e => e.ChildChId, "ChildChID");

                entity.HasIndex(e => e.IsCalc, "IsCalc");

                entity.HasIndex(e => e.DocId, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.ChildChId).HasColumnName("ChildChID");

                entity.Property(e => e.ChildDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ChildDocID");

                entity.Property(e => e.DocId).HasColumnName("DocID");
            });

            modelBuilder.Entity<ItRecUnknBarCode>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_RecUnknBarCodes")
                    .IsClustered(false);

                entity.ToTable("it_RecUnknBarCodes", "dbo");

                entity.HasIndex(e => new { e.ChId, e.BarCode }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItRedistribution>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_Redistribution", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DestStockId).HasColumnName("DestStockID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItRemDiff>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_remDiff", "dbo");

                entity.Property(e => e.Num)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("num");

                entity.Property(e => e.RemDo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("rem_do");

                entity.Property(e => e.RemPosle)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("rem_posle");

                entity.Property(e => e.Stockid).HasColumnName("stockid");
            });

            modelBuilder.Entity<ItRembydate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("it_rembydate", "dbo");

                entity.Property(e => e.BegDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Createdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Dbiid).HasColumnName("dbiid");

                entity.Property(e => e.EndDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Sum)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("SUM");
            });

            modelBuilder.Entity<ItRevaluationPlanning>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_RevaluationPlanning");

                entity.ToTable("it_RevaluationPlanning", "dbo");

                entity.HasIndex(e => e.Docid, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Docid).HasColumnName("docid");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RevaluationDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ItRevaluationPlanningD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_RevaluationPlanningD")
                    .IsClustered(false);

                entity.ToTable("it_RevaluationPlanningD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.ChannelKvi).HasColumnName("ChannelKVI");

                entity.Property(e => e.ExtraPl0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraPL0");

                entity.Property(e => e.ExtraPl1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraPL1");

                entity.Property(e => e.ExtraPl2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraPL2");

                entity.Property(e => e.ExtraPl3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExtraPl4)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraPL4");

                entity.Property(e => e.ExtraPl5)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraPL5");

                entity.Property(e => e.ExtraPl6)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraPL6");

                entity.Property(e => e.ExtraPl7)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraPL7");

                entity.Property(e => e.NewPricePl0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL0");

                entity.Property(e => e.NewPricePl1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL1");

                entity.Property(e => e.NewPricePl2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL2");

                entity.Property(e => e.NewPricePl3)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL3");

                entity.Property(e => e.NewPricePl4)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL4");

                entity.Property(e => e.NewPricePl5)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL5");

                entity.Property(e => e.NewPricePl6)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL6");

                entity.Property(e => e.NewPricePl7)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPricePL7");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PricePl0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL0");

                entity.Property(e => e.PricePl1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL1");

                entity.Property(e => e.PricePl2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL2");

                entity.Property(e => e.PricePl3)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL3");

                entity.Property(e => e.PricePl4)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL4");

                entity.Property(e => e.PricePl5)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL5");

                entity.Property(e => e.PricePl6)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL6");

                entity.Property(e => e.PricePl7)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PricePL7");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<ItRlog>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_RLog");

                entity.ToTable("it_RLog", "dbo");

                entity.HasIndex(e => new { e.RecDocId, e.DisDocId }, "RecDocID_DisDocID")
                    .IsUnique();

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DiffSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DisDocId).HasColumnName("DisDocID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FinishDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RecDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecDocId).HasColumnName("RecDocID");

                entity.Property(e => e.RecFactEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecFactEDate");

                entity.Property(e => e.RecPlanEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecPlanEDate");

                entity.Property(e => e.ShortSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ShortSumCC");

                entity.Property(e => e.WrongDelivQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WrongDelivSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WrongDelivSumCC");

                entity.Property(e => e.WrongDisSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WrongDisSumCC");

                entity.Property(e => e.WrongShopSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WrongShopSumCC");
            });

            modelBuilder.Entity<ItRlogD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_RLogD")
                    .IsClustered(false);

                entity.ToTable("it_RLogD", "dbo");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.ProdId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AcceptQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CeppQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CEppQty");

                entity.Property(e => e.CeppSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CEppSumCC");

                entity.Property(e => e.DeppQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DEppQty");

                entity.Property(e => e.DeppSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DEppSumCC");

                entity.Property(e => e.DiffQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DiffSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DisdQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DisdSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DisdSumCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PlpriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PLPriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SentQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SeppQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SEppQty");

                entity.Property(e => e.SeppSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SEppSumCC");

                entity.Property(e => e.ShortSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ShortSumCC");

                entity.Property(e => e.WrongDelivQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WrongDelivSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WrongDelivSumCC");

                entity.Property(e => e.WrongDisSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WrongDisSumCC");

                entity.Property(e => e.WrongShopSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WrongShopSumCC");
            });

            modelBuilder.Entity<ItRlogDd>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.DetSrcPosId })
                    .HasName("pk_it_RLogDD")
                    .IsClustered(false);

                entity.ToTable("it_RLogDD", "dbo");

                entity.HasIndex(e => new { e.ChId, e.SrcPosId, e.ProdId }, "ChID_SrcPosID_ProdID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.AcceptQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChildDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChildDocId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ChildDocID");

                entity.Property(e => e.DiffQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ParentDocId).HasColumnName("ParentDocID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SentQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItRouteSheet>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_RouteSheet")
                    .IsClustered(false);

                entity.ToTable("it_RouteSheet", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CarNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.DriverName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ForwarderName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId)
                    .HasColumnName("OurID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RouteSheetId).HasColumnName("RouteSheetID");

                entity.Property(e => e.RouteSheetName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TspaceM)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpace_m");
            });

            modelBuilder.Entity<ItRouteSheetD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_RouteSheetD")
                    .IsClustered(false);

                entity.ToTable("it_RouteSheetD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DocDateListExc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocDateListMs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DocDateListMS");

                entity.Property(e => e.Space).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItSendMessage>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_SendMessages")
                    .IsClustered(false);

                entity.ToTable("it_SendMessages", "dbo");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.MessCreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItStockMap>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_StockMap")
                    .IsClustered(false);

                entity.ToTable("it_StockMap", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.MapStockId1).HasColumnName("MapStockID_1");

                entity.Property(e => e.MapStockId2).HasColumnName("MapStockID_2");
            });

            modelBuilder.Entity<ItSupplyDashboard>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK__it_Suppl__AF02F0B8EE68AAC4");

                entity.ToTable("it_SupplyDashboard", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DisErrQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InCome).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProdExcQtyOnTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ProdExcQtyOnTT");

                entity.Property(e => e.ProdExcSpaceOnTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ProdExcSpaceOnTT");

                entity.Property(e => e.ProdSaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQtyOnDc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemQtyOnDC");

                entity.Property(e => e.RemQtyOnTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemQtyOnTT");

                entity.Property(e => e.UnitQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItTsdBarcode>(entity =>
            {
                entity.HasKey(e => e.Barcode)
                    .IsClustered(false);

                entity.ToTable("it_TSD_barcode", "dbo");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(100)
                    .HasColumnName("barcode");

                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.IdGood).HasColumnName("Id_good");

                entity.Property(e => e.Tsdsn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("tsdsn");
            });

            modelBuilder.Entity<ItTsdContragent>(entity =>
            {
                entity.HasKey(e => e.IdContragent)
                    .IsClustered(false);

                entity.ToTable("it_TSD_contragents", "dbo");

                entity.Property(e => e.IdContragent)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_contragent");

                entity.Property(e => e.ContragentName)
                    .HasMaxLength(100)
                    .HasColumnName("Contragent_name");
            });

            modelBuilder.Entity<ItTsdDocDetail>(entity =>
            {
                entity.HasKey(e => new { e.IdDoc, e.IdGood })
                    .HasName("pk_iit_TSD_doc_details")
                    .IsClustered(false);

                entity.ToTable("it_TSD_doc_details", "dbo");

                entity.Property(e => e.IdDoc).HasColumnName("Id_doc");

                entity.Property(e => e.IdGood).HasColumnName("Id_good");

                entity.Property(e => e.CountDoc).HasColumnName("Count_doc");

                entity.Property(e => e.CountReal).HasColumnName("Count_real");
            });

            modelBuilder.Entity<ItTsdDocHead>(entity =>
            {
                entity.HasKey(e => e.IdDoc)
                    .HasName("PK_it_TSD_doc_head_1")
                    .IsClustered(false);

                entity.ToTable("it_TSD_doc_head", "dbo");

                entity.Property(e => e.IdDoc)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_doc");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Doc_date");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .HasColumnName("Doc_number");

                entity.Property(e => e.DocState).HasColumnName("Doc_state");

                entity.Property(e => e.DocType).HasColumnName("Doc_type");

                entity.Property(e => e.IdContragent).HasColumnName("Id_contragent");

                entity.Property(e => e.IdUser).HasColumnName("Id_user");
            });

            modelBuilder.Entity<ItTsdGood>(entity =>
            {
                entity.HasKey(e => e.IdGood)
                    .IsClustered(false);

                entity.ToTable("it_TSD_goods", "dbo");

                entity.Property(e => e.IdGood)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_good");

                entity.Property(e => e.GoodCode)
                    .HasMaxLength(100)
                    .HasColumnName("Good_code");

                entity.Property(e => e.GoodName)
                    .HasMaxLength(100)
                    .HasColumnName("Good_name");

                entity.Property(e => e.GoodPrice).HasColumnName("Good_price");
            });

            modelBuilder.Entity<ItTsdUser>(entity =>
            {
                entity.HasKey(e => e.IdUser)
                    .IsClustered(false);

                entity.ToTable("it_TSD_users", "dbo");

                entity.Property(e => e.IdUser)
                    .ValueGeneratedNever()
                    .HasColumnName("Id_user");

                entity.Property(e => e.UserLogin)
                    .HasMaxLength(100)
                    .HasColumnName("user_login");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .HasColumnName("user_name");

                entity.Property(e => e.UserPass)
                    .HasMaxLength(100)
                    .HasColumnName("user_pass");

                entity.Property(e => e.UserRights)
                    .HasMaxLength(100)
                    .HasColumnName("user_rights");
            });

            modelBuilder.Entity<ItUnitBalance>(entity =>
            {
                entity.HasKey(e => e.ChId);

                entity.ToTable("it_UnitBalance", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ActRecAllUnit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ActRecNumArt).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ActRecSumCcin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ActRecSumCCIn");

                entity.Property(e => e.AvgProcAllUnit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.AvgProcAllonTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvgProcAllonTT");

                entity.Property(e => e.AvgProcNumArt).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.AvgProcNumOrdLine).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.AvgProcSumCcin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvgProcSumCCIn");

                entity.Property(e => e.AvgProcSumCcinonTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvgProcSumCCInonTT");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DisAllUnit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DisNumArt).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DisSumCcin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DisSumCCIn");

                entity.Property(e => e.ExcAllUnit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExcSumCcin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExcSumCCIn");

                entity.Property(e => e.ExcSumCcinNewTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExcSumCCInNewTT");

                entity.Property(e => e.ExpRecAllUnit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpRecNumArt).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpRecSumCcin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExpRecSumCCIn");

                entity.Property(e => e.ProcAllUnit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProcNumArt).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProcNumOrdLine).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProcOfAllonTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ProcOfAllonTT");

                entity.Property(e => e.ProcSumCcin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ProcSumCCIn");

                entity.Property(e => e.ProcSumCcinPerDay)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ProcSumCCInPerDay");

                entity.Property(e => e.UnDisAllUnit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnDisNumArt).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnDisNumOrdLine).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UnDisOfAllonTt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnDisOfAllonTT");

                entity.Property(e => e.UnDisSumCcin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnDisSumCCIn");
            });

            modelBuilder.Entity<ItUnitBalanceStatic>(entity =>
            {
                entity.HasKey(e => e.Дата);

                entity.ToTable("it_UnitBalance_Static", "dbo");

                entity.Property(e => e.Дата).HasColumnType("date");

                entity.Property(e => e._21НеОбработанныеРаспределенияВсегоЮнитов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("2.1. Не обработанные распределения, Всего юнитов");

                entity.Property(e => e._22НеОбработанныеРаспределенияЮнитовНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("2.2. Не обработанные распределения, Юнитов на ТТ");

                entity.Property(e => e._23НеОбработанныеРаспределенияВсегоКВоАртикулов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("2.3. Не обработанные распределения, Всего к-во артикулов");

                entity.Property(e => e._24НеОбработанныеРаспределенияКВоСтрокЗаказаНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("2.4. Не обработанные распределения, К-во строк заказа на ТТ");

                entity.Property(e => e._25НеОбработанныеРаспределенияВсегоСуммаЦз)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("2.5. Не обработанные распределения, Всего сумма ЦЗ");

                entity.Property(e => e._31ОбработаноВсегоЮнитовЗаСуткиС800До800)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("3.1. Обработано, Всего юнитов за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._32ОбработаноЮнитовНаТтЗаСуткиС800До800)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("3.2. Обработано, Юнитов на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._33ОбработаноКВоАртикуловНаТтЗаСуткиС800До800).HasColumnName("3.3. Обработано, К-во артикулов на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._34ОбработаноКВоСтрокЗаказаНаТтЗаСуткиС800До800).HasColumnName("3.4. Обработано, К-во строк заказа на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._35ОбработаноВсегоСуммаЦзЗаСуткиС800До800)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("3.5. Обработано, Всего сумма ЦЗ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._36ОбработаноСуммаЦзНаТтЗаСуткиС800До800)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("3.6. Обработано, Сумма ЦЗ на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._51ОжидаемоеПоступлениеВсегоЮнитов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("5.1. Ожидаемое поступление, Всего юнитов");

                entity.Property(e => e._52ОжидаемоеПоступлениеВсегоКВоАртикулов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("5.2. Ожидаемое поступление, Всего к-во артикулов");

                entity.Property(e => e._53ОжидаемоеПоступлениеВсегоСуммаЦз)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("5.3. Ожидаемое поступление, Всего сумма ЦЗ");

                entity.Property(e => e._61РаспределеноВсегоЮнитов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("6.1. Распределено, Всего юнитов");

                entity.Property(e => e._62РаспределеноВсегоКВоАртикулов).HasColumnName("6.2. Распределено, Всего к-во артикулов");

                entity.Property(e => e._63РаспределеноВсегоСуммаЦз)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("6.3. Распределено, Всего сумма ЦЗ");

                entity.Property(e => e._71ФактическиПоступилоВсегоЮнитов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("7.1. Фактически поступило, Всего юнитов");

                entity.Property(e => e._72ФактическиПоступилоВсегоКВоАртикулов).HasColumnName("7.2. Фактически поступило, Всего к-во артикулов");

                entity.Property(e => e._73ФактическиПоступилоВсегоСуммаЦз)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("7.3. Фактически поступило, Всего сумма ЦЗ");

                entity.Property(e => e._81НаСколькоДнейОбработкиТовараВсегоЮнитов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("8.1. На сколько дней обработки товара, Всего юнитов");

                entity.Property(e => e._82НаСколькоДнейОбработкиТовараЮнитовНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("8.2. На сколько дней обработки товара, Юнитов на ТТ");

                entity.Property(e => e._83НаСколькоДнейОбработкиТовараВсегоКВоАртикулов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("8.3. На сколько дней обработки товара, Всего к-во артикулов");

                entity.Property(e => e._84НаСколькоДнейОбработкиТовараКВоСтрокЗаказаНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("8.4. На сколько дней обработки товара, К-во строк заказа на ТТ");

                entity.Property(e => e._85НаСколькоДнейОбработкиТовараВсегоСуммаЦз)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("8.5. На сколько дней обработки товара, Всего сумма ЦЗ");

                entity.Property(e => e._91СреднедневнаяОбработкаВсегоЮнитов)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("9.1. Среднедневная обработка, Всего юнитов");

                entity.Property(e => e._92СреднедневнаяОбработкаЮнитовНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("9.2. Среднедневная обработка, Юнитов на ТТ");

                entity.Property(e => e._93СреднедневнаяОбработкаКВоАртикуловНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("9.3. Среднедневная обработка, К-во артикулов на ТТ");

                entity.Property(e => e._94СреднедневнаяОбработкаКВоСтрокЗаказаНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("9.4. Среднедневная обработка, К-во строк заказа на ТТ");

                entity.Property(e => e._95СреднедневнаяОбработкаВсегоСуммаЦз)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("9.5. Среднедневная обработка, Всего сумма ЦЗ");

                entity.Property(e => e._96СреднедневнаяОбработкаСуммаЦзНаТт)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("9.6. Среднедневная обработка, Сумма ЦЗ на ТТ");
            });

            modelBuilder.Entity<ItVenDiff>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("pk_it_VenDiff")
                    .IsClustered(false);

                entity.ToTable("it_VenDiff", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.DiffTnewQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DiffTNewQty");

                entity.Property(e => e.DiffTqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DiffTQty");

                entity.Property(e => e.TnewQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewQty");

                entity.Property(e => e.ToldNewQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TOldNewQty");

                entity.Property(e => e.ToldQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TOldQty");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TQty");
            });

            modelBuilder.Entity<ItVenGr>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_VenGrs")
                    .IsClustered(false);

                entity.ToTable("it_VenGrs", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItVenGrsD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StockId })
                    .HasName("pk_it_VenGrsD")
                    .IsClustered(false);

                entity.ToTable("it_VenGrsD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.Docdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("docdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PcatCmIdlist)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PCatCmIDList");

                entity.Property(e => e.PgrIdlist)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PgrIDList")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Total).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItVenHistory>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("pk_it_VenHistory")
                    .IsClustered(false);

                entity.ToTable("it_VenHistory", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.TnewQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewQty");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TQty");
            });

            modelBuilder.Entity<ItVenMarriage>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_venMarriage");

                entity.ToTable("it_venMarriage", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.TnewQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewQty");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.Um)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<ItVenReGrading>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("pk_it_venReGrading");

                entity.ToTable("it_venReGrading", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DiffQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_NT");

                entity.Property(e => e.ReadingLines)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");
            });

            modelBuilder.Entity<ItVenTsd>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_VenTSD")
                    .IsClustered(false);

                entity.ToTable("it_VenTSD", "dbo");

                entity.HasIndex(e => e.ChId, "IDX-dbo-it_VenTSD-001")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Brak).HasDefaultValueSql("((0))");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Tsdsn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TSDSN");
            });

            modelBuilder.Entity<ItVenUnknBarCode>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_VenUnknBarCodes")
                    .IsClustered(false);

                entity.ToTable("it_VenUnknBarCodes", "dbo");

                entity.HasIndex(e => new { e.ChId, e.BarCode }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ItWorkTime>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_WorkTime");

                entity.ToTable("it_WorkTime", "dbo");

                entity.HasIndex(e => e.DocId, "DocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "IX_DocDate_Includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Statecode, "Statecode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocId, e.StockId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItWorkTimeD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcposId })
                    .HasName("pk_it_WorkTimeD")
                    .IsClustered(false);

                entity.ToTable("it_WorkTimeD", "dbo");

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.EmpId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcposId).HasColumnName("SrcposID");

                entity.Property(e => e.DayBtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DayBTime");

                entity.Property(e => e.DayEtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DayETime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.FactTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItWtime>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_WTime")
                    .IsClustered(false);

                entity.ToTable("it_WTime", "dbo");

                entity.HasIndex(e => e.DocId, "DocID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.StateCode, "StateCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.FillingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ItWtimeD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_it_WTimeD")
                    .IsClustered(false);

                entity.ToTable("it_WTimeD", "dbo");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.FineId, "FineID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PersId, "PersID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PostId, "PostID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.EmpId, e.DocDate }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.FactTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.FineId).HasColumnName("FineID");

                entity.Property(e => e.FineSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("FineSumCC");

                entity.Property(e => e.NormTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PersId).HasColumnName("PersID");

                entity.Property(e => e.PersSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PersSumCC");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.Wrate)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WRate");
            });

            modelBuilder.Entity<ItXRep>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_it_xRep")
                    .IsClustered(false);

                entity.ToTable("it_xRep", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.FacId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FacID");

                entity.Property(e => e.FinId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FinID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RetSumCard).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumCash).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumCheque).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumCredit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumOther).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCard).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCash).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.SumCheque).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCredit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumMonExp).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumMonRec).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumOther).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumRem)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IvAccUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_AccUsers", "dbo");

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RoleDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Добавление)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Изменение)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Удаление)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Чтение)
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IvAllrateBasePgrId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_ALLRateBasePGrID", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<IvAllrateBasis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_ALLRateBases", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<IvBonu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Bonus", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<IvControlOfOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_ControlOfOrder", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EoexpQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("EOExpQty");

                entity.Property(e => e.EoexpSum)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("EOExpSum");

                entity.Property(e => e.EppQty1).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppQty2).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppQty3).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppQty4).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppQty5).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppSum1).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppSum2).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppSum3).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppSum4).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.EppSum5).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.IsDiffPriceWt).HasColumnName("IsDiffPrice_wt");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.PgrName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RecQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RecSum).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<IvCprice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_CPrices", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IvDcardSalesIndexed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_DCardSales_Indexed", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DcardID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");
            });

            modelBuilder.Entity<IvEmpTax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EmpTax", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IncomeTaxSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("IncomeTaxSumCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OurName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UniSocSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("UniSocSumCC");
            });

            modelBuilder.Entity<IvEoexp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOExp", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpSn).HasColumnName("ExpSN");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreAC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrdBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdBDate");

                entity.Property(e => e.OrdEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdEDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumAC");

                entity.Property(e => e.TranAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranAC");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");
            });

            modelBuilder.Entity<IvEoexpDoff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOExpDOff", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.AllWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Amper).HasColumnName("AMPer");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExtProdId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ExtProdID");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.Mplicity).HasColumnName("MPlicity");

                entity.Property(e => e.MtranUn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MTranUn");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.PalletaCrat).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PersentMarriage).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Pgrid6).HasColumnName("PGRid6");

                entity.Property(e => e.PosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdGenderId).HasColumnName("prodGenderID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdIdroleId).HasColumnName("ProdIDRoleID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyWithMult).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StatusMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.TranQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranQTY");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitPerOrd).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<IvEoexpDon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOExpDOn", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.AllWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Amper).HasColumnName("AMPer");

                entity.Property(e => e.Article1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Article4)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExtProdId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ExtProdID");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursLast).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LastPriceInBaks).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.Mplicity).HasColumnName("MPlicity");

                entity.Property(e => e.MtranUn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MTranUn");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceMC");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.NewSumMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumMC");

                entity.Property(e => e.NoteMenager)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.Otm).HasColumnName("OTM");

                entity.Property(e => e.PalletaCrat).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PersentMarriage).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Pgrid6).HasColumnName("PGRid6");

                entity.Property(e => e.PosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdGenderId).HasColumnName("prodGenderID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdIdroleId).HasColumnName("ProdIDRoleID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyInBox)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.QtyWithMult).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecCatId).HasColumnName("RecCatID");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StatusMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumImp).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TranQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranQTY");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit14).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit21).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit7).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitN).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitPerOrd).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<IvEoexpReestr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOExpReestr", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpSn).HasColumnName("ExpSN");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreAC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrdBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdBDate");

                entity.Property(e => e.OrdEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdEDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumAC");

                entity.Property(e => e.TranAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranAC");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");
            });

            modelBuilder.Entity<IvEoexpReestrDd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOExpReestrDD", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.DetExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetNewSumAC");

                entity.Property(e => e.DetNremDays).HasColumnName("DetNRemDays");

                entity.Property(e => e.DetOurId).HasColumnName("DetOurID");

                entity.Property(e => e.DetPosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DetPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetPriceAC");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.DetQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetQtyWithMult).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetRemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetSecId).HasColumnName("DetSecID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.DetStockId).HasColumnName("DetStockID");

                entity.Property(e => e.DetSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumAC");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.Minrem)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("minrem");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IvEoprep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOPrep", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OrdBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdBDate");

                entity.Property(e => e.OrdEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdEDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TNewSumCC");

                entity.Property(e => e.TnewSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TNewSumMC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<IvEoprepDoff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOPrepDOff", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.PosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<IvEoprepDon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_EOPrepDOn", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.Article1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.KursLast).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LastPriceInBaks).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NoteMenager)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.Otm).HasColumnName("OTM");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.PosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit14).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit21).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit7).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitN).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<IvExc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Exc", "dbo");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");
            });

            modelBuilder.Entity<IvExc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Excs", "dbo");

                entity.Property(e => e.BarCode)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiffQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DiffRecSum).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.DiffSum).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.DisDocId).HasColumnName("DisDocID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.NewStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RlogDocId).HasColumnName("RLogDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TnewQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TNewQty");

                entity.Property(e => e.TnewRecSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TNewRecSumCC");

                entity.Property(e => e.TnewSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TNewSumCC");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TranStockId).HasColumnName("TranStockID");

                entity.Property(e => e.TranStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TrecSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TRecSumCC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WempId).HasColumnName("WEmpID");

                entity.Property(e => e.WteamId).HasColumnName("WTeamID");
            });

            modelBuilder.Entity<IvFlowChart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_FlowCharts", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OutQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IvFlowChartD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_FlowChartD", "dbo");

                entity.Property(e => e.BaseUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BaseUM");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.GrossQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NetQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("decimal(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WastePrc).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IvFlowChartUserVar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_FlowChartUserVars", "dbo");

                entity.Property(e => e.DocDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<IvLogDiscrecExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_logDiscrecExp", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Empid).HasColumnName("empid");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IvParishJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_ParishJournal", "dbo");

                entity.Property(e => e.AcceptedId).HasColumnName("AcceptedID");

                entity.Property(e => e.CarNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cell)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId3).HasColumnName("CompGrID3");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ContainerNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EndReception).HasColumnType("datetime");

                entity.Property(e => e.EndUnloading).HasColumnType("datetime");

                entity.Property(e => e.PassedName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QtyPositions).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Space1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcDocdate).HasColumnType("smalldatetime");

                entity.Property(e => e.StartReception).HasColumnType("datetime");

                entity.Property(e => e.StartUnloading).HasColumnType("datetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ViolId).HasColumnName("ViolID");

                entity.Property(e => e.Weight1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IvParishJournald>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_ParishJournald", "dbo");

                entity.Property(e => e.Cell)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Space1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Weight1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IvParishJournalz>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_ParishJournalz", "dbo");

                entity.Property(e => e.AcceptedId).HasColumnName("AcceptedID");

                entity.Property(e => e.CarNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cell)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId3).HasColumnName("CompGrID3");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ContainerNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EndReception).HasColumnType("datetime");

                entity.Property(e => e.EndUnloading).HasColumnType("datetime");

                entity.Property(e => e.PassedName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QtyPositions).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Space1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcDocdate).HasColumnType("smalldatetime");

                entity.Property(e => e.StartReception).HasColumnType("datetime");

                entity.Property(e => e.StartUnloading).HasColumnType("datetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ViolId).HasColumnName("ViolID");

                entity.Property(e => e.Weight1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<IvProdsInTransit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_ProdsInTransit", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ShipDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");
            });

            modelBuilder.Entity<IvRangeMatrixP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_RangeMatrixP", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId6).HasColumnName("PGrID6");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IvRecGab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_RecGab", "dbo");

                entity.Property(e => e.Chid).HasColumnName("chid");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Prodname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Weight1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("weight1");

                entity.Property(e => e.Объём).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<IvRemDtransQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_RemDTransQty", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TransQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.TransSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TransSumMC");

                entity.Property(e => e.TrunsSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TrunsSumCC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<IvReportDcownerAnalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Report_DCOwnerAnalysis", "dbo");

                entity.Property(e => e.AddVk).HasColumnName("AddVK");

                entity.Property(e => e.AvgCheque).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.BirtDay)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DCardID");

                entity.Property(e => e.Dcqty).HasColumnName("DCQty");

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.Property(e => e.DctypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DCTypeName");

                entity.Property(e => e.Dfield).HasColumnName("DField");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.FactAptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactCity)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactDistrict)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactHouse)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FactRegion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactStreet)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyStatus)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.FillingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.KinBirthDay).HasColumnType("smalldatetime");

                entity.Property(e => e.KinName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NotReceiveSms).HasColumnName("NotReceiveSMS");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneHome)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneMob)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.Surname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("surname");
            });

            modelBuilder.Entity<IvReportDcownerAnalysis1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Report_DCOwnerAnalysis1", "dbo");

                entity.Property(e => e.AddFacebook)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AddOdnokl)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AddVk)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("AddVK");

                entity.Property(e => e.AvgCheque).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.BirtDay)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DCardID");

                entity.Property(e => e.Dcqty).HasColumnName("DCQty");

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.Property(e => e.DctypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DCTypeName");

                entity.Property(e => e.Dfield).HasColumnName("DField");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.FactAptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactCity)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactDistrict)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactHouse)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FactRegion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactStreet)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyStatus)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.KinBirthDay).HasColumnType("smalldatetime");

                entity.Property(e => e.KinName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NotReceiveEmail)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NotReceiveInfo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NotReceiveSms)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NotReceiveSMS");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneMob)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.Ufield1).HasColumnName("UField1");

                entity.Property(e => e.Ufield2).HasColumnName("UField2");

                entity.Property(e => e.Ufield3).HasColumnName("UField3");
            });

            modelBuilder.Entity<IvReportSalesAnalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Report_SalesAnalysis", "dbo");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Article1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BirthDay)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.ChequePosDiscount).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.ChequeProdQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ChequeSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DCardID");

                entity.Property(e => e.Dcqty).HasColumnName("DCQty");

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.Property(e => e.DctypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DCTypeName");

                entity.Property(e => e.DiscSumBonus).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DocCreateTime).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.ExpSumBonus).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.FactAptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactCity)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactDistrict)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactHouse)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FactRegion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactStreet)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyStatus)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.FillingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotReceiveEmail).HasColumnName("NotReceiveEMail");

                entity.Property(e => e.NotReceiveSms).HasColumnName("NotReceiveSMS");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PayFormName)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.PgrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.PgrName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName1");

                entity.Property(e => e.PgrName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName2");

                entity.Property(e => e.PgrName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName3");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneHome)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdQty10).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty15).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty20).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty25).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty30).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty5).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQtyAll).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurSumCcWt)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PurSumCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Surname)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ОстатокБонусовНаДк)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("Остаток бонусов на ДК");

                entity.Property(e => e.ПрибыльНаценкаНаТовар)
                    .HasColumnType("numeric(22, 9)")
                    .HasColumnName("Прибыль (наценка) на товар");
            });

            modelBuilder.Entity<IvReportSalesAnalysisOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Report_SalesAnalysis_old", "dbo");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Article1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BirthDay)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.ChequePosDiscount).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.ChequeProdQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ChequeSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DCardID");

                entity.Property(e => e.Dcqty).HasColumnName("DCQty");

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.Property(e => e.DctypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DCTypeName");

                entity.Property(e => e.DiscSumBonus).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DocCreateTime).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.FactAptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactCity)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactDistrict)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactHouse)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FactRegion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactStreet)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyStatus)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.NotReceiveEmail)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NotReceiveInfo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NotReceiveSms)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NotReceiveSMS");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PayFormName)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.PgrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.PgrName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName1");

                entity.Property(e => e.PgrName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName2");

                entity.Property(e => e.PgrName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName3");

                entity.Property(e => e.PhoneHome)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneMob)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdQty10).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty15).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty20).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty25).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty30).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQty5).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ProdQtyAll).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurSumCcWt)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PurSumCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<IvReportSalesFrequencyAnalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_Report_SalesFrequencyAnalysis", "dbo");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AvgCheque).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.ChequeProdQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.ChequeSum).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DCardID");

                entity.Property(e => e.Dcqty).HasColumnName("DCQty");

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.Property(e => e.DctypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DCTypeName");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.FactAptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactCity)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactDistrict)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactHouse)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FactRegion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactStreet)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyStatus)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.MaxDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MinDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PersonName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneHome)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Surname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("surname");

                entity.Property(e => e.TchequeQty).HasColumnName("TChequeQty");

                entity.Property(e => e.TprodQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TProdQty");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC_wt");
            });

            modelBuilder.Entity<IvRevaluationPlanning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_RevaluationPlanning", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Docid).HasColumnName("docid");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RevaluationDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StateName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IvRlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_RLog", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DisDocId).HasColumnName("DisDocID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.FinishDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OurName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RecDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecDocId).HasColumnName("RecDocID");

                entity.Property(e => e.RecFactEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecFactEDate");

                entity.Property(e => e.RecPlanEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecPlanEDate");

                entity.Property(e => e.ShortSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ShortSumCC");

                entity.Property(e => e.StateName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WrongDelivQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WrongDelivSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WrongDelivSumCC");
            });

            modelBuilder.Entity<IvSumbonu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("iv_sumbonus", "dbo");

                entity.Property(e => e.Dcardid)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("dcardid");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<JobError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("JobErrors", "dbo");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Job_Name");

                entity.Property(e => e.Message)
                    .HasMaxLength(7000)
                    .IsUnicode(false);

                entity.Property(e => e.RunDate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Run_date");

                entity.Property(e => e.RunTime)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Run_time");

                entity.Property(e => e.Server)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Step_name");
            });

            modelBuilder.Entity<LflHistory>(entity =>
            {
                entity.ToTable("LFL_History", "report");

                entity.HasIndex(e => new { e.LoadingDate, e.OnDate }, "IX_LFL_History")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.LoadingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProfitPerc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Profit_Perc");

                entity.Property(e => e.TsumCcWtPeriod)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt_Period");

                entity.Property(e => e.TsumCcWtYearAgo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt_YearAgo");
            });

            modelBuilder.Entity<LfldetailHistory>(entity =>
            {
                entity.ToTable("LFLDetail_History", "report");

                entity.HasIndex(e => new { e.LoadingDate, e.OnDate, e.StockId }, "IX_LFLDetail_History")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.LoadingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProfitPerc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Profit_Perc");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCcWtPeriod)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt_Period");

                entity.Property(e => e.TsumCcWtYearAgo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt_YearAgo");
            });

            modelBuilder.Entity<Ost>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201712>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201712", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201801>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201801", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201802>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201802", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201803>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201803", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201804>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201804", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201805>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201805", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201806>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201806", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201807>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201807", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201808>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201808", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201809>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201809", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201810>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201810", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201811>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201811", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201812>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201812", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201901>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201901", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201902>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201902", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost20190207>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST20190207", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<Ost201903>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OST201903", "dwh");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profit");

                entity.Property(e => e.Profitb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("profitb");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qtyost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyost");

                entity.Property(e => e.Sumcc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumcc");

                entity.Property(e => e.Sumccin)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccin");

                entity.Property(e => e.Sumccinb)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinb");

                entity.Property(e => e.Sumccinost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccinost");

                entity.Property(e => e.Sumccost)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumccost");
            });

            modelBuilder.Entity<PCommunalTax>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_p_CommunalTax");

                entity.ToTable("p_CommunalTax", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PCommunalTax1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_CommunalTaxs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TcommunalSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TCommunalSumCC");
            });

            modelBuilder.Entity<PCommunalTaxD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.TaxRegionId })
                    .HasName("pk_p_CommunalTaxD");

                entity.ToTable("p_CommunalTaxD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .IsUnique();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.TaxRegionId).HasColumnName("TaxRegionID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.AvgEmpsQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CommunalSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CommunalSumCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");
            });

            modelBuilder.Entity<PCommunalTaxDd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.CostGaccId })
                    .HasName("pk_p_CommunalTaxDD");

                entity.ToTable("p_CommunalTaxDD", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.CostGaccId).HasColumnName("CostGAccID");

                entity.Property(e => e.GaccCommunalSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GAccCommunalSumCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");
            });

            modelBuilder.Entity<PCpi>(entity =>
            {
                entity.HasKey(e => new { e.YearId, e.MonthId })
                    .HasName("pk_p_CPIs")
                    .IsClustered(false);

                entity.ToTable("p_CPIs", "dbo");

                entity.Property(e => e.YearId).HasColumnName("YearID");

                entity.Property(e => e.MonthId).HasColumnName("MonthID");

                entity.Property(e => e.Cpi)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CPI");
            });

            modelBuilder.Entity<PCwtime>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_CWTime")
                    .IsClustered(false);

                entity.ToTable("p_CWTime", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate")
                    .HasDefaultValueSql("('19000101')");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CwtimeType).HasColumnName("CWTimeType");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate")
                    .HasDefaultValueSql("('19000101')");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PCwtime1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_CWTimes", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TbleaveDaysCount)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBLeaveDaysCount");

                entity.Property(e => e.TchargeCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TChargeCC");

                entity.Property(e => e.TholDaysCount)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("THolDaysCount");

                entity.Property(e => e.TnonAppDaysCount)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TNonAppDaysCount");

                entity.Property(e => e.TpleaveDaysCount)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TPLeaveDaysCount");

                entity.Property(e => e.TsickDaysCount)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSickDaysCount");

                entity.Property(e => e.TtruanDaysCount)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTruanDaysCount");

                entity.Property(e => e.TtworkDays)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTWorkDays");

                entity.Property(e => e.TtworkHours)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTWorkHours");
            });

            modelBuilder.Entity<PCwtimeCor>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.EmpId, e.AppDate })
                    .HasName("pk_p_CWTimeCor");

                entity.ToTable("p_CWTimeCor", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DayPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EveningHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NightHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OverPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OverTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseInWtime).HasColumnName("UseInWTime");

                entity.Property(e => e.WorkHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");
            });

            modelBuilder.Entity<PCwtimeCor1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_CWTimeCors", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");
            });

            modelBuilder.Entity<PCwtimeD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.EmpId, e.SubId, e.DepId })
                    .HasName("_pk_p_CWTimeD");

                entity.ToTable("p_CWTimeD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.BleaveDaysCount)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BLeaveDaysCount");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.ChargeCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChargeCC");

                entity.Property(e => e.HolDaysCount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NonAppDaysCount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PleaveDaysCount)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PLeaveDaysCount");

                entity.Property(e => e.SickDaysCount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TruanDaysCount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TworkDays)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TWorkDays");

                entity.Property(e => e.TworkHours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TWorkHours");
            });

            modelBuilder.Entity<PCwtimeDd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DayPosId })
                    .HasName("_pk_p_CWTimeDD")
                    .IsClustered(false);

                entity.ToTable("p_CWTimeDD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.DayPosId, "DayPosID");

                entity.HasIndex(e => e.WtsignId, "WTSignID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DayPosId).HasColumnName("DayPosID");

                entity.Property(e => e.DayPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DaySaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DaySaleSumCC");

                entity.Property(e => e.EvenSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EvenSaleSumCC");

                entity.Property(e => e.EveningHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NightHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NightSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NightSaleSumCC");

                entity.Property(e => e.OneHourSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OneHourSumCC");

                entity.Property(e => e.OverPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OverSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OverSaleSumCC");

                entity.Property(e => e.OverTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WorkHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");
            });

            modelBuilder.Entity<PCwtimeDdext>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.ShedId, e.DayPosId })
                    .HasName("pk_p_CWTimeDDExt")
                    .IsClustered(false);

                entity.ToTable("p_CWTimeDDExt", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.DayPosId).HasColumnName("DayPosID");

                entity.Property(e => e.DayPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DaySaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DaySaleSumCC");

                entity.Property(e => e.EvenSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EvenSaleSumCC");

                entity.Property(e => e.EveningHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NightHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NightSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NightSaleSumCC");

                entity.Property(e => e.OneHourSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OneHourSumCC");

                entity.Property(e => e.OverPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OverSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OverSaleSumCC");

                entity.Property(e => e.OverTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WorkHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");
            });

            modelBuilder.Entity<PCwtimesE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_CWTimesE", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CwtimeType).HasColumnName("CWTimeType");

                entity.Property(e => e.DayPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DayPosId).HasColumnName("DayPosID");

                entity.Property(e => e.DaySaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DaySaleSumCC");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EvenSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EvenSaleSumCC");

                entity.Property(e => e.EveningHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NightHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NightSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NightSaleSumCC");

                entity.Property(e => e.OneHourSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OneHourSumCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OverPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OverSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OverSaleSumCC");

                entity.Property(e => e.OverTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorkHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");
            });

            modelBuilder.Entity<PCwtimesEe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_CWTimesEE", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CwtimeType).HasColumnName("CWTimeType");

                entity.Property(e => e.DayPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DayPosId).HasColumnName("DayPosID");

                entity.Property(e => e.DaySaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DaySaleSumCC");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EvenSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EvenSaleSumCC");

                entity.Property(e => e.EveningHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NightHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NightSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NightSaleSumCC");

                entity.Property(e => e.OneHourSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OneHourSumCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OverPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OverSaleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OverSaleSumCC");

                entity.Property(e => e.OverTime).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorkHours).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");
            });

            modelBuilder.Entity<PDtran>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_p_DTran")
                    .IsClustered(false);

                entity.ToTable("p_DTran", "dbo");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.HasIndex(e => e.TranDate, "TranDate");

                entity.HasIndex(e => e.WtsignId, "WTSignID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DatePayFac).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DestDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotUseDepId).HasColumnName("NotUseDepID");

                entity.Property(e => e.NotUseSubId).HasColumnName("NotUseSubID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TranDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");
            });

            modelBuilder.Entity<PEdi>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_EDis")
                    .IsClustered(false);

                entity.ToTable("p_EDis", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AvrNleaCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvrNLeaCC");

                entity.Property(e => e.AvrSalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AvrSalPres).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DisBasis)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DisDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DisPayCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DisPayCC");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NleaBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NLeaBDate");

                entity.Property(e => e.NleaDays).HasColumnName("NLeaDays");

                entity.Property(e => e.NleaDaysExtra).HasColumnName("NLeaDaysExtra");

                entity.Property(e => e.NleaEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NLeaEDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEdiss>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EDiss", "dbo");

                entity.Property(e => e.AvrNleaCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvrNLeaCC");

                entity.Property(e => e.AvrSalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AvrSalPres).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DisBasis)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DisDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DisPayCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DisPayCC");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NleaBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NLeaBDate");

                entity.Property(e => e.NleaDays).HasColumnName("NLeaDays");

                entity.Property(e => e.NleaEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NLeaEDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEdissE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EDissE", "dbo");

                entity.Property(e => e.AvrNleaCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvrNLeaCC");

                entity.Property(e => e.AvrSalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AvrSalPres).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DisBasis)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DisDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DisPayCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DisPayCC");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NleaBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NLeaBDate");

                entity.Property(e => e.NleaDays).HasColumnName("NLeaDays");

                entity.Property(e => e.NleaEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NLeaEDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEexc>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_EExc")
                    .IsClustered(false);

                entity.ToTable("p_EExc", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.ExcDate, "ExcDate");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.ShedId, "ShedID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.HasIndex(e => new { e.PostId, e.EmpClass }, "r_PostMCp_EExc");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.ContrEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ContrEDate");

                entity.Property(e => e.ContractFile)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DecreeEmpId).HasColumnName("DecreeEmpID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GempType).HasColumnName("GEmpType");

                entity.Property(e => e.IndexBaseMonth).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.PensCatId)
                    .HasColumnName("PensCatID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PensMethod).HasDefaultValueSql("(1)");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.StrucPostId).HasColumnName("StrucPostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubJob)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEexc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EExcs", "dbo");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PensCatId).HasColumnName("PensCatID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubJob)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEgiv>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_EGiv")
                    .IsClustered(false);

                entity.ToTable("p_EGiv", "dbo");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.ShedId, "ShedID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.HasIndex(e => new { e.PostId, e.EmpClass }, "r_PostMCp_EGiv");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AdvSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.CardAcc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.ContrEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ContrEDate");

                entity.Property(e => e.ContractFile)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DecreeEmpId).HasColumnName("DecreeEmpID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GempType).HasColumnName("GEmpType");

                entity.Property(e => e.HandCwtime).HasColumnName("HandCWTime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.PensCatId)
                    .HasColumnName("PensCatID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PensMethod).HasDefaultValueSql("(1)");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.StrucPostId).HasColumnName("StrucPostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubJob)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TrialMonths).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");

                entity.Property(e => e.WorkAppDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PEgiv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EGivs", "dbo");

                entity.Property(e => e.AdvSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.CardAcc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.ContrEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ContrEDate");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GempType).HasColumnName("GEmpType");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PensCatId).HasColumnName("PensCatID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubJob)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TrialMonths).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");

                entity.Property(e => e.WorkAppDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PEleav>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_ELeav")
                    .IsClustered(false);

                entity.ToTable("p_ELeav", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEleav1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ELeavs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TempCount).HasColumnName("TEmpCount");

                entity.Property(e => e.TleavSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TLeavSumCC");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEleavCor>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("pk_p_ELeavCor")
                    .IsClustered(false);

                entity.ToTable("p_ELeavCor", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.WorderId, "WOrderID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEleavCor1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ELeavCors", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TempCount).HasColumnName("TEmpCount");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEleavCorD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_p_ELeavCorD")
                    .IsClustered(false);

                entity.ToTable("p_ELeavCorD", "dbo");

                entity.HasIndex(e => e.AgeBdate, "AgeBDate");

                entity.HasIndex(e => e.AgeEdate, "AgeEDate");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.LeavCorReason, "LeavCorReason");

                entity.HasIndex(e => e.LeavCorType, "LeavCorType");

                entity.HasIndex(e => e.LeavType, "LeavType");

                entity.HasIndex(e => e.NewBdate, "NewBDate");

                entity.HasIndex(e => e.NewEdate, "NewEDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AgeBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeBDate");

                entity.Property(e => e.AgeEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeEDate");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.CorBasis)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.NewBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NewBDate");

                entity.Property(e => e.NewEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NewEDate");
            });

            modelBuilder.Entity<PEleavD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_p_ELeavD")
                    .IsClustered(false);

                entity.ToTable("p_ELeavD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .IsUnique();

                entity.HasIndex(e => e.AgeBdate, "AgeBDate");

                entity.HasIndex(e => e.AgeEdate, "AgeEDate");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.AgeBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeBDate");

                entity.Property(e => e.AgeEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeEDate");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.LeavAvrSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LeavSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LeavSumCC");

                entity.Property(e => e.SubId).HasColumnName("SubID");
            });

            modelBuilder.Entity<PEleavDd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SrcDate })
                    .HasName("_pk_p_ELeavDD")
                    .IsClustered(false);

                entity.ToTable("p_ELeavDD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DaysFact).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DaysNorm).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.FactSalary).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<PEleavDp>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SrcDate })
                    .HasName("pk_p_ELeavDP");

                entity.ToTable("p_ELeavDP", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PleavSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PLeavSumCC");
            });

            modelBuilder.Entity<PEleavsDpe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ELeavsDPE", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.AgeBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeBDate");

                entity.Property(e => e.AgeEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeEDate");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LeavAvrSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LeavSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LeavSumCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PleavSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PLeavSumCC");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEleavsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ELeavsE", "dbo");

                entity.Property(e => e.AgeBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeBDate");

                entity.Property(e => e.AgeEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeEDate");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LeavAvrSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LeavSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LeavSumCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEmpIn>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.EmpId, e.WorkAppDate })
                    .HasName("pk_p_EmpIn");

                entity.ToTable("p_EmpIn", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.WorkAppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DisDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IndexBaseMonth).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<PEmpInLeav>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.Bdate })
                    .HasName("pk_p_EmpInLeavs");

                entity.ToTable("p_EmpInLeavs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.AgeBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeBDate");

                entity.Property(e => e.AgeEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeEDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<PEmpInLexp>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.AccDate })
                    .HasName("pk_p_EmpInLExp");

                entity.ToTable("p_EmpInLExp", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.AccDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LexpSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpSumCC");
            });

            modelBuilder.Entity<PEmpInLrec>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.AccDate, e.PayTypeId })
                    .HasName("pk_p_EmpInLRec");

                entity.ToTable("p_EmpInLRec", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.AccDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.LrecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LRecSumCC");
            });

            modelBuilder.Entity<PEmpInWtime>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcDate })
                    .HasName("pk_p_EmpInWTime");

                entity.ToTable("p_EmpInWTime", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TworkDays)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TWorkDays");

                entity.Property(e => e.TworkHours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TWorkHours");
            });

            modelBuilder.Entity<PEmpSchedExt>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_p_EmpSchedExt")
                    .IsClustered(false);

                entity.ToTable("p_EmpSchedExt", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<PEmpSchedExt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EmpSchedExts", "dbo");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<PEmpSchedExtD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_p_EmpSchedExtD")
                    .IsClustered(false);

                entity.ToTable("p_EmpSchedExtD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.StrucPostId).HasColumnName("StrucPostID");

                entity.Property(e => e.SubEmpId).HasColumnName("SubEmpID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubJob)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PEsic>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_ESic")
                    .IsClustered(false);

                entity.ToTable("p_ESic", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PrimSickDocId, "PrimSickDocID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AfterFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AfterFiveSumCC");

                entity.Property(e => e.AvrGrantCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvrGrantCC");

                entity.Property(e => e.AvrSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.Diagnosis)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GrantSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GrantSumCC");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PrimSickDocId).HasColumnName("PrimSickDocID");

                entity.Property(e => e.SickBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickBDate");

                entity.Property(e => e.SickDept)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SickDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SickDocID");

                entity.Property(e => e.SickEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickEDate");

                entity.Property(e => e.SickPayPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SickWdays).HasColumnName("SickWDays");

                entity.Property(e => e.SickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SickWHours");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TillFiveSickWdays).HasColumnName("TillFiveSickWDays");

                entity.Property(e => e.TillFiveSickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TillFiveSickWHours");

                entity.Property(e => e.TillFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TillFiveSumCC");
            });

            modelBuilder.Entity<PEsic1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ESics", "dbo");

                entity.Property(e => e.AvrGrantCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvrGrantCC");

                entity.Property(e => e.AvrSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.Diagnosis)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GrantSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GrantSumCC");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrimSickDocId).HasColumnName("PrimSickDocID");

                entity.Property(e => e.SickBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickBDate");

                entity.Property(e => e.SickDept)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SickDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SickDocID");

                entity.Property(e => e.SickEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickEDate");

                entity.Property(e => e.SickWdays).HasColumnName("SickWDays");

                entity.Property(e => e.SickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SickWHours");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TdaysFact)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TDaysFact");

                entity.Property(e => e.TdaysNorm)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TDaysNorm");

                entity.Property(e => e.TfactSalary)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TFactSalary");

                entity.Property(e => e.TillFiveSickWdays).HasColumnName("TillFiveSickWDays");

                entity.Property(e => e.TillFiveSickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TillFiveSickWHours");
            });

            modelBuilder.Entity<PEsicA>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DetSrcDate })
                    .HasName("_pk_p_ESicA");

                entity.ToTable("p_ESicA", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DetSrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DetAfterFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetAfterFiveSumCC");

                entity.Property(e => e.DetTillFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetTillFiveSumCC");
            });

            modelBuilder.Entity<PEsicAsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ESicAsE", "dbo");

                entity.Property(e => e.AfterFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AfterFiveSumCC");

                entity.Property(e => e.AvrGrantCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvrGrantCC");

                entity.Property(e => e.AvrSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DetAfterFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetAfterFiveSumCC");

                entity.Property(e => e.DetSrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DetTillFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetTillFiveSumCC");

                entity.Property(e => e.Diagnosis)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GrantSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GrantSumCC");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrimSickDocId).HasColumnName("PrimSickDocID");

                entity.Property(e => e.SickBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickBDate");

                entity.Property(e => e.SickDept)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SickDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SickDocID");

                entity.Property(e => e.SickEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickEDate");

                entity.Property(e => e.SickWdays).HasColumnName("SickWDays");

                entity.Property(e => e.SickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SickWHours");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TillFiveSickWdays).HasColumnName("TillFiveSickWDays");

                entity.Property(e => e.TillFiveSickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TillFiveSickWHours");

                entity.Property(e => e.TillFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TillFiveSumCC");
            });

            modelBuilder.Entity<PEsicD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcDate })
                    .HasName("_pk_p_ESicD")
                    .IsClustered(false);

                entity.ToTable("p_ESicD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DaysFact).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DaysNorm).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.FactSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.HoursFact).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<PEsicsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ESicsE", "dbo");

                entity.Property(e => e.AfterFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AfterFiveSumCC");

                entity.Property(e => e.AvrGrantCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("AvrGrantCC");

                entity.Property(e => e.AvrSalary).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.Diagnosis)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GrantSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("GrantSumCC");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrimSickDocId).HasColumnName("PrimSickDocID");

                entity.Property(e => e.SickBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickBDate");

                entity.Property(e => e.SickDept)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SickDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SickDocID");

                entity.Property(e => e.SickEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SickEDate");

                entity.Property(e => e.SickWdays).HasColumnName("SickWDays");

                entity.Property(e => e.SickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SickWHours");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TillFiveSickWdays).HasColumnName("TillFiveSickWDays");

                entity.Property(e => e.TillFiveSickWhours)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TillFiveSickWHours");

                entity.Property(e => e.TillFiveSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TillFiveSumCC");
            });

            modelBuilder.Entity<PEtrp>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_ETrp")
                    .IsClustered(false);

                entity.ToTable("p_ETrp", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TripAdv).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TripBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripBDate");

                entity.Property(e => e.TripEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripEDate");

                entity.Property(e => e.TripPurpose)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEtrp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ETrps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TripAdv).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TripBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripBDate");

                entity.Property(e => e.TripEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripEDate");

                entity.Property(e => e.TripPurpose)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEtrpsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_ETrpsE", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TripAdv).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TripBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripBDate");

                entity.Property(e => e.TripEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripEDate");

                entity.Property(e => e.TripPurpose)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PEwri>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_EWri")
                    .IsClustered(false);

                entity.ToTable("p_EWri", "dbo");

                entity.HasIndex(e => e.AccountCc, "AccountCC");

                entity.HasIndex(e => e.AddrCompId, "AddrCompID");

                entity.HasIndex(e => e.AddrEmpId, "AddrEmpID");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AccountCc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.AddrCompId).HasColumnName("AddrCompID");

                entity.Property(e => e.AddrEmpId).HasColumnName("AddrEmpID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WritBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("WritBDate");

                entity.Property(e => e.WritDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WritDept)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WritDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WritDocID");

                entity.Property(e => e.WritEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("WritEDate");

                entity.Property(e => e.WritPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WritSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WritSumCC");
            });

            modelBuilder.Entity<PEwri1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EWris", "dbo");

                entity.Property(e => e.AccountCc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.AddrCompId).HasColumnName("AddrCompID");

                entity.Property(e => e.AddrEmpId).HasColumnName("AddrEmpID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WritBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("WritBDate");

                entity.Property(e => e.WritDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WritDept)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WritDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WritDocID");

                entity.Property(e => e.WritEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("WritEDate");

                entity.Property(e => e.WritPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WritSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WritSumCC");
            });

            modelBuilder.Entity<PEwriP>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_p_EWriP")
                    .IsClustered(false);

                entity.ToTable("p_EWriP", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => new { e.ChId, e.Priority }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.PayTypeId, "PayTypeID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.MaxSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MaxSumCC");

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.SumExpE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumExpR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PEwrisE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EWrisE", "dbo");

                entity.Property(e => e.AccountCc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.AddrCompId).HasColumnName("AddrCompID");

                entity.Property(e => e.AddrEmpId).HasColumnName("AddrEmpID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WritBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("WritBDate");

                entity.Property(e => e.WritDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WritDept)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WritDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WritDocID");

                entity.Property(e => e.WritEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("WritEDate");

                entity.Property(e => e.WritPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WritSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WritSumCC");
            });

            modelBuilder.Entity<PEwrk>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_EWrk");

                entity.ToTable("p_EWrk", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PEwrk1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EWrks", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");
            });

            modelBuilder.Entity<PEwrkD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.EmpId, e.WrkId })
                    .HasName("_pk_p_EWrkD");

                entity.ToTable("p_EWrkD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.HasIndex(e => e.WrkId, "WrkID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.WrkId).HasColumnName("WrkID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<PEwrksE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_EWrksE", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.WrkId).HasColumnName("WrkID");
            });

            modelBuilder.Entity<PLeaveSched>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.DocId })
                    .HasName("pk_p_LeaveSched")
                    .IsClustered(false);

                entity.ToTable("p_LeaveSched", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLeaveSched1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LeaveScheds", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OurName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLeaveSchedD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.LeavType })
                    .HasName("pk_p_LeaveSchedD")
                    .IsClustered(false);

                entity.ToTable("p_LeaveSchedD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.LeavType, "LeavType");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.AgeBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("AgeBDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<PLexc>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_LExc")
                    .IsClustered(false);

                entity.ToTable("p_LExc", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.ExcDate, "ExcDate");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PLexc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LExcs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.ExcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TempCount).HasColumnName("TEmpCount");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PLexcD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.EmpId })
                    .HasName("_pk_p_LExcD")
                    .IsClustered(false);

                entity.ToTable("p_LExcD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.ShedId, "ShedID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.HasIndex(e => new { e.PostId, e.EmpClass }, "r_PostMCp_LExcD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.ContrEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ContrEDate");

                entity.Property(e => e.ContractFile)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DecreeEmpId).HasColumnName("DecreeEmpID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.GempType).HasColumnName("GEmpType");

                entity.Property(e => e.IndexBaseMonth).HasColumnType("smalldatetime");

                entity.Property(e => e.PensCatId)
                    .HasColumnName("PensCatID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PensMethod).HasDefaultValueSql("(1)");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.StrucPostId).HasColumnName("StrucPostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubJob)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLexcsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LExcsE", "dbo");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PensCatId).HasColumnName("PensCatID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubJob)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PLexp>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_LExp")
                    .IsClustered(false);

                entity.ToTable("p_LExp", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AccDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LexpForm).HasColumnName("LExpForm");

                entity.Property(e => e.LexpPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpPrc");

                entity.Property(e => e.LexpType).HasColumnName("LExpType");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LExps", "dbo");

                entity.Property(e => e.AccDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LexpForm).HasColumnName("LExpForm");

                entity.Property(e => e.LexpPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpPrc");

                entity.Property(e => e.LexpType).HasColumnName("LExpType");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TlarrSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TLArrSumCC");

                entity.Property(e => e.TldepSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TLDepSumCC");

                entity.Property(e => e.TlexpSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TLExpSumCC");

                entity.Property(e => e.TlrecSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TLRecSumCC");
            });

            modelBuilder.Entity<PLexpD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.EmpId })
                    .HasName("_pk_p_LExpD")
                    .IsClustered(false);

                entity.ToTable("p_LExpD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.LexpSumCc, "LExpSumCC");

                entity.HasIndex(e => e.LrecSumCc, "LRecSumCC");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.LarrSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LArrSumCC");

                entity.Property(e => e.LdepSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LDepSumCC");

                entity.Property(e => e.LexpSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpSumCC");

                entity.Property(e => e.LrecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LRecSumCC");

                entity.Property(e => e.SubId).HasColumnName("SubID");
            });

            modelBuilder.Entity<PLexpsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LExpsE", "dbo");

                entity.Property(e => e.AccDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LarrSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LArrSumCC");

                entity.Property(e => e.LdepSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LDepSumCC");

                entity.Property(e => e.LexpForm).HasColumnName("LExpForm");

                entity.Property(e => e.LexpPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpPrc");

                entity.Property(e => e.LexpSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LExpSumCC");

                entity.Property(e => e.LexpType).HasColumnName("LExpType");

                entity.Property(e => e.LrecSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LRecSumCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");
            });

            modelBuilder.Entity<PLmem>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_LMem")
                    .IsClustered(false);

                entity.ToTable("p_LMem", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OrderDocId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("OrderDocID");
            });

            modelBuilder.Entity<PLmem1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LMems", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TvacFree)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TVacFree");

                entity.Property(e => e.TvacOcc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TVacOcc");

                entity.Property(e => e.TvacTotal)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TVacTotal");
            });

            modelBuilder.Entity<PLmemD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_p_LMemD")
                    .IsClustered(false);

                entity.ToTable("p_LMemD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.PostId, "PostID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BextraSalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BExtraSalary");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.VacOcc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.VacTotal).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<PLrec>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_LRec")
                    .IsClustered(false);

                entity.ToTable("p_LRec", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LrecType).HasColumnName("LRecType");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PLrec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LRecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TbincomeTaxCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBIncomeTaxCC");

                entity.Property(e => e.TbmilitaryTaxCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBMilitaryTaxCC");

                entity.Property(e => e.TbpensCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBPensCC");

                entity.Property(e => e.TbsocInsureCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBSocInsureCC");

                entity.Property(e => e.TbtotAccidentCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBTotAccidentCC");

                entity.Property(e => e.TbtotPensCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBTotPensCC");

                entity.Property(e => e.TbtotSocInsureCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBTotSocInsureCC");

                entity.Property(e => e.TbtotUnEmployCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBTotUnEmployCC");

                entity.Property(e => e.TbunEmployCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBUnEmployCC");

                entity.Property(e => e.TbuniSocDedСс)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TBUniSocDedСС");

                entity.Property(e => e.TchargeSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TChargeSumCC");

                entity.Property(e => e.TdeductionSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TDeductionSumCC");

                entity.Property(e => e.TextraSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TExtraSumCC");

                entity.Property(e => e.TfondSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TFondSumCC");

                entity.Property(e => e.TincomeTaxCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TIncomeTaxCC");

                entity.Property(e => e.TmainSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TMainSumCC");

                entity.Property(e => e.TmilitaryTaxCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TMilitaryTaxCC");

                entity.Property(e => e.TmoreSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TMoreSumCC");

                entity.Property(e => e.TneglibleSumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TNeglibleSumCC");

                entity.Property(e => e.TpensCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TPensCC");

                entity.Property(e => e.TsocInsureCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSocInsureCC");

                entity.Property(e => e.TtotAccidentCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTotAccidentCC");

                entity.Property(e => e.TtotPensCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTotPensCC");

                entity.Property(e => e.TtotSocInsureCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTotSocInsureCC");

                entity.Property(e => e.TtotUnEmployCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTotUnEmployCC");

                entity.Property(e => e.TunEmployCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TUnEmployCC");

                entity.Property(e => e.TuniSocDedСс)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TUniSocDedСС");
            });

            modelBuilder.Entity<PLrecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_p_LRecD")
                    .IsClustered(false);

                entity.ToTable("p_LRecD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DetDepId, "DetDepID");

                entity.HasIndex(e => e.DetSubId, "DetSubID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.BincomeTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BIncomeTaxCC");

                entity.Property(e => e.Bindexing)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BIndexing");

                entity.Property(e => e.BmilitaryTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BMilitaryTaxCC");

                entity.Property(e => e.BpensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BPensCC");

                entity.Property(e => e.BprivIncomeTax).HasColumnName("BPrivIncomeTax");

                entity.Property(e => e.BsocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSocInsureCC");

                entity.Property(e => e.BtotAccidentCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotAccidentCC");

                entity.Property(e => e.BtotPensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotPensCC");

                entity.Property(e => e.BtotSocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotSocInsureCC");

                entity.Property(e => e.BtotUnEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotUnEmployCC");

                entity.Property(e => e.BunEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BUnEmployCC");

                entity.Property(e => e.BuniSocChargeСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BUniSocChargeСС");

                entity.Property(e => e.BuniSocDedСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BUniSocDedСС");

                entity.Property(e => e.ChargeSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChargeSumCC");

                entity.Property(e => e.CrateCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CRateCC");

                entity.Property(e => e.DeductionSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DeductionSumCC");

                entity.Property(e => e.DetDepId).HasColumnName("DetDepID");

                entity.Property(e => e.DetSubId).HasColumnName("DetSubID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExtraSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraSumCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.IncomeTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IncomeTaxCC");

                entity.Property(e => e.MainSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MainSumCC");

                entity.Property(e => e.MilitaryTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MilitaryTaxCC");

                entity.Property(e => e.MoreSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreSumCC");

                entity.Property(e => e.NeglibleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NeglibleSumCC");

                entity.Property(e => e.PensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PensCC");

                entity.Property(e => e.SocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SocInsureCC");

                entity.Property(e => e.TincomeTaxCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TIncomeTaxCCCor");

                entity.Property(e => e.TmilitaryTaxCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMilitaryTaxCCCor");

                entity.Property(e => e.TotAccidentCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotAccidentCC");

                entity.Property(e => e.TotPensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotPensCC");

                entity.Property(e => e.TotSocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotSocInsureCC");

                entity.Property(e => e.TotUnEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotUnEmployCC");

                entity.Property(e => e.TpensCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPensCCCor");

                entity.Property(e => e.TsocInsureCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSocInsureCCCor");

                entity.Property(e => e.TtotAccidentCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTotAccidentCCCor");

                entity.Property(e => e.TtotPensCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTotPensCCCor");

                entity.Property(e => e.TtotSocInsureCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTotSocInsureCCCor");

                entity.Property(e => e.TtotUnEmployCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTotUnEmployCCCor");

                entity.Property(e => e.TunEmployCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TUnEmployCCCor");

                entity.Property(e => e.TuniSocChargeСсcor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TUniSocChargeССCor");

                entity.Property(e => e.TuniSocDedСсcor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TUniSocDedССCor");

                entity.Property(e => e.UnEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnEmployCC");

                entity.Property(e => e.UniSocChargeСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocChargeСС");

                entity.Property(e => e.UniSocDedСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocDedСС");
            });

            modelBuilder.Entity<PLrecDcor>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DetSrcPosId })
                    .HasName("pk_p_LRecDCor");

                entity.ToTable("p_LRecDCor", "dbo");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.MonthId).HasColumnName("MonthID");

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.YearId).HasColumnName("YearID");
            });

            modelBuilder.Entity<PLrecDcorCr>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DetSrcPosId })
                    .HasName("pk_p_LRecDCorCR");

                entity.ToTable("p_LRecDCorCR", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.IncomeTaxCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IncomeTaxCCCor");

                entity.Property(e => e.MilitaryTaxCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MilitaryTaxCCCor");

                entity.Property(e => e.MonthId).HasColumnName("MonthID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PensCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PensCCCor");

                entity.Property(e => e.SocInsureCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SocInsureCCCor");

                entity.Property(e => e.TotAccidentCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotAccidentCCCor");

                entity.Property(e => e.TotPensCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotPensCCCor");

                entity.Property(e => e.TotSocInsureCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotSocInsureCCCor");

                entity.Property(e => e.TotUnEmployCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotUnEmployCCCor");

                entity.Property(e => e.UnEmployCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnEmployCCCor");

                entity.Property(e => e.UniSocChargeСсcor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocChargeССCor");

                entity.Property(e => e.UniSocDedСсcor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocDedССCor");

                entity.Property(e => e.YearId).HasColumnName("YearID");
            });

            modelBuilder.Entity<PLrecDd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DetSrcPosId })
                    .HasName("_pk_p_LRecDD")
                    .IsClustered(false);

                entity.ToTable("p_LRecDD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.HasIndex(e => e.PayTypeId, "PayTypeID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.BincomeTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BIncomeTaxCC");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.UniSocChargeRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UniSocChargeСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocChargeСС");

                entity.Property(e => e.UniSocDedRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UniSocDedСс)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UniSocDedСС");
            });

            modelBuilder.Entity<PLrecDdsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LRecDDsE", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DetDepId).HasColumnName("DetDepID");

                entity.Property(e => e.DetSubId).HasColumnName("DetSubID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<PLrecsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LRecsE", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.BincomeTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BIncomeTaxCC");

                entity.Property(e => e.Bindexing)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BIndexing");

                entity.Property(e => e.BpensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BPensCC");

                entity.Property(e => e.BprivIncomeTax).HasColumnName("BPrivIncomeTax");

                entity.Property(e => e.BsocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSocInsureCC");

                entity.Property(e => e.BtotAccidentCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotAccidentCC");

                entity.Property(e => e.BtotPensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotPensCC");

                entity.Property(e => e.BtotSocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotSocInsureCC");

                entity.Property(e => e.BtotUnEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BTotUnEmployCC");

                entity.Property(e => e.BunEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BUnEmployCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChargeSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChargeSumCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DeductionSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DeductionSumCC");

                entity.Property(e => e.DetDepId).HasColumnName("DetDepID");

                entity.Property(e => e.DetSubId).HasColumnName("DetSubID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExtraSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExtraSumCC");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.GtranId).HasColumnName("GTranID");

                entity.Property(e => e.IncomeTaxCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IncomeTaxCC");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MainSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MainSumCC");

                entity.Property(e => e.MoreSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreSumCC");

                entity.Property(e => e.NeglibleSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NeglibleSumCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PensCC");

                entity.Property(e => e.SocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SocInsureCC");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.TotAccidentCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotAccidentCC");

                entity.Property(e => e.TotPensCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotPensCC");

                entity.Property(e => e.TotSocInsureCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotSocInsureCC");

                entity.Property(e => e.TotUnEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TotUnEmployCC");

                entity.Property(e => e.UnEmployCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("UnEmployCC");
            });

            modelBuilder.Entity<PLstr>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_LStr")
                    .IsClustered(false);

                entity.ToTable("p_LStr", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubId).HasColumnName("SubID");
            });

            modelBuilder.Entity<PLstr1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_LStrs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TempCount).HasColumnName("TEmpCount");
            });

            modelBuilder.Entity<PLstrD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_p_LStrD")
                    .IsClustered(false);

                entity.ToTable("p_LStrD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.PostId, "PostID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.PostId).HasColumnName("PostID");
            });

            modelBuilder.Entity<POpwrk>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_OPWrk");

                entity.ToTable("p_OPWrk", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayTypeId, "PayTypeID");

                entity.HasIndex(e => e.WorderId, "WOrderID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<POpwrk1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_OPWrks", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TrewCount).HasColumnName("TRewCount");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<POpwrkD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_p_OPWrkD");

                entity.ToTable("p_OPWrkD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SumExpE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumExpR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<POpwrksE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_OPWrksE", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SumExpE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumExpR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PPostStruc>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("pk_p_PostStruc")
                    .IsClustered(false);

                entity.ToTable("p_PostStruc", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OrderDocId, "OrderDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StateCode, "StateCode");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderDocID");
            });

            modelBuilder.Entity<PPostStruc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_PostStrucs", "dbo");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TpostCount).HasColumnName("TPostCount");
            });

            modelBuilder.Entity<PPostStrucD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.StrucPostId })
                    .HasName("pk_p_PostStrucD")
                    .IsClustered(false);

                entity.ToTable("p_PostStrucD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.PostId, "PostID");

                entity.HasIndex(e => e.StrucParentPostId, "StrucParentPostID");

                entity.HasIndex(e => e.StrucPostId, "StrucPostID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StrucPostId).HasColumnName("StrucPostID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StrucParentPostId).HasColumnName("StrucParentPostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.VacFree).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.VacOcc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.VacTotal).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<PPostStrucEdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_PostStrucEDate", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OurName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.PostName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StrucPostId).HasColumnName("StrucPostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.SubName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PSubStruc>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("pk_p_SubStruc")
                    .IsClustered(false);

                entity.ToTable("p_SubStruc", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OrderDocId, "OrderDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StateCode, "StateCode");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderDocID");
            });

            modelBuilder.Entity<PSubStruc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_SubStrucs", "dbo");

                entity.Property(e => e.AppDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TsubCount).HasColumnName("TSubCount");
            });

            modelBuilder.Entity<PSubStrucD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SubId, e.ParentSubId })
                    .HasName("pk_p_SubStrucD")
                    .IsClustered(false);

                entity.ToTable("p_SubStrucD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Notes, "Notes");

                entity.HasIndex(e => e.ParentSubId, "ParentSubID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.ParentSubId).HasColumnName("ParentSubID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<PTser>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_TSer")
                    .IsClustered(false);

                entity.ToTable("p_TSer", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AdvDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TextraBenefitCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExtraBenefitCC");

                entity.Property(e => e.TrecCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRecCC");

                entity.Property(e => e.TretCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRetCC");
            });

            modelBuilder.Entity<PTser1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_TSers", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.TripBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripBDate");

                entity.Property(e => e.TripEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripEDate");

                entity.Property(e => e.TripPurpose)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PTserD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_p_TSerD")
                    .IsClustered(false);

                entity.ToTable("p_TSerD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ArrivalPlace)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LeavePlace)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PTsersE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_TSersE", "dbo");

                entity.Property(e => e.AdvDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TextraBenefitCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TExtraBenefitCC");

                entity.Property(e => e.TrecCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRecCC");

                entity.Property(e => e.TretCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRetCC");

                entity.Property(e => e.TripBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripBDate");

                entity.Property(e => e.TripEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TripEDate");
            });

            modelBuilder.Entity<PWexc>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_p_WExc")
                    .IsClustered(false);

                entity.ToTable("p_WExc", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.HasIndex(e => new { e.PostId, e.EmpClass }, "r_PostMCp_WExc");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExcBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ExcBDate");

                entity.Property(e => e.ExcEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ExcEDate");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<PWexc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("p_WExcs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExcBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ExcBDate");

                entity.Property(e => e.ExcEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ExcEDate");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WorderId).HasColumnName("WOrderID");
            });

            modelBuilder.Entity<ProductInBonusOnDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProductInBonus_OnDate", "dashboard");

                entity.HasIndex(e => new { e.OnDate, e.ProdId }, "Ix_ProductInBonus_OnDate")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.OnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<QaAchievement>(entity =>
            {
                entity.ToTable("qa_achievement", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateFrom).HasColumnType("date");

                entity.Property(e => e.DateTo).HasColumnType("date");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QaLog>(entity =>
            {
                entity.ToTable("qa_Logs", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CameraNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Start)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Stock)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Time)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalQty).HasColumnType("numeric(8, 2)");
            });

            modelBuilder.Entity<QaLogsD>(entity =>
            {
                entity.ToTable("qa_LogsD", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ExcDocId).HasColumnName("ExcDocID");

                entity.Property(e => e.LinkedDocId).HasColumnName("LinkedDocID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.NewQty).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.OldQty).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<QaSession>(entity =>
            {
                entity.ToTable("qa_Session", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CameraNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("date");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<QaSessionD>(entity =>
            {
                entity.ToTable("qa_SessionD", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.QtyQa).HasColumnName("QtyQA");
            });

            modelBuilder.Entity<QaType>(entity =>
            {
                entity.ToTable("qa_Types", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RAsset>(entity =>
            {
                entity.HasKey(e => e.AssId)
                    .HasName("pk_r_Assets");

                entity.ToTable("r_Assets", "dbo");

                entity.HasIndex(e => e.AssDate, "AssDate");

                entity.HasIndex(e => e.AssName, "AssName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.AssId)
                    .ValueGeneratedNever()
                    .HasColumnName("AssID");

                entity.Property(e => e.AssDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AssName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FacID");

                entity.Property(e => e.IntId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<RAssetC>(entity =>
            {
                entity.HasKey(e => e.AcatId)
                    .HasName("pk_r_AssetC");

                entity.ToTable("r_AssetC", "dbo");

                entity.HasIndex(e => e.AcatName, "ACatName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.AcatId)
                    .ValueGeneratedNever()
                    .HasColumnName("ACatID");

                entity.Property(e => e.AcatName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACatName");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RAssetG>(entity =>
            {
                entity.HasKey(e => e.AgrId)
                    .HasName("pk_r_AssetG");

                entity.ToTable("r_AssetG", "dbo");

                entity.HasIndex(e => e.AgrName, "AGrName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.AgrId)
                    .ValueGeneratedNever()
                    .HasColumnName("AGrID");

                entity.Property(e => e.AgrId1).HasColumnName("AGrID1");

                entity.Property(e => e.AgrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AGrName");

                entity.Property(e => e.AssDepGaccId).HasColumnName("AssDepGAccID");

                entity.Property(e => e.AssGrGaccId).HasColumnName("AssGrGAccID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RAssetG1>(entity =>
            {
                entity.HasKey(e => e.AgrId1)
                    .HasName("pk_r_AssetG1");

                entity.ToTable("r_AssetG1", "dbo");

                entity.HasIndex(e => e.AgrName1, "AGrName1")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.AgrId1)
                    .ValueGeneratedNever()
                    .HasColumnName("AGrID1");

                entity.Property(e => e.AgrName1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AGrName1");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RAssetGdep>(entity =>
            {
                entity.HasKey(e => new { e.AgrId, e.DocDate })
                    .HasName("pk_r_AssetGDeps")
                    .IsClustered(false);

                entity.ToTable("r_AssetGDeps", "dbo");

                entity.Property(e => e.AgrId).HasColumnName("AGrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Apercent)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("APercent");
            });

            modelBuilder.Entity<RAssetH>(entity =>
            {
                entity.HasKey(e => new { e.AssId, e.Bdate })
                    .HasName("pk_r_AssetH");

                entity.ToTable("r_AssetH", "dbo");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.AcatId).HasColumnName("ACatID");

                entity.Property(e => e.Age).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.AgrId).HasColumnName("AGrID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.DepSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DepSumCC_nt");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GaccId).HasColumnName("GAccID");

                entity.Property(e => e.GenQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LiqPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LiqPriceCC_nt");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.RepSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RepSumCC_nt");

                entity.Property(e => e.SupPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SupPriceCC_nt");

                entity.Property(e => e.WerSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("WerSumCC_nt");
            });

            modelBuilder.Entity<RBank>(entity =>
            {
                entity.HasKey(e => e.BankId)
                    .HasName("pk_r_Banks");

                entity.ToTable("r_Banks", "dbo");

                entity.HasIndex(e => e.BankName, "BankName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.City, "City");

                entity.Property(e => e.BankId)
                    .ValueGeneratedNever()
                    .HasColumnName("BankID");

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BankGrId).HasColumnName("BankGrID");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PostIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Swiftbiccode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SWIFTBICCode");
            });

            modelBuilder.Entity<RBankGr>(entity =>
            {
                entity.HasKey(e => e.BankGrId)
                    .HasName("pk_r_BankGrs");

                entity.ToTable("r_BankGrs", "dbo");

                entity.HasIndex(e => e.BankGrName, "BankGrName")
                    .IsUnique();

                entity.Property(e => e.BankGrId)
                    .ValueGeneratedNever()
                    .HasColumnName("BankGrID");

                entity.Property(e => e.BankGrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RBserv>(entity =>
            {
                entity.HasKey(e => e.BservId)
                    .HasName("pk_r_BServs");

                entity.ToTable("r_BServs", "dbo");

                entity.HasIndex(e => e.BservName, "BServName")
                    .IsUnique();

                entity.Property(e => e.BservId)
                    .ValueGeneratedNever()
                    .HasColumnName("BServID");

                entity.Property(e => e.BankGrId).HasColumnName("BankGrID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.BservName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BServName");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PosbservId).HasColumnName("POSBServID");
            });

            modelBuilder.Entity<RBservParam>(entity =>
            {
                entity.HasKey(e => new { e.BservId, e.SrcPosId })
                    .HasName("pk_r_BServParams");

                entity.ToTable("r_BServParams", "dbo");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PcatFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PCatFilter");

                entity.Property(e => e.Pgr1Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr1Filter");

                entity.Property(e => e.Pgr2Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr2Filter");

                entity.Property(e => e.Pgr3Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr3Filter");

                entity.Property(e => e.PgrFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGrFilter");

                entity.Property(e => e.PprodFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PProdFilter");
            });

            modelBuilder.Entity<RBservProd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("r_BServProds", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<RCandidate>(entity =>
            {
                entity.HasKey(e => e.CandidateId)
                    .HasName("pk_r_Candidates")
                    .IsClustered(false);

                entity.ToTable("r_Candidates", "dbo");

                entity.Property(e => e.CandidateId)
                    .ValueGeneratedNever()
                    .HasColumnName("CandidateID");

                entity.Property(e => e.CandidateName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CheckAo).HasColumnName("CheckAO");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.InterviewDate).HasColumnType("datetime");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PostName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ResultCheckAo).HasColumnName("ResultCheckAO");

                entity.Property(e => e.SkillName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TagCname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TagCName");

                entity.Property(e => e.TagName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UacandidateName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UACandidateName");
            });

            modelBuilder.Entity<RCandidateFile>(entity =>
            {
                entity.HasKey(e => new { e.CandidateId, e.SrcPosId })
                    .HasName("pk_r_CandidateFiles")
                    .IsClustered(false);

                entity.ToTable("r_CandidateFiles", "dbo");

                entity.HasIndex(e => e.CandidateId, "CandidateID");

                entity.HasIndex(e => e.EmpDocId, "EmpDocID");

                entity.HasIndex(e => e.FileDate, "FileDate");

                entity.HasIndex(e => e.FileId, "FileID");

                entity.Property(e => e.CandidateId).HasColumnName("CandidateID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EmpDocId).HasColumnName("EmpDocID");

                entity.Property(e => e.FileDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCarr>(entity =>
            {
                entity.HasKey(e => e.CarrId)
                    .HasName("pk_r_Carrs");

                entity.ToTable("r_Carrs", "dbo");

                entity.HasIndex(e => e.AssId, "AssID");

                entity.HasIndex(e => e.CarrCid, "CarrCID");

                entity.HasIndex(e => e.CarrName, "CarrName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.Property(e => e.CarrId)
                    .ValueGeneratedNever()
                    .HasColumnName("CarrID");

                entity.Property(e => e.AssId).HasColumnName("AssID");

                entity.Property(e => e.BodyNo)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CarMark)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CarModel)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CarrCid).HasColumnName("CarrCID");

                entity.Property(e => e.CarrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ExpNorm).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GarageNo)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.MotorNo)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.StateRegNo)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.TechnMass).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TechnNo)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Tonnage).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RCarrsC>(entity =>
            {
                entity.HasKey(e => e.CarrCid)
                    .HasName("pk_r_CarrsC");

                entity.ToTable("r_CarrsC", "dbo");

                entity.HasIndex(e => e.CarrCname, "CarrCName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.CarrCid)
                    .ValueGeneratedNever()
                    .HasColumnName("CarrCID");

                entity.Property(e => e.CarrCname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CarrCName");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCodes1>(entity =>
            {
                entity.HasKey(e => e.CodeId1)
                    .HasName("pk_r_Codes1");

                entity.ToTable("r_Codes1", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeName1, "CodeName1")
                    .IsUnique();

                entity.Property(e => e.CodeId1)
                    .ValueGeneratedNever()
                    .HasColumnName("CodeID1");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCodes2>(entity =>
            {
                entity.HasKey(e => e.CodeId2)
                    .HasName("pk_r_Codes2");

                entity.ToTable("r_Codes2", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeName2, "CodeName2")
                    .IsUnique();

                entity.Property(e => e.CodeId2)
                    .ValueGeneratedNever()
                    .HasColumnName("CodeID2");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Enshop).HasColumnName("ENShop");

                entity.Property(e => e.IsdocDis).HasColumnName("ISDocDis");

                entity.Property(e => e.IsdocExc).HasColumnName("ISDocExc");

                entity.Property(e => e.IsdocRec).HasColumnName("ISDocRec");

                entity.Property(e => e.IsregExc).HasColumnName("ISRegExc");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCodes3>(entity =>
            {
                entity.HasKey(e => e.CodeId3)
                    .HasName("pk_r_Codes3");

                entity.ToTable("r_Codes3", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeName3, "CodeName3")
                    .IsUnique();

                entity.Property(e => e.CodeId3)
                    .ValueGeneratedNever()
                    .HasColumnName("CodeID3");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCodes4>(entity =>
            {
                entity.HasKey(e => e.CodeId4)
                    .HasName("pk_r_Codes4");

                entity.ToTable("r_Codes4", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeName4, "CodeName4")
                    .IsUnique();

                entity.Property(e => e.CodeId4)
                    .ValueGeneratedNever()
                    .HasColumnName("CodeID4");

                entity.Property(e => e.BitrixUserId).HasColumnName("bitrix_user_id");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCodes5>(entity =>
            {
                entity.HasKey(e => e.CodeId5)
                    .HasName("pk_r_Codes5");

                entity.ToTable("r_Codes5", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeName5, "CodeName5")
                    .IsUnique();

                entity.Property(e => e.CodeId5)
                    .ValueGeneratedNever()
                    .HasColumnName("CodeID5");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCodes6>(entity =>
            {
                entity.HasKey(e => e.CodeId6)
                    .HasName("pk_r_Codes6");

                entity.ToTable("r_Codes6", "dbo");

                entity.Property(e => e.CodeId6)
                    .ValueGeneratedNever()
                    .HasColumnName("CodeID6");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeName6)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RComp>(entity =>
            {
                entity.HasKey(e => e.CompId)
                    .HasName("pk_r_Comps");

                entity.ToTable("r_Comps", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.Code, "Code");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompName, "CompName");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => new { e.CompName, e.Code }, "NoDuplicates")
                    .IsUnique();

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => new { e.CompId, e.CompName }, "ReportPerf");

                entity.HasIndex(e => e.TaxCode, "TaxCode");

                entity.HasIndex(e => e.TaxRegNo, "TaxRegNo");

                entity.Property(e => e.CompId)
                    .ValueGeneratedNever()
                    .HasColumnName("CompID");

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompGrId1).HasColumnName("CompGrID1");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompGrId3).HasColumnName("CompGrID3");

                entity.Property(e => e.CompGrId4).HasColumnName("CompGrID4");

                entity.Property(e => e.CompGrId5).HasColumnName("CompGrID5");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompNameFull)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CompShort)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Contract1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Contract2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Contract3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FixTaxPercent).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Http)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("HTTP");

                entity.Property(e => e.IsResident).HasDefaultValueSql("((1))");

                entity.Property(e => e.Job1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Job2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Job3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.License1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.License2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.License3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MaxCredit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MorePrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PassDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassDept)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PassNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PassSer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PostIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonRegCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TranPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UsePl).HasColumnName("UsePL");

                entity.Property(e => e.Value1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value3).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RCompContact>(entity =>
            {
                entity.HasKey(e => new { e.CompId, e.Contact })
                    .HasName("pk_r_CompContacts")
                    .IsClustered(false);

                entity.ToTable("r_CompContacts", "dbo");

                entity.HasIndex(e => e.Contact, "Contact");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Contact)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EMail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("eMail");

                entity.Property(e => e.Job)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneHome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneMob)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneWork)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Comp)
                    .WithMany(p => p.RCompContacts)
                    .HasForeignKey(d => d.CompId)
                    .HasConstraintName("FK_r_CompContacts_r_Comps");
            });

            modelBuilder.Entity<RCompG>(entity =>
            {
                entity.HasKey(e => e.CgrId)
                    .HasName("pk_r_CompG");

                entity.ToTable("r_CompG", "dbo");

                entity.HasIndex(e => e.CgrName, "CGrName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.CgrId)
                    .ValueGeneratedNever()
                    .HasColumnName("CGrID");

                entity.Property(e => e.CgrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CGrName");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompGrs1>(entity =>
            {
                entity.HasKey(e => e.CompGrId1)
                    .HasName("pk_r_CompGrs1");

                entity.ToTable("r_CompGrs1", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CompGrName1, "CompGrName1")
                    .IsUnique();

                entity.Property(e => e.CompGrId1)
                    .ValueGeneratedNever()
                    .HasColumnName("CompGrID1");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompGrName1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompGrs2>(entity =>
            {
                entity.HasKey(e => e.CompGrId2)
                    .HasName("pk_r_CompGrs2");

                entity.ToTable("r_CompGrs2", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CompGrName2, "CompGrName2")
                    .IsUnique();

                entity.Property(e => e.CompGrId2)
                    .ValueGeneratedNever()
                    .HasColumnName("CompGrID2");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompGrName2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompGrs3>(entity =>
            {
                entity.HasKey(e => e.CompGrId3)
                    .HasName("pk_r_CompGrs3");

                entity.ToTable("r_CompGrs3", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CompGrName3, "CompGrName3")
                    .IsUnique();

                entity.Property(e => e.CompGrId3)
                    .ValueGeneratedNever()
                    .HasColumnName("CompGrID3");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompGrName3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompGrs4>(entity =>
            {
                entity.HasKey(e => e.CompGrId4)
                    .HasName("pk_r_CompGrs4");

                entity.ToTable("r_CompGrs4", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CompGrName4, "CompGrName4")
                    .IsUnique();

                entity.Property(e => e.CompGrId4)
                    .ValueGeneratedNever()
                    .HasColumnName("CompGrID4");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompGrName4)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompGrs5>(entity =>
            {
                entity.HasKey(e => e.CompGrId5)
                    .HasName("pk_r_CompGrs5");

                entity.ToTable("r_CompGrs5", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CompGrName5, "CompGrName5")
                    .IsUnique();

                entity.Property(e => e.CompGrId5)
                    .ValueGeneratedNever()
                    .HasColumnName("CompGrID5");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CompGrName5)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompMg>(entity =>
            {
                entity.HasKey(e => new { e.CgrId, e.CompId })
                    .HasName("_pk_r_CompMG")
                    .IsClustered(false);

                entity.ToTable("r_CompMG", "dbo");

                entity.HasIndex(e => e.CgrId, "CGrID");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.Property(e => e.CgrId).HasColumnName("CGrID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompValue>(entity =>
            {
                entity.HasKey(e => new { e.CompId, e.VarName })
                    .HasName("pk_r_CompValues")
                    .IsClustered(false);

                entity.ToTable("r_CompValues", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.VarName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarValue)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Comp)
                    .WithMany(p => p.RCompValues)
                    .HasForeignKey(d => d.CompId)
                    .HasConstraintName("FK_r_CompValues_r_Comps");
            });

            modelBuilder.Entity<RCompsAc>(entity =>
            {
                entity.HasKey(e => new { e.CompId, e.CompAccountAc })
                    .HasName("_pk_r_CompsAC")
                    .IsClustered(false);

                entity.ToTable("r_CompsAC", "dbo");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompAccountAc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.Ibancode)
                    .HasMaxLength(34)
                    .IsUnicode(false)
                    .HasColumnName("IBANCode");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompsAdd>(entity =>
            {
                entity.HasKey(e => new { e.CompAdd, e.CompId })
                    .HasName("_pk_r_CompsAdd");

                entity.ToTable("r_CompsAdd", "dbo");

                entity.HasIndex(e => e.CompAdd, "CompAdd");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompAddDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCompsCc>(entity =>
            {
                entity.HasKey(e => new { e.CompId, e.CompAccountCc })
                    .HasName("_pk_r_CompsCC")
                    .IsClustered(false);

                entity.ToTable("r_CompsCC", "dbo");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.CompAccountCc, "CompAccountCC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompAccountCc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountCC");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.Ibancode)
                    .HasMaxLength(34)
                    .IsUnicode(false)
                    .HasColumnName("IBANCode");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCountry>(entity =>
            {
                entity.HasKey(e => e.CounId)
                    .HasName("pk_r_Countries")
                    .IsClustered(false);

                entity.ToTable("r_Countries", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.CounId)
                    .ValueGeneratedNever()
                    .HasColumnName("CounID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode2)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CountryCode3)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Uacountry)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UACountry");
            });

            modelBuilder.Entity<RCr>(entity =>
            {
                entity.HasKey(e => e.Crid)
                    .HasName("pk_r_CRs");

                entity.ToTable("r_CRs", "dbo");

                entity.HasIndex(e => e.Crcode, "CRCode");

                entity.HasIndex(e => e.Crname, "CRName")
                    .IsUnique();

                entity.HasIndex(e => e.Crport, "CRPort");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.FacId, "FacID");

                entity.HasIndex(e => e.FinId, "FinID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SrvId, "SrvID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.Crid)
                    .ValueGeneratedNever()
                    .HasColumnName("CRID");

                entity.Property(e => e.BackupCrjournalAfterChequeType).HasColumnName("BackupCRJournalAfterChequeType");

                entity.Property(e => e.BackupCrjournalAfterZreport).HasColumnName("BackupCRJournalAfterZReport");

                entity.Property(e => e.BackupCrjournalChequeTimeout).HasColumnName("BackupCRJournalChequeTimeout");

                entity.Property(e => e.BackupCrjournalExecTime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BackupCRJournalExecTime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BackupCrjournalInTime).HasColumnName("BackupCRJournalInTime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Crcode).HasColumnName("CRCode");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.Crport).HasColumnName("CRPort");

                entity.Property(e => e.FacId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FacID");

                entity.Property(e => e.FinId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FinID");

                entity.Property(e => e.GroupProds)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Ip)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Ledtype).HasColumnName("LEDType");

                entity.Property(e => e.ModemId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ModemID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrvId).HasColumnName("SrvID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.UseStockPl).HasColumnName("UseStockPL");
            });

            modelBuilder.Entity<RCrdeskG>(entity =>
            {
                entity.HasKey(e => new { e.Wpid, e.DeskGcode })
                    .HasName("pk_r_CRDeskG")
                    .IsClustered(false);

                entity.ToTable("r_CRDeskG", "dbo");

                entity.Property(e => e.Wpid).HasColumnName("WPID");

                entity.Property(e => e.DeskGcode).HasColumnName("DeskGCode");

                entity.HasOne(d => d.DeskGcodeNavigation)
                    .WithMany(p => p.RCrdeskGs)
                    .HasForeignKey(d => d.DeskGcode)
                    .HasConstraintName("FK_r_CRDeskG_r_DeskG");
            });

            modelBuilder.Entity<RCrmm>(entity =>
            {
                entity.HasKey(e => new { e.WproleId, e.MpayDesc })
                    .HasName("pk_r_CRMM")
                    .IsClustered(false);

                entity.ToTable("r_CRMM", "dbo");

                entity.HasIndex(e => e.MpayDesc, "MPayDesc");

                entity.Property(e => e.WproleId).HasColumnName("WPRoleID");

                entity.Property(e => e.MpayDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MPayDesc");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");
            });

            modelBuilder.Entity<RCrmp>(entity =>
            {
                entity.HasKey(e => new { e.Crid, e.CrprodId })
                    .HasName("_pk_r_CRMP")
                    .IsClustered(false);

                entity.ToTable("r_CRMP", "dbo");

                entity.HasIndex(e => e.Crid, "CRID");

                entity.HasIndex(e => e.CrprodId, "CRProdID");

                entity.HasIndex(e => e.CrprodName, "CRProdName");

                entity.HasIndex(e => e.PriceCc, "PriceCC");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.TaxId, "TaxID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.CrprodId).HasColumnName("CRProdID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CrprodName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRProdName");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.TaxId).HasColumnName("TaxID");
            });

            modelBuilder.Entity<RCrpospay>(entity =>
            {
                entity.HasKey(e => new { e.Wpid, e.PospayId })
                    .HasName("pk_r_CRPosPays")
                    .IsClustered(false);

                entity.ToTable("r_CRPOSPays", "dbo");

                entity.HasIndex(e => e.PospayId, "POSPayID");

                entity.Property(e => e.Wpid).HasColumnName("WPID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");
            });

            modelBuilder.Entity<RCrshed>(entity =>
            {
                entity.HasKey(e => new { e.Crid, e.SrcPosId })
                    .HasName("pk_r_CRShed")
                    .IsClustered(false);

                entity.ToTable("r_CRShed", "dbo");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Shed)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseSched)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RCrsrv>(entity =>
            {
                entity.HasKey(e => e.SrvId)
                    .HasName("pk_r_CRSrvs");

                entity.ToTable("r_CRSrvs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.SrvName, "SrvName")
                    .IsUnique();

                entity.Property(e => e.SrvId).HasColumnName("SrvID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrvName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCruniInput>(entity =>
            {
                entity.HasKey(e => e.UniInputCode)
                    .HasName("pk_r_CRUniInput")
                    .IsClustered(false);

                entity.ToTable("r_CRUniInput", "dbo");

                entity.HasIndex(e => new { e.UniInputCode, e.UniInputAction, e.UniInputMask }, "UniInputCode_UniInputAction_UniInputMask");

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.UniInputCode).ValueGeneratedNever();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UniInputMask)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RCurr>(entity =>
            {
                entity.HasKey(e => e.CurrId)
                    .HasName("pk_r_Currs");

                entity.ToTable("r_Currs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CurrName, "CurrName")
                    .IsUnique();

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.Property(e => e.CurrId)
                    .ValueGeneratedNever()
                    .HasColumnName("CurrID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CurrDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");
            });

            modelBuilder.Entity<RCurrD>(entity =>
            {
                entity.HasKey(e => new { e.CurrId, e.NomValue })
                    .HasName("pk_r_CurrD");

                entity.ToTable("r_CurrD", "dbo");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Picture).HasColumnType("image");
            });

            modelBuilder.Entity<RCurrH>(entity =>
            {
                entity.HasKey(e => new { e.CurrId, e.DocDate })
                    .HasName("_pk_r_CurrH")
                    .IsClustered(false);

                entity.ToTable("r_CurrH", "dbo");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC")
                    .HasFillFactor(90);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");
            });

            modelBuilder.Entity<RDbi>(entity =>
            {
                entity.HasKey(e => e.DbiId)
                    .HasName("pk_r_DBIs");

                entity.ToTable("r_DBIs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ChIdEnd, "ChID_End");

                entity.HasIndex(e => e.ChIdStart, "ChID_Start");

                entity.HasIndex(e => e.DbiName, "DBiName")
                    .IsUnique();

                entity.HasIndex(e => e.DocIdEnd, "DocID_End");

                entity.HasIndex(e => e.DocIdStart, "DocID_Start");

                entity.HasIndex(e => e.IntDocIdEnd, "IntDocID_End");

                entity.HasIndex(e => e.IntDocIdStart, "IntDocID_Start");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.Pccode, "PCCode");

                entity.HasIndex(e => e.PpidEnd, "PPID_End");

                entity.HasIndex(e => e.PpidStart, "PPID_Start");

                entity.HasIndex(e => e.RefIdEnd, "RefID_End");

                entity.HasIndex(e => e.RefIdStart, "RefID_Start");

                entity.Property(e => e.DbiId)
                    .ValueGeneratedNever()
                    .HasColumnName("DBiID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChIdEnd).HasColumnName("ChID_End");

                entity.Property(e => e.ChIdStart).HasColumnName("ChID_Start");

                entity.Property(e => e.DbiName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DBiName");

                entity.Property(e => e.DocIdEnd).HasColumnName("DocID_End");

                entity.Property(e => e.DocIdStart).HasColumnName("DocID_Start");

                entity.Property(e => e.IntDocIdEnd).HasColumnName("IntDocID_End");

                entity.Property(e => e.IntDocIdStart).HasColumnName("IntDocID_Start");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Pccode).HasColumnName("PCCode");

                entity.Property(e => e.PpidEnd).HasColumnName("PPID_End");

                entity.Property(e => e.PpidStart).HasColumnName("PPID_Start");

                entity.Property(e => e.RefIdEnd).HasColumnName("RefID_End");

                entity.Property(e => e.RefIdStart).HasColumnName("RefID_Start");
            });

            modelBuilder.Entity<RDcard>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_r_DCards");

                entity.ToTable("r_DCards", "dbo");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DcardId, "DCardID")
                    .IsUnique();

                entity.HasIndex(e => new { e.DcardId, e.DctypeCode }, "DCardID_DCTypeCode");

                entity.HasIndex(e => new { e.DcardId, e.ChId }, "IX-dbo-r_DCards-00")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ChangeToBonus, e.DctypeCode }, "IX_ChangeToBonus_DCTypeCode_Includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SumCc, "SumCC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AskPwddcardEnter).HasColumnName("AskPWDDCardEnter");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.CardTied).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChatBot).HasDefaultValueSql("((0))");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DCardID");

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.FillingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.Value1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value3).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RDcfirstPurchase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("r_DCFirstPurchase", "dbo");

                entity.Property(e => e.Dc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DC");

                entity.Property(e => e.FirstPurchase)
                    .HasColumnType("date")
                    .HasColumnName("First_purchase");
            });

            modelBuilder.Entity<RDctype>(entity =>
            {
                entity.HasKey(e => e.DctypeCode)
                    .HasName("pk_r_DCTypes")
                    .IsClustered(false);

                entity.ToTable("r_DCTypes", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.DctypeName, "DCTypeName")
                    .IsUnique();

                entity.Property(e => e.DctypeCode)
                    .ValueGeneratedNever()
                    .HasColumnName("DCTypeCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DctypeGcode).HasColumnName("DCTypeGCode");

                entity.Property(e => e.DctypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DCTypeName");

                entity.Property(e => e.InitSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MaxQty).HasDefaultValueSql("(1)");

                entity.Property(e => e.NoManualDcardEnter).HasColumnName("NoManualDCardEnter");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Value1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value3).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RDctypeG>(entity =>
            {
                entity.HasKey(e => e.DctypeGcode)
                    .HasName("pk_r_DCTypeG")
                    .IsClustered(false);

                entity.ToTable("r_DCTypeG", "dbo");

                entity.HasIndex(e => e.DctypeGname, "DCTypeGName")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.DctypeGcode)
                    .ValueGeneratedNever()
                    .HasColumnName("DCTypeGCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DctypeGname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DCTypeGName");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessingId).HasColumnName("ProcessingID");
            });

            modelBuilder.Entity<RDctypeP>(entity =>
            {
                entity.HasKey(e => new { e.DctypeCode, e.ProdId })
                    .HasName("pk_r_DCTypeP");

                entity.ToTable("r_DCTypeP", "dbo");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.DctypeCode, e.ProdId }, "ProdID_BonusType")
                    .IsUnique();

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RDep>(entity =>
            {
                entity.HasKey(e => e.DepId)
                    .HasName("pk_r_Deps");

                entity.ToTable("r_Deps", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.DepName, "DepName")
                    .IsUnique();

                entity.Property(e => e.DepId)
                    .ValueGeneratedNever()
                    .HasColumnName("DepID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DepName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RDesk>(entity =>
            {
                entity.HasKey(e => e.DeskCode)
                    .HasName("pk_r_Desks")
                    .IsClustered(false);

                entity.ToTable("r_Desks", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.DeskName, "DeskName")
                    .IsUnique();

                entity.Property(e => e.DeskCode).ValueGeneratedNever();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DeskGcode).HasColumnName("DeskGCode");

                entity.Property(e => e.DeskHeight).HasDefaultValueSql("(50)");

                entity.Property(e => e.DeskName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DeskWidth).HasDefaultValueSql("(90)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RDeskG>(entity =>
            {
                entity.HasKey(e => e.DeskGcode)
                    .HasName("pk_r_DeskG")
                    .IsClustered(false);

                entity.ToTable("r_DeskG", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.DeskGname, "DeskGName")
                    .IsUnique();

                entity.Property(e => e.DeskGcode)
                    .ValueGeneratedNever()
                    .HasColumnName("DeskGCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DeskGname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DeskGName");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RDeviceType>(entity =>
            {
                entity.HasKey(e => e.DeviceType)
                    .HasName("pk_r_DeviceTypes");

                entity.ToTable("r_DeviceTypes", "dbo");

                entity.Property(e => e.DeviceType).ValueGeneratedNever();

                entity.Property(e => e.DeviceTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<RDisc>(entity =>
            {
                entity.HasKey(e => e.DiscCode)
                    .HasName("pk_r_Discs");

                entity.ToTable("r_Discs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.DiscName, "DiscName")
                    .IsUnique();

                entity.Property(e => e.DiscCode).ValueGeneratedNever();

                entity.Property(e => e.AllowDiscs)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChargeDcard).HasColumnName("ChargeDCard");

                entity.Property(e => e.DiscFromDcard).HasColumnName("DiscFromDCard");

                entity.Property(e => e.DiscName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiscOnlyWithDcard).HasColumnName("DiscOnlyWithDCard");

                entity.Property(e => e.DocCode).HasDefaultValueSql("(1011)");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.GenProcs)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InUse)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintInCheque)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SaveBonusToDcard).HasColumnName("SaveBonusToDCard");

                entity.Property(e => e.SaveDiscToDcard).HasColumnName("SaveDiscToDCard");

                entity.Property(e => e.Shed1)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Shed2)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Shed3)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ShortCut)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValidOurs)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValidStocks)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RDiscChargeD>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.SrcPosId })
                    .HasName("pk_r_DiscChargeD");

                entity.ToTable("r_DiscChargeD", "dbo");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EchargeBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("EChargeBonusExp");

                entity.Property(e => e.EfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("EFilterExp");

                entity.Property(e => e.LchargeBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("LChargeBonusExp");

                entity.Property(e => e.LfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("LFilterExp");

                entity.Property(e => e.PcatFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PCatFilter");

                entity.Property(e => e.Pgr1Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr1Filter");

                entity.Property(e => e.Pgr2Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr2Filter");

                entity.Property(e => e.Pgr3Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr3Filter");

                entity.Property(e => e.PgrFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGrFilter");

                entity.Property(e => e.PprodFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PProdFilter");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscChargeDs)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscChargeD_r_Discs");
            });

            modelBuilder.Entity<RDiscChargeDt>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.CtableCode })
                    .HasName("pk_r_DiscChargeDT")
                    .IsClustered(false);

                entity.ToTable("r_DiscChargeDT", "dbo");

                entity.Property(e => e.CtableCode).HasColumnName("CTableCode");

                entity.Property(e => e.CfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldDescs");

                entity.Property(e => e.CfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldNames");

                entity.Property(e => e.PfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldDescs");

                entity.Property(e => e.PfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldNames");

                entity.Property(e => e.PtableCode).HasColumnName("PTableCode");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscChargeDts)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscChargeDT_r_Discs");
            });

            modelBuilder.Entity<RDiscDc>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.DctypeCode })
                    .HasName("pk_r_DiscDC");

                entity.ToTable("r_DiscDC", "dbo");

                entity.Property(e => e.DctypeCode).HasColumnName("DCTypeCode");

                entity.HasOne(d => d.DctypeCodeNavigation)
                    .WithMany(p => p.RDiscDcs)
                    .HasForeignKey(d => d.DctypeCode)
                    .HasConstraintName("FK_r_DiscDC_r_DCTypes");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscDcs)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscDC_r_Discs");
            });

            modelBuilder.Entity<RDiscMessage>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.SrcPosId })
                    .HasName("pk_r_DiscMessages");

                entity.ToTable("r_DiscMessages", "dbo");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("EFilterExp");

                entity.Property(e => e.LfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("LFilterExp");

                entity.Property(e => e.Msg)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PcatFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PCatFilter");

                entity.Property(e => e.Pgr1Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr1Filter");

                entity.Property(e => e.Pgr2Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr2Filter");

                entity.Property(e => e.Pgr3Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr3Filter");

                entity.Property(e => e.PgrFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGrFilter");

                entity.Property(e => e.PprodFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PProdFilter");
            });

            modelBuilder.Entity<RDiscMessagesT>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.CtableCode })
                    .HasName("pk_r_DiscMessagesT");

                entity.ToTable("r_DiscMessagesT", "dbo");

                entity.Property(e => e.CtableCode).HasColumnName("CTableCode");

                entity.Property(e => e.CfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldDescs");

                entity.Property(e => e.CfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldNames");

                entity.Property(e => e.PfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldDescs");

                entity.Property(e => e.PfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldNames");

                entity.Property(e => e.PtableCode).HasColumnName("PTableCode");
            });

            modelBuilder.Entity<RDiscSale>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.SrcPosId })
                    .HasName("pk_r_DiscSale");

                entity.ToTable("r_DiscSale", "dbo");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EdiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("EDiscountExp");

                entity.Property(e => e.EfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("EFilterExp");

                entity.Property(e => e.EmaxDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("EMaxDiscountExp");

                entity.Property(e => e.EmaxSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("EMaxSumBonusExp");

                entity.Property(e => e.EminDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("EMinDiscountExp");

                entity.Property(e => e.EminSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("EMinSumBonusExp");

                entity.Property(e => e.LdiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("LDiscountExp");

                entity.Property(e => e.LfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("LFilterExp");

                entity.Property(e => e.LmaxDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("LMaxDiscountExp");

                entity.Property(e => e.LmaxSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("LMaxSumBonusExp");

                entity.Property(e => e.LminDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("LMinDiscountExp");

                entity.Property(e => e.LminSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("LMinSumBonusExp");

                entity.Property(e => e.PcatFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PCatFilter");

                entity.Property(e => e.Pgr1Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr1Filter");

                entity.Property(e => e.Pgr2Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr2Filter");

                entity.Property(e => e.Pgr3Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr3Filter");

                entity.Property(e => e.PgrFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGrFilter");

                entity.Property(e => e.PprodFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PProdFilter");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscSales)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscSale_r_Discs");
            });

            modelBuilder.Entity<RDiscSaleBonu>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.SrcPosId, e.DetSrcPosId })
                    .HasName("pk_r_DiscSaleBonus")
                    .IsClustered(false);

                entity.ToTable("r_DiscSaleBonus", "dbo");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.BonusSumFilter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BonusTypeFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.RDiscSale)
                    .WithMany(p => p.RDiscSaleBonus)
                    .HasForeignKey(d => new { d.DiscCode, d.SrcPosId })
                    .HasConstraintName("FK_r_DiscSaleBonus_r_DiscSale");
            });

            modelBuilder.Entity<RDiscSaleD>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.SrcPosId })
                    .HasName("pk_r_DiscSaleD");

                entity.ToTable("r_DiscSaleD", "dbo");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EdiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("EDiscountExp");

                entity.Property(e => e.EfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("EFilterExp");

                entity.Property(e => e.EmaxDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("EMaxDiscountExp");

                entity.Property(e => e.EmaxSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("EMaxSumBonusExp");

                entity.Property(e => e.EminDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("EMinDiscountExp");

                entity.Property(e => e.EminSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("EMinSumBonusExp");

                entity.Property(e => e.LdiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("LDiscountExp");

                entity.Property(e => e.LfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("LFilterExp");

                entity.Property(e => e.LmaxDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("LMaxDiscountExp");

                entity.Property(e => e.LmaxSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("LMaxSumBonusExp");

                entity.Property(e => e.LminDiscountExp)
                    .IsUnicode(false)
                    .HasColumnName("LMinDiscountExp");

                entity.Property(e => e.LminSumBonusExp)
                    .IsUnicode(false)
                    .HasColumnName("LMinSumBonusExp");

                entity.Property(e => e.PcatFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PCatFilter");

                entity.Property(e => e.Pgr1Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr1Filter");

                entity.Property(e => e.Pgr2Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr2Filter");

                entity.Property(e => e.Pgr3Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr3Filter");

                entity.Property(e => e.PgrFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGrFilter");

                entity.Property(e => e.PprodFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PProdFilter");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscSaleDs)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscSaleD_r_Discs");
            });

            modelBuilder.Entity<RDiscSaleDbonu>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.SrcPosId, e.DetSrcPosId })
                    .HasName("pk_r_DiscSaleDBonus")
                    .IsClustered(false);

                entity.ToTable("r_DiscSaleDBonus", "dbo");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.BonusSumFilter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.BonusTypeFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.RDiscSaleD)
                    .WithMany(p => p.RDiscSaleDbonus)
                    .HasForeignKey(d => new { d.DiscCode, d.SrcPosId })
                    .HasConstraintName("FK_r_DiscSaleDBonus_r_DiscSaleD");
            });

            modelBuilder.Entity<RDiscSaleDt>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.CtableCode })
                    .HasName("pk_r_DiscSaleDT")
                    .IsClustered(false);

                entity.ToTable("r_DiscSaleDT", "dbo");

                entity.Property(e => e.CtableCode).HasColumnName("CTableCode");

                entity.Property(e => e.CfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldDescs");

                entity.Property(e => e.CfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldNames");

                entity.Property(e => e.PfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldDescs");

                entity.Property(e => e.PfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldNames");

                entity.Property(e => e.PtableCode).HasColumnName("PTableCode");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscSaleDts)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscSaleDT_r_Discs");
            });

            modelBuilder.Entity<RDiscSaleT>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.CtableCode })
                    .HasName("pk_r_DiscSaleT")
                    .IsClustered(false);

                entity.ToTable("r_DiscSaleT", "dbo");

                entity.Property(e => e.CtableCode).HasColumnName("CTableCode");

                entity.Property(e => e.CfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldDescs");

                entity.Property(e => e.CfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldNames");

                entity.Property(e => e.PfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldDescs");

                entity.Property(e => e.PfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldNames");

                entity.Property(e => e.PtableCode).HasColumnName("PTableCode");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscSaleTs)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscSaleT_r_Discs");
            });

            modelBuilder.Entity<RDiscsT>(entity =>
            {
                entity.HasKey(e => new { e.DiscCode, e.CtableCode })
                    .HasName("pk_r_DiscsT")
                    .IsClustered(false);

                entity.ToTable("r_DiscsT", "dbo");

                entity.Property(e => e.CtableCode).HasColumnName("CTableCode");

                entity.Property(e => e.CfieldDescs)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CFieldDescs");

                entity.Property(e => e.CfieldNames)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CFieldNames");

                entity.Property(e => e.PfieldDescs)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PFieldDescs");

                entity.Property(e => e.PfieldNames)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PFieldNames");

                entity.Property(e => e.PtableCode).HasColumnName("PTableCode");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.RDiscsTs)
                    .HasForeignKey(d => d.DiscCode)
                    .HasConstraintName("FK_r_DiscsT_r_Discs");
            });

            modelBuilder.Entity<RDisplay>(entity =>
            {
                entity.HasKey(e => new { e.DisplayId, e.Wpid })
                    .HasName("pk_r_Displays");

                entity.ToTable("r_Displays", "dbo");

                entity.HasIndex(e => new { e.Wpid, e.Port }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.DisplayId).HasColumnName("DisplayID");

                entity.Property(e => e.Wpid).HasColumnName("WPID");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RDocShed>(entity =>
            {
                entity.HasKey(e => e.DocShedCode)
                    .HasName("pk_r_DocShed")
                    .IsClustered(false);

                entity.ToTable("r_DocShed", "dbo");

                entity.HasIndex(e => e.DocShedName, "DocShedName");

                entity.Property(e => e.DocShedCode).ValueGeneratedNever();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocShedName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RDocShedD>(entity =>
            {
                entity.HasKey(e => new { e.DocShedCode, e.SrcPosId })
                    .HasName("pk_r_DocShedD")
                    .IsClustered(false);

                entity.ToTable("r_DocShedD", "dbo");

                entity.HasIndex(e => e.DocShedCode, "DocShedCode");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PlanDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumAcperc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumACPerc");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumCcperc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCCPerc");
            });

            modelBuilder.Entity<REmp>(entity =>
            {
                entity.HasKey(e => e.EmpId)
                    .HasName("pk_r_Emps");

                entity.ToTable("r_Emps", "dbo");

                entity.HasIndex(e => e.CertInsurNum, "CertInsurNum");

                entity.HasIndex(e => e.CertInsurSer, "CertInsurSer");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.EmpBarCode, "EmpBarCode")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmpName, "EmpName")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WteamId, "WTeamID");

                entity.Property(e => e.EmpId)
                    .ValueGeneratedNever()
                    .HasColumnName("EmpID");

                entity.Property(e => e.BarCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDay).HasColumnType("smalldatetime");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CertInsurNum)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CertInsurSer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DisNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.EmpBarCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EmpFirstName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpInitials)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpLastName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpParName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InPhone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IsCitizen)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.IsInvalid).HasDefaultValueSql("((0))");

                entity.Property(e => e.MilCalcCat)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MilCalcGrp)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MilNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MilProfes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MilRank)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MilRegOffice)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MilSpecialCalc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MilStaff)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PassDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassDept)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PassNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PassSer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PensNum)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PerFileNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Percent1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Percent2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Percent3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.ShiftPostId).HasColumnName("ShiftPostID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UaempFirstName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpFirstName");

                entity.Property(e => e.UaempInitials)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpInitials");

                entity.Property(e => e.UaempLastName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpLastName");

                entity.Property(e => e.UaempName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpName");

                entity.Property(e => e.UaempParName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpParName");

                entity.Property(e => e.VaccinationId)
                    .HasColumnName("VaccinationID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.WorkBookNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkBookSer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WteamId).HasColumnName("WTeamID");
            });

            modelBuilder.Entity<REmpAcc>(entity =>
            {
                entity.HasKey(e => new { e.SrcPosId, e.EmpId })
                    .HasName("_pk_r_EmpAcc")
                    .IsClustered(false);

                entity.ToTable("r_EmpAcc", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => new { e.OurId, e.Priority, e.EmpId }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.PayTypeId, "PayTypeID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.HasIndex(e => new { e.OurId, e.EmpId }, "r_EmpMOr_EmpAcc");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.SumExpE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumExpR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<REmpAct>(entity =>
            {
                entity.HasKey(e => new { e.EmpId, e.Bdate, e.Edate })
                    .HasName("_pk_r_EmpAct")
                    .IsClustered(false);

                entity.ToTable("r_EmpAct", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.DisReasonText)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PrvPlEmp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<REmpAdd>(entity =>
            {
                entity.HasKey(e => new { e.EmpId, e.Bdate, e.Edate })
                    .HasName("_pk_r_EmpAdd")
                    .IsClustered(false);

                entity.ToTable("r_EmpAdd", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.FactAptNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FactBlock)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FactCity)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FactDistrict)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FactHouse)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FactPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FactRegion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FactStreet)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegAptNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegBlock)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegCity)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegDistrict)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegHouse)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegRegion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RegStreet)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<REmpFile>(entity =>
            {
                entity.HasKey(e => new { e.EmpId, e.SrcPosId })
                    .HasName("pk_r_EmpFiles")
                    .IsClustered(false);

                entity.ToTable("r_EmpFiles", "dbo");

                entity.HasIndex(e => e.EmpDocId, "EmpDocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.FileDate, "FileDate");

                entity.HasIndex(e => e.FileId, "FileID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EmpDocId).HasColumnName("EmpDocID");

                entity.Property(e => e.FileDate).HasColumnType("datetime");

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<REmpInc>(entity =>
            {
                entity.HasKey(e => new { e.SrcPosId, e.EmpId })
                    .HasName("_pk_r_EmpInc")
                    .IsClustered(false);

                entity.ToTable("r_EmpInc", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => new { e.OurId, e.Priority, e.EmpId }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.PayTypeId, "PayTypeID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.HasIndex(e => new { e.OurId, e.EmpId }, "r_EmpMOr_EmpInc");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayTypeId).HasColumnName("PayTypeID");

                entity.Property(e => e.SumExpE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumExpR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<REmpKin>(entity =>
            {
                entity.HasKey(e => new { e.EmpId, e.SrcPosId })
                    .HasName("_pk_r_EmpKin")
                    .IsClustered(false);

                entity.ToTable("r_EmpKin", "dbo");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.IsInvalid).HasDefaultValueSql("((0))");

                entity.Property(e => e.KinBirthDay).HasColumnType("smalldatetime");

                entity.Property(e => e.KinName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KinWorkPlace)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<REmpMo>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.EmpId })
                    .HasName("_pk_r_EmpMO")
                    .IsClustered(false);

                entity.ToTable("r_EmpMO", "dbo");

                entity.HasIndex(e => e.BoldDepId, "BOldDepID");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.IntEmpId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.BoldAcceptDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BOldAcceptDate");

                entity.Property(e => e.BoldAlimonyPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BOldAlimonyPrc");

                entity.Property(e => e.BoldDepId).HasColumnName("BOldDepID");

                entity.Property(e => e.BoldDismissDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BOldDismissDate");

                entity.Property(e => e.BoldJobDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BOldJobDesc");

                entity.Property(e => e.BoldJoint).HasColumnName("BOldJoint");

                entity.Property(e => e.BoldPersCat).HasColumnName("BOldPersCat");

                entity.Property(e => e.BoldSalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BOldSalary");

                entity.Property(e => e.CardAcc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Csalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CSalary");

                entity.Property(e => e.HandCwtime).HasColumnName("HandCWTime");

                entity.Property(e => e.IntEmpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntEmpID")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<REmpMp>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.EmpId, e.SrcPosId })
                    .HasName("_pk_r_EmpMP")
                    .IsClustered(false);

                entity.ToTable("r_EmpMP", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PrevId, "PrevID");

                entity.HasIndex(e => new { e.OurId, e.EmpId }, "r_EmpMOr_EmpMP");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.PrevId).HasColumnName("PrevID");

                entity.Property(e => e.PrevReason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PrivDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<REmpMpst>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.EmpId, e.Bdate })
                    .HasName("_pk_r_EmpMPst")
                    .IsClustered(false);

                entity.ToTable("r_EmpMPst", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.DepId, "DepID");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.ShedId, "ShedID");

                entity.HasIndex(e => e.SubId, "SubID");

                entity.HasIndex(e => new { e.OurId, e.EmpId }, "r_EmpMOr_EmpMPst");

                entity.HasIndex(e => new { e.PostId, e.EmpClass }, "r_PostMCr_EmpMPst");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.AdvSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Bsalary)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalary");

                entity.Property(e => e.BsalaryPrc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BSalaryPrc");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.GempType).HasColumnName("GEmpType");

                entity.Property(e => e.IndexBaseMonth).HasColumnType("smalldatetime");

                entity.Property(e => e.IndexExtSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IndexExtSumCC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PensCatId)
                    .HasColumnName("PensCatID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PensMethod).HasDefaultValueSql("(1)");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.SalaryQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.StrucPostId).HasColumnName("StrucPostID");

                entity.Property(e => e.SubId).HasColumnName("SubID");
            });

            modelBuilder.Entity<REmpName>(entity =>
            {
                entity.HasKey(e => new { e.EmpId, e.OurId, e.ChDate })
                    .HasName("pk_r_EmpNames")
                    .IsClustered(false);

                entity.ToTable("r_EmpNames", "dbo");

                entity.HasIndex(e => e.Notes, "Notes");

                entity.HasIndex(e => e.TaxCode, "TaxCode");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EmpFirstName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpInitials)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpLastName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpParName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PassDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassDept)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PassNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PassSer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UaempFirstName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpFirstName");

                entity.Property(e => e.UaempInitials)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpInitials");

                entity.Property(e => e.UaempLastName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpLastName");

                entity.Property(e => e.UaempName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpName");

                entity.Property(e => e.UaempParName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpParName");
            });

            modelBuilder.Entity<REmpNamesDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("r_EmpNamesDates", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpFirstName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpInitials)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpLastName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmpParName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PassDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassDept)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PassNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PassSer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UaempFirstName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpFirstName");

                entity.Property(e => e.UaempInitials)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpInitials");

                entity.Property(e => e.UaempLastName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpLastName");

                entity.Property(e => e.UaempName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpName");

                entity.Property(e => e.UaempParName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UAEmpParName");
            });

            modelBuilder.Entity<RExecutor>(entity =>
            {
                entity.HasKey(e => e.ExecutorId)
                    .HasName("pk_r_Executors");

                entity.ToTable("r_Executors", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.ExecutorId)
                    .ValueGeneratedNever()
                    .HasColumnName("ExecutorID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExecutorName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RExecutorService>(entity =>
            {
                entity.HasKey(e => new { e.ExecutorId, e.SrvcId })
                    .HasName("pk_r_ExecutorServices");

                entity.ToTable("r_ExecutorServices", "dbo");

                entity.HasIndex(e => e.ExecutorId, "ExecutorID");

                entity.HasIndex(e => e.SrvcId, "SrvcID");

                entity.Property(e => e.ExecutorId).HasColumnName("ExecutorID");

                entity.Property(e => e.SrvcId).HasColumnName("SrvcID");

                entity.Property(e => e.MaxClients).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RExecutorShift>(entity =>
            {
                entity.HasKey(e => new { e.ExecutorId, e.StockId, e.Btime, e.Etime })
                    .HasName("pk_r_ExecutorShifts");

                entity.ToTable("r_ExecutorShifts", "dbo");

                entity.HasIndex(e => e.ExecutorId, "ExecutorID");

                entity.Property(e => e.ExecutorId).HasColumnName("ExecutorID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Btime)
                    .HasColumnType("datetime")
                    .HasColumnName("BTime");

                entity.Property(e => e.Etime)
                    .HasColumnType("datetime")
                    .HasColumnName("ETime");
            });

            modelBuilder.Entity<RExtFile>(entity =>
            {
                entity.HasKey(e => e.ExtFileId)
                    .HasName("pk_r_ExtFiles")
                    .IsClustered(false);

                entity.ToTable("r_ExtFiles", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.ExtFileId)
                    .ValueGeneratedNever()
                    .HasColumnName("ExtFileID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExtFileName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RGacc>(entity =>
            {
                entity.HasKey(e => e.GaccId)
                    .HasName("_pk_r_GAccs")
                    .IsClustered(false);

                entity.ToTable("r_GAccs", "dbo");

                entity.HasIndex(e => e.AAssId, "A_AssID");

                entity.HasIndex(e => e.ACodeId1, "A_CodeID1");

                entity.HasIndex(e => e.ACodeId2, "A_CodeID2");

                entity.HasIndex(e => e.ACodeId3, "A_CodeID3");

                entity.HasIndex(e => e.ACodeId4, "A_CodeID4");

                entity.HasIndex(e => e.ACodeId5, "A_CodeID5");

                entity.HasIndex(e => e.ACompId, "A_CompID");

                entity.HasIndex(e => e.AEmpId, "A_EmpID");

                entity.HasIndex(e => e.AProdId, "A_ProdID");

                entity.HasIndex(e => e.AStockId, "A_StockID");

                entity.HasIndex(e => e.AVolId, "A_VolID");

                entity.HasIndex(e => e.GaccId3, "GAccID3");

                entity.HasIndex(e => e.GaccName, "GAccName")
                    .IsUnique();

                entity.HasIndex(e => e.GaccType, "GAccType");

                entity.HasIndex(e => new { e.GaccId1, e.GaccId2 }, "r_GAccs2r_GAccs");

                entity.Property(e => e.GaccId)
                    .ValueGeneratedNever()
                    .HasColumnName("GAccID");

                entity.Property(e => e.AAddQty).HasColumnName("A_AddQty");

                entity.Property(e => e.AAssId).HasColumnName("A_AssID");

                entity.Property(e => e.AAssVol).HasColumnName("A_AssVol");

                entity.Property(e => e.ACodeId1).HasColumnName("A_CodeID1");

                entity.Property(e => e.ACodeId2).HasColumnName("A_CodeID2");

                entity.Property(e => e.ACodeId3).HasColumnName("A_CodeID3");

                entity.Property(e => e.ACodeId4).HasColumnName("A_CodeID4");

                entity.Property(e => e.ACodeId5).HasColumnName("A_CodeID5");

                entity.Property(e => e.ACodeVol1).HasColumnName("A_CodeVol1");

                entity.Property(e => e.ACodeVol2).HasColumnName("A_CodeVol2");

                entity.Property(e => e.ACodeVol3).HasColumnName("A_CodeVol3");

                entity.Property(e => e.ACodeVol4).HasColumnName("A_CodeVol4");

                entity.Property(e => e.ACodeVol5).HasColumnName("A_CodeVol5");

                entity.Property(e => e.ACompId).HasColumnName("A_CompID");

                entity.Property(e => e.ACompVol).HasColumnName("A_CompVol");

                entity.Property(e => e.AEmpId).HasColumnName("A_EmpID");

                entity.Property(e => e.AEmpVol).HasColumnName("A_EmpVol");

                entity.Property(e => e.AIncQty).HasColumnName("A_IncQty");

                entity.Property(e => e.AProdId).HasColumnName("A_ProdID");

                entity.Property(e => e.AProdVol).HasColumnName("A_ProdVol");

                entity.Property(e => e.AStockId).HasColumnName("A_StockID");

                entity.Property(e => e.AStockVol).HasColumnName("A_StockVol");

                entity.Property(e => e.AVolId).HasColumnName("A_VolID");

                entity.Property(e => e.AVolVol).HasColumnName("A_VolVol");

                entity.Property(e => e.GaccId1).HasColumnName("GAccID1");

                entity.Property(e => e.GaccId2).HasColumnName("GAccID2");

                entity.Property(e => e.GaccId3).HasColumnName("GAccID3");

                entity.Property(e => e.GaccMain).HasColumnName("GAccMain");

                entity.Property(e => e.GaccName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("GAccName");

                entity.Property(e => e.GaccRollUp).HasColumnName("GAccRollUp");

                entity.Property(e => e.GaccType).HasColumnName("GAccType");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RGaccFa>(entity =>
            {
                entity.HasKey(e => e.GaccId)
                    .HasName("_pk_r_GAccFA");

                entity.ToTable("r_GAccFA", "dbo");

                entity.Property(e => e.GaccId)
                    .ValueGeneratedNever()
                    .HasColumnName("GAccID");

                entity.Property(e => e.AAssExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_AssExpE");

                entity.Property(e => e.AAssExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_AssExpR");

                entity.Property(e => e.ACode1ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code1ExpE");

                entity.Property(e => e.ACode1ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code1ExpR");

                entity.Property(e => e.ACode2ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code2ExpE");

                entity.Property(e => e.ACode2ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code2ExpR");

                entity.Property(e => e.ACode3ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code3ExpE");

                entity.Property(e => e.ACode3ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code3ExpR");

                entity.Property(e => e.ACode4ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code4ExpE");

                entity.Property(e => e.ACode4ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code4ExpR");

                entity.Property(e => e.ACode5ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code5ExpE");

                entity.Property(e => e.ACode5ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Code5ExpR");

                entity.Property(e => e.ACompExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_CompExpE");

                entity.Property(e => e.ACompExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_CompExpR");

                entity.Property(e => e.AEmpExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_EmpExpE");

                entity.Property(e => e.AEmpExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_EmpExpR");

                entity.Property(e => e.AProdExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_ProdExpE");

                entity.Property(e => e.AProdExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_ProdExpR");

                entity.Property(e => e.AStockExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_StockExpE");

                entity.Property(e => e.AStockExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_StockExpR");

                entity.Property(e => e.AVol1ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Vol1ExpE");

                entity.Property(e => e.AVol1ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Vol1ExpR");

                entity.Property(e => e.AVol2ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Vol2ExpE");

                entity.Property(e => e.AVol2ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Vol2ExpR");

                entity.Property(e => e.AVol3ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Vol3ExpE");

                entity.Property(e => e.AVol3ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_Vol3ExpR");

                entity.Property(e => e.AVolExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_VolExpE");

                entity.Property(e => e.AVolExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("A_VolExpR");
            });

            modelBuilder.Entity<RGaccs1>(entity =>
            {
                entity.HasKey(e => e.GaccId1)
                    .HasName("pk_r_GAccs1");

                entity.ToTable("r_GAccs1", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.GaccName1, "GAccName1")
                    .IsUnique();

                entity.Property(e => e.GaccId1).HasColumnName("GAccID1");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.GaccName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("GAccName1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RGaccs2>(entity =>
            {
                entity.HasKey(e => e.GaccId2)
                    .HasName("_pk_r_GAccs2")
                    .IsClustered(false);

                entity.ToTable("r_GAccs2", "dbo");

                entity.HasIndex(e => e.GaccId1, "GAccID1");

                entity.HasIndex(e => e.GaccName2, "GAccName2")
                    .IsUnique();

                entity.HasIndex(e => new { e.GaccId1, e.GaccId2 }, "NoDuplicate")
                    .IsUnique();

                entity.Property(e => e.GaccId2).HasColumnName("GAccID2");

                entity.Property(e => e.GaccId1).HasColumnName("GAccID1");

                entity.Property(e => e.GaccName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("GAccName2");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RGoper>(entity =>
            {
                entity.HasKey(e => e.GoperId)
                    .HasName("pk_r_GOpers");

                entity.ToTable("r_GOpers", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.GoperCid, "GOperCID");

                entity.HasIndex(e => e.GoperName, "GOperName")
                    .IsUnique();

                entity.Property(e => e.GoperId)
                    .ValueGeneratedNever()
                    .HasColumnName("GOperID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.GoperCid).HasColumnName("GOperCID");

                entity.Property(e => e.GoperName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("GOperName");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RevId).HasColumnName("RevID");

                entity.Property(e => e.RevName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RGoperC>(entity =>
            {
                entity.HasKey(e => e.GoperCid)
                    .HasName("pk_r_GOperC");

                entity.ToTable("r_GOperC", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.GoperCname, "GOperCName")
                    .IsUnique();

                entity.Property(e => e.GoperCid)
                    .ValueGeneratedNever()
                    .HasColumnName("GOperCID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.GoperCname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("GOperCName");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RGoperD>(entity =>
            {
                entity.HasKey(e => new { e.GoperId, e.SrcPosId })
                    .HasName("_pk_r_GOperD")
                    .IsClustered(false);

                entity.ToTable("r_GOperD", "dbo");

                entity.HasIndex(e => e.CAssId, "C_AssID");

                entity.HasIndex(e => e.CCodeId1, "C_CodeID1");

                entity.HasIndex(e => e.CCodeId2, "C_CodeID2");

                entity.HasIndex(e => e.CCodeId3, "C_CodeID3");

                entity.HasIndex(e => e.CCodeId4, "C_CodeID4");

                entity.HasIndex(e => e.CCodeId5, "C_CodeID5");

                entity.HasIndex(e => e.CCompId, "C_CompID");

                entity.HasIndex(e => e.CEmpId, "C_EmpID");

                entity.HasIndex(e => e.CGaccEexp, "C_GAccEExp");

                entity.HasIndex(e => e.CGaccRexp, "C_GAccRExp");

                entity.HasIndex(e => e.CProdId, "C_ProdID");

                entity.HasIndex(e => e.CStockId, "C_StockID");

                entity.HasIndex(e => e.CVolId, "C_VolID");

                entity.HasIndex(e => e.DAssId, "D_AssID");

                entity.HasIndex(e => e.DCodeId1, "D_CodeID1");

                entity.HasIndex(e => e.DCodeId2, "D_CodeID2");

                entity.HasIndex(e => e.DCodeId3, "D_CodeID3");

                entity.HasIndex(e => e.DCodeId4, "D_CodeID4");

                entity.HasIndex(e => e.DCodeId5, "D_CodeID5");

                entity.HasIndex(e => e.DCompId, "D_CompID");

                entity.HasIndex(e => e.DEmpId, "D_EmpID");

                entity.HasIndex(e => e.DGaccEexp, "D_GAccEExp");

                entity.HasIndex(e => e.DGaccRexp, "D_GAccRExp");

                entity.HasIndex(e => e.DProdId, "D_ProdID");

                entity.HasIndex(e => e.DStockId, "D_StockID");

                entity.HasIndex(e => e.DVolId, "D_VolID");

                entity.HasIndex(e => e.GoperId, "GOperID");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CAddQty).HasColumnName("C_AddQty");

                entity.Property(e => e.CAssId).HasColumnName("C_AssID");

                entity.Property(e => e.CAssVol).HasColumnName("C_AssVol");

                entity.Property(e => e.CCodeId1).HasColumnName("C_CodeID1");

                entity.Property(e => e.CCodeId2).HasColumnName("C_CodeID2");

                entity.Property(e => e.CCodeId3).HasColumnName("C_CodeID3");

                entity.Property(e => e.CCodeId4).HasColumnName("C_CodeID4");

                entity.Property(e => e.CCodeId5).HasColumnName("C_CodeID5");

                entity.Property(e => e.CCodeVol1).HasColumnName("C_CodeVol1");

                entity.Property(e => e.CCodeVol2).HasColumnName("C_CodeVol2");

                entity.Property(e => e.CCodeVol3).HasColumnName("C_CodeVol3");

                entity.Property(e => e.CCodeVol4).HasColumnName("C_CodeVol4");

                entity.Property(e => e.CCodeVol5).HasColumnName("C_CodeVol5");

                entity.Property(e => e.CCompId).HasColumnName("C_CompID");

                entity.Property(e => e.CCompVol).HasColumnName("C_CompVol");

                entity.Property(e => e.CEmpId).HasColumnName("C_EmpID");

                entity.Property(e => e.CEmpVol).HasColumnName("C_EmpVol");

                entity.Property(e => e.CGaccEexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_GAccEExp");

                entity.Property(e => e.CGaccRexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_GAccRExp");

                entity.Property(e => e.CGrndLinkId).HasColumnName("C_GrndLinkID");

                entity.Property(e => e.CIncQty).HasColumnName("C_IncQty");

                entity.Property(e => e.CProdId).HasColumnName("C_ProdID");

                entity.Property(e => e.CProdVol).HasColumnName("C_ProdVol");

                entity.Property(e => e.CStockId).HasColumnName("C_StockID");

                entity.Property(e => e.CStockVol).HasColumnName("C_StockVol");

                entity.Property(e => e.CVolId).HasColumnName("C_VolID");

                entity.Property(e => e.CVolVol).HasColumnName("C_VolVol");

                entity.Property(e => e.DAddQty).HasColumnName("D_AddQty");

                entity.Property(e => e.DAssId).HasColumnName("D_AssID");

                entity.Property(e => e.DAssVol).HasColumnName("D_AssVol");

                entity.Property(e => e.DCodeId1).HasColumnName("D_CodeID1");

                entity.Property(e => e.DCodeId2).HasColumnName("D_CodeID2");

                entity.Property(e => e.DCodeId3).HasColumnName("D_CodeID3");

                entity.Property(e => e.DCodeId4).HasColumnName("D_CodeID4");

                entity.Property(e => e.DCodeId5).HasColumnName("D_CodeID5");

                entity.Property(e => e.DCodeVol1).HasColumnName("D_CodeVol1");

                entity.Property(e => e.DCodeVol2).HasColumnName("D_CodeVol2");

                entity.Property(e => e.DCodeVol3).HasColumnName("D_CodeVol3");

                entity.Property(e => e.DCodeVol4).HasColumnName("D_CodeVol4");

                entity.Property(e => e.DCodeVol5).HasColumnName("D_CodeVol5");

                entity.Property(e => e.DCompId).HasColumnName("D_CompID");

                entity.Property(e => e.DCompVol).HasColumnName("D_CompVol");

                entity.Property(e => e.DEmpId).HasColumnName("D_EmpID");

                entity.Property(e => e.DEmpVol).HasColumnName("D_EmpVol");

                entity.Property(e => e.DGaccEexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_GAccEExp");

                entity.Property(e => e.DGaccRexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_GAccRExp");

                entity.Property(e => e.DGrndLinkId).HasColumnName("D_GrndLinkID");

                entity.Property(e => e.DIncQty).HasColumnName("D_IncQty");

                entity.Property(e => e.DProdId).HasColumnName("D_ProdID");

                entity.Property(e => e.DProdVol).HasColumnName("D_ProdVol");

                entity.Property(e => e.DStockId).HasColumnName("D_StockID");

                entity.Property(e => e.DStockVol).HasColumnName("D_StockVol");

                entity.Property(e => e.DVolId).HasColumnName("D_VolID");

                entity.Property(e => e.DVolVol).HasColumnName("D_VolVol");

                entity.Property(e => e.Eexp)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.EexpQty)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("EExpQty");

                entity.Property(e => e.InCc).HasColumnName("InCC");

                entity.Property(e => e.Lexp)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.Property(e => e.LexpQty)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("LExpQty");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RGoperFc>(entity =>
            {
                entity.HasKey(e => new { e.GoperId, e.SrcPosId })
                    .HasName("_pk_r_GOperFC");

                entity.ToTable("r_GOperFC", "dbo");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CAssExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_AssExpE");

                entity.Property(e => e.CAssExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_AssExpR");

                entity.Property(e => e.CCode1ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code1ExpE");

                entity.Property(e => e.CCode1ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code1ExpR");

                entity.Property(e => e.CCode2ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code2ExpE");

                entity.Property(e => e.CCode2ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code2ExpR");

                entity.Property(e => e.CCode3ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code3ExpE");

                entity.Property(e => e.CCode3ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code3ExpR");

                entity.Property(e => e.CCode4ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code4ExpE");

                entity.Property(e => e.CCode4ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code4ExpR");

                entity.Property(e => e.CCode5ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code5ExpE");

                entity.Property(e => e.CCode5ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Code5ExpR");

                entity.Property(e => e.CCompExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_CompExpE");

                entity.Property(e => e.CCompExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_CompExpR");

                entity.Property(e => e.CEmpExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_EmpExpE");

                entity.Property(e => e.CEmpExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_EmpExpR");

                entity.Property(e => e.CProdExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_ProdExpE");

                entity.Property(e => e.CProdExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_ProdExpR");

                entity.Property(e => e.CStockExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_StockExpE");

                entity.Property(e => e.CStockExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_StockExpR");

                entity.Property(e => e.CVol1ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol1ExpE");

                entity.Property(e => e.CVol1ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol1ExpR");

                entity.Property(e => e.CVol2ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol2ExpE");

                entity.Property(e => e.CVol2ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol2ExpR");

                entity.Property(e => e.CVol3ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol3ExpE");

                entity.Property(e => e.CVol3ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_Vol3ExpR");

                entity.Property(e => e.CVolExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_VolExpE");

                entity.Property(e => e.CVolExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("C_VolExpR");
            });

            modelBuilder.Entity<RGoperFd>(entity =>
            {
                entity.HasKey(e => new { e.GoperId, e.SrcPosId })
                    .HasName("_pk_r_GOperFD");

                entity.ToTable("r_GOperFD", "dbo");

                entity.Property(e => e.GoperId).HasColumnName("GOperID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DAssExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_AssExpE");

                entity.Property(e => e.DAssExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_AssExpR");

                entity.Property(e => e.DCode1ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code1ExpE");

                entity.Property(e => e.DCode1ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code1ExpR");

                entity.Property(e => e.DCode2ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code2ExpE");

                entity.Property(e => e.DCode2ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code2ExpR");

                entity.Property(e => e.DCode3ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code3ExpE");

                entity.Property(e => e.DCode3ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code3ExpR");

                entity.Property(e => e.DCode4ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code4ExpE");

                entity.Property(e => e.DCode4ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code4ExpR");

                entity.Property(e => e.DCode5ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code5ExpE");

                entity.Property(e => e.DCode5ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Code5ExpR");

                entity.Property(e => e.DCompExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_CompExpE");

                entity.Property(e => e.DCompExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_CompExpR");

                entity.Property(e => e.DEmpExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_EmpExpE");

                entity.Property(e => e.DEmpExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_EmpExpR");

                entity.Property(e => e.DProdExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_ProdExpE");

                entity.Property(e => e.DProdExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_ProdExpR");

                entity.Property(e => e.DStockExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_StockExpE");

                entity.Property(e => e.DStockExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_StockExpR");

                entity.Property(e => e.DVol1ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol1ExpE");

                entity.Property(e => e.DVol1ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol1ExpR");

                entity.Property(e => e.DVol2ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol2ExpE");

                entity.Property(e => e.DVol2ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol2ExpR");

                entity.Property(e => e.DVol3ExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol3ExpE");

                entity.Property(e => e.DVol3ExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_Vol3ExpR");

                entity.Property(e => e.DVolExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_VolExpE");

                entity.Property(e => e.DVolExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("D_VolExpR");
            });

            modelBuilder.Entity<RGvol>(entity =>
            {
                entity.HasKey(e => e.GvolId)
                    .HasName("pk_r_GVols");

                entity.ToTable("r_GVols", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.GvolName, "GVolName")
                    .IsUnique();

                entity.Property(e => e.GvolId)
                    .ValueGeneratedNever()
                    .HasColumnName("GVolID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.GvolName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("GVolName");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RHoliday>(entity =>
            {
                entity.HasKey(e => e.HolidayDate)
                    .HasName("pk_r_Holidays");

                entity.ToTable("r_Holidays", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.HolidayName, "HolidayName")
                    .IsUnique();

                entity.Property(e => e.HolidayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DecWtime).HasColumnName("DecWTime");

                entity.Property(e => e.HolidayName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RLevy>(entity =>
            {
                entity.HasKey(e => e.LevyId)
                    .HasName("pk_r_Levies");

                entity.ToTable("r_Levies", "dbo");

                entity.Property(e => e.LevyId)
                    .ValueGeneratedNever()
                    .HasColumnName("LevyID");

                entity.Property(e => e.LevyName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RLevyCr>(entity =>
            {
                entity.HasKey(e => new { e.LevyId, e.CashType, e.TaxTypeId })
                    .HasName("pk_r_LevyCR");

                entity.ToTable("r_LevyCR", "dbo");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.CrtaxPercent)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CRTaxPercent");

                entity.Property(e => e.TaxId).HasColumnName("TaxID");
            });

            modelBuilder.Entity<RLevyRate>(entity =>
            {
                entity.HasKey(e => new { e.LevyId, e.ChDate })
                    .HasName("pk_r_LevyRates");

                entity.ToTable("r_LevyRates", "dbo");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LevyPercent).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RMenu>(entity =>
            {
                entity.HasKey(e => e.MenuId)
                    .HasName("pk_r_Menu");

                entity.ToTable("r_Menu", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.MenuId)
                    .ValueGeneratedNever()
                    .HasColumnName("MenuID");

                entity.Property(e => e.BgColor).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Picture).HasColumnType("image");
            });

            modelBuilder.Entity<RMenuM>(entity =>
            {
                entity.HasKey(e => new { e.MenuId, e.SrcPosId })
                    .HasName("pk_r_MenuM");

                entity.ToTable("r_MenuM", "dbo");

                entity.HasIndex(e => e.SubmenuId, "SubmenuID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.SubmenuId).HasColumnName("SubmenuID");
            });

            modelBuilder.Entity<RMenuP>(entity =>
            {
                entity.HasKey(e => new { e.MenuId, e.SrcPosId })
                    .HasName("pk_r_MenuP");

                entity.ToTable("r_MenuP", "dbo");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Color).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<RMod>(entity =>
            {
                entity.HasKey(e => e.ModCode)
                    .HasName("pk_r_Mods")
                    .IsClustered(false);

                entity.ToTable("r_Mods", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ModName, "ModName")
                    .IsUnique();

                entity.Property(e => e.ModCode).ValueGeneratedNever();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.MaxValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MinValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ModName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PcatFilter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PCatFilter");

                entity.Property(e => e.Pgr1Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr1Filter");

                entity.Property(e => e.Pgr2Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr2Filter");

                entity.Property(e => e.Pgr3Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr3Filter");

                entity.Property(e => e.PgrFilter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGrFilter");

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.Property(e => e.PprodFilter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PProdFilter");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<RNorm>(entity =>
            {
                entity.HasKey(e => e.YearId)
                    .HasName("pk_r_Norms");

                entity.ToTable("r_Norms", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.YearName, "YearName")
                    .IsUnique();

                entity.Property(e => e.YearId)
                    .ValueGeneratedNever()
                    .HasColumnName("YearID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.YearName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RNormMh>(entity =>
            {
                entity.HasKey(e => new { e.YearId, e.MonthId, e.WweekTypeId })
                    .HasName("PK__r_NormMH_new__76D20210");

                entity.ToTable("r_NormMH", "dbo");

                entity.Property(e => e.YearId).HasColumnName("YearID");

                entity.Property(e => e.MonthId).HasColumnName("MonthID");

                entity.Property(e => e.WweekTypeId).HasColumnName("WWeekTypeID");

                entity.Property(e => e.DaysNorm).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.HoursNorm).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ROper>(entity =>
            {
                entity.HasKey(e => e.OperId)
                    .HasName("pk_r_Opers");

                entity.ToTable("r_Opers", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OperName, "OperName")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OperPwd, "OperPwd")
                    .HasFillFactor(90);

                entity.Property(e => e.OperId)
                    .ValueGeneratedNever()
                    .HasColumnName("OperID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.OperLockPwd)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ROperCr>(entity =>
            {
                entity.HasKey(e => new { e.Crid, e.OperId })
                    .HasName("_pk_r_CRMO")
                    .IsClustered(false);

                entity.ToTable("r_OperCRs", "dbo");

                entity.HasIndex(e => e.Crid, "CRID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CroperId, "CROperID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OperId, "OperID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OperPwd, "OperPwd")
                    .HasFillFactor(90);

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.AllowAddToChequeFromCat)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AllowChangeDctype).HasColumnName("AllowChangeDCType");

                entity.Property(e => e.AllowChequeClose)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cradmin).HasColumnName("CRAdmin");

                entity.Property(e => e.CroperId).HasColumnName("CROperID");

                entity.Property(e => e.Crvisible).HasColumnName("CRVisible");

                entity.Property(e => e.OperMaxQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ROrderMonitor>(entity =>
            {
                entity.HasKey(e => e.OrderMonitorId)
                    .HasName("pk_r_OrderMonitors");

                entity.ToTable("r_OrderMonitors", "dbo");

                entity.Property(e => e.OrderMonitorId)
                    .ValueGeneratedNever()
                    .HasColumnName("OrderMonitorID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderMonitorName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PcatFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PCatFilter");

                entity.Property(e => e.Pgr1Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr1Filter");

                entity.Property(e => e.Pgr2Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr2Filter");

                entity.Property(e => e.Pgr3Filter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGr3Filter");

                entity.Property(e => e.PgrFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PGrFilter");

                entity.Property(e => e.PprodFilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PProdFilter");

                entity.Property(e => e.Wpidfilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("WPIDFilter");
            });

            modelBuilder.Entity<ROur>(entity =>
            {
                entity.HasKey(e => e.OurId)
                    .HasName("pk_r_Ours");

                entity.ToTable("r_Ours", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.Code, "Code");

                entity.HasIndex(e => e.OurName, "OurName")
                    .IsUnique();

                entity.HasIndex(e => e.TaxCode, "TaxCode");

                entity.HasIndex(e => e.TaxOkpo, "TaxOKPO");

                entity.HasIndex(e => e.TaxRegNo, "TaxRegNo");

                entity.Property(e => e.OurId)
                    .ValueGeneratedNever()
                    .HasColumnName("OurID");

                entity.Property(e => e.ActType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ActTypeCved)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ActTypeCVED");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DayBtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DayBTime");

                entity.Property(e => e.DayEtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DayETime");

                entity.Property(e => e.EcActType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EvenBtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EvenBTime");

                entity.Property(e => e.EvenEtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EvenETime");

                entity.Property(e => e.EvenPayFac).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExcComRegNum)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FinForm)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FixTaxPercent).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.IsResident).HasDefaultValueSql("((1))");

                entity.Property(e => e.Job1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Job2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Job3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MinExcPowerId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MinExcPowerID");

                entity.Property(e => e.NightBtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NightBTime");

                entity.Property(e => e.NightEtime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("NightETime");

                entity.Property(e => e.NightPayFac).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurNameFull)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OurShort)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OverPayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PensFundId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PensFundID");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PostIndex)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PropForm)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SocAddFundId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SocAddFundID");

                entity.Property(e => e.SocInsFundId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SocInsFundID");

                entity.Property(e => e.SocUnEfundId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SocUnEFundID");

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxOkpo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TaxOKPO");

                entity.Property(e => e.TaxRegNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TerritoryId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TerritoryID");
            });

            modelBuilder.Entity<ROurValue>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.VarName })
                    .HasName("pk_r_OurValues")
                    .IsClustered(false);

                entity.ToTable("r_OurValues", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.VarName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarValue)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ROursAc>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.AccountAc })
                    .HasName("_pk_r_OursAC")
                    .IsClustered(false);

                entity.ToTable("r_OursAC", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AccountAc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.GaccId).HasColumnName("GAccID");

                entity.Property(e => e.Ibancode)
                    .HasMaxLength(34)
                    .IsUnicode(false)
                    .HasColumnName("IBANCode");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ROursCc>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.AccountCc })
                    .HasName("_pk_r_OursCC")
                    .IsClustered(false);

                entity.ToTable("r_OursCC", "dbo");

                entity.HasIndex(e => e.AccountCc, "AccountCC");

                entity.HasIndex(e => e.BankId, "BankID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AccountCc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.GaccId).HasColumnName("GAccID");

                entity.Property(e => e.Ibancode)
                    .HasMaxLength(34)
                    .IsUnicode(false)
                    .HasColumnName("IBANCode");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPayForm>(entity =>
            {
                entity.HasKey(e => e.PayFormCode)
                    .HasName("pk_r_PayForms");

                entity.ToTable("r_PayForms", "dbo");

                entity.Property(e => e.PayFormCode).ValueGeneratedNever();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DctypeGcode).HasColumnName("DCTypeGCode");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NotesLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NotesMask)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PayFormName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumLabel)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPayType>(entity =>
            {
                entity.HasKey(e => e.PayTypeId)
                    .HasName("pk_r_PayTypes");

                entity.ToTable("r_PayTypes", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PayTypeCatId, "PayTypeCatID");

                entity.HasIndex(e => e.PayTypeName, "PayTypeName")
                    .IsUnique();

                entity.Property(e => e.PayTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("PayTypeID");

                entity.Property(e => e.BincomeTaxExpE)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BIncomeTaxExpE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BincomeTaxExpR)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BIncomeTaxExpR")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDateFieldE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DocDateFieldR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PayTypeCatId).HasColumnName("PayTypeCatID");

                entity.Property(e => e.PayTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocExpE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocExpR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocFilterE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocFilterR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocTypeE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocTypeR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UniSocChargeRateExpE)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.UniSocChargeRateExpR)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.UniSocDedRateExpE)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.UniSocDedRateExpR)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<RPayTypeCat>(entity =>
            {
                entity.HasKey(e => e.PayTypeCatId)
                    .HasName("pk_r_PayTypeCats");

                entity.ToTable("r_PayTypeCats", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PayTypeCatName, "PayTypeCatName")
                    .IsUnique();

                entity.Property(e => e.PayTypeCatId)
                    .ValueGeneratedNever()
                    .HasColumnName("PayTypeCatID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PayTypeCatName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPc>(entity =>
            {
                entity.HasKey(e => e.Pccode)
                    .HasName("pk_r_PCs")
                    .IsClustered(false);

                entity.ToTable("r_PCs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.Pcname, "PCName")
                    .IsUnique();

                entity.Property(e => e.Pccode)
                    .ValueGeneratedNever()
                    .HasColumnName("PCCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pcname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PCName");

                entity.Property(e => e.Rasconnection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RASConnection");

                entity.Property(e => e.SyncBy).HasDefaultValueSql("(0)");

                entity.Property(e => e.UseRas).HasColumnName("UseRAS");
            });

            modelBuilder.Entity<RPerson>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("pk_r_Persons");

                entity.ToTable("r_Persons", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .IsUnique()
                    .HasFilter("([BarCode] IS NOT NULL AND [BarCode]<>'')");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "EMail")
                    .IsUnique()
                    .HasFilter("([EMail] IS NOT NULL AND [EMail]<>'')");

                entity.HasIndex(e => new { e.Phone, e.Patronymic, e.Name, e.Surname, e.Birthday, e.Email }, "FullName")
                    .IsUnique()
                    .HasFilter("([Phone] IS NOT NULL AND [Phone]<>'')");

                entity.HasIndex(e => e.Phone, "Phone")
                    .IsUnique()
                    .HasFilter("([Phone] IS NOT NULL AND [Phone]<>'')");

                entity.Property(e => e.PersonId)
                    .ValueGeneratedNever()
                    .HasColumnName("PersonID");

                entity.Property(e => e.AddVk).HasColumnName("AddVK");

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EMail");

                entity.Property(e => e.Empid)
                    .HasColumnName("empid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactAptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactBlock)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactCity)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactDistrict)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactHouse)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactPostIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FactRegion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FactStreet)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FillingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NotReceiveEmail).HasColumnName("NotReceiveEMail");

                entity.Property(e => e.NotReceiveSms).HasColumnName("NotReceiveSMS");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneHome)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneWork)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.Property(e => e.Preferences)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ReferalPersonId).HasColumnName("ReferalPersonID");

                entity.Property(e => e.Surname)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPersonDc>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.DcardChId })
                    .HasName("pk_r_PersonDC");

                entity.ToTable("r_PersonDC", "dbo");

                entity.HasIndex(e => e.DcardChId, "DCardChID")
                    .IsUnique();

                entity.HasIndex(e => e.PersonId, "PersonID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.DcardCh)
                    .WithOne(p => p.RPersonDc)
                    .HasForeignKey<RPersonDc>(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_r_PersonDC_r_DCards");
            });

            modelBuilder.Entity<RPersonExecutorsBl>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.ExecutorId })
                    .HasName("pk_r_PersonExecutorsBL");

                entity.ToTable("r_PersonExecutorsBL", "dbo");

                entity.HasIndex(e => e.ExecutorId, "ExecutorID");

                entity.HasIndex(e => e.PersonId, "PersonID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.ExecutorId).HasColumnName("ExecutorID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPersonKin>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.SrcPosId })
                    .HasName("pk_r_PersonKin");

                entity.ToTable("r_PersonKin", "dbo");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.KinBirthday).HasColumnType("smalldatetime");

                entity.Property(e => e.KinName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPersonPreference>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.ExecutorId, e.SrvcId, e.ResourceId })
                    .HasName("pk_r_PersonPreferences");

                entity.ToTable("r_PersonPreferences", "dbo");

                entity.HasIndex(e => e.ExecutorId, "ExecutorID");

                entity.HasIndex(e => e.PersonId, "PersonID");

                entity.HasIndex(e => e.ResourceId, "ResourceID");

                entity.HasIndex(e => e.SrvcId, "SrvcID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.ExecutorId).HasColumnName("ExecutorID");

                entity.Property(e => e.SrvcId).HasColumnName("SrvcID");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPersonResourcesBl>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.ResourceId })
                    .HasName("pk_r_PersonResourcesBL");

                entity.ToTable("r_PersonResourcesBL", "dbo");

                entity.HasIndex(e => e.PersonId, "PersonID");

                entity.HasIndex(e => e.ResourceId, "ResourceID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RPl>(entity =>
            {
                entity.HasKey(e => e.Plid)
                    .HasName("pk_r_PLs");

                entity.ToTable("r_PLs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.Plname, "PLName")
                    .IsUnique();

                entity.Property(e => e.Plid)
                    .ValueGeneratedNever()
                    .HasColumnName("PLID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Plname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PLName");
            });

            modelBuilder.Entity<RPospay>(entity =>
            {
                entity.HasKey(e => e.PospayId)
                    .HasName("pk_r_POSPays")
                    .IsClustered(false);

                entity.ToTable("r_POSPays", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PospayName, "POSPayName")
                    .IsUnique();

                entity.Property(e => e.PospayId)
                    .ValueGeneratedNever()
                    .HasColumnName("POSPayID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Ip)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PospayClass)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayClass");

                entity.Property(e => e.PospayName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayName");

                entity.Property(e => e.PospayPort).HasColumnName("POSPayPort");

                entity.Property(e => e.PospayTimeout).HasColumnName("POSPayTimeout");
            });

            modelBuilder.Entity<RPost>(entity =>
            {
                entity.HasKey(e => e.PostId)
                    .HasName("pk_r_Posts");

                entity.ToTable("r_Posts", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PostCid, "PostCID");

                entity.HasIndex(e => e.PostName, "PostName")
                    .IsUnique();

                entity.HasIndex(e => e.PostTypeId, "PostTypeID");

                entity.Property(e => e.PostId)
                    .ValueGeneratedNever()
                    .HasColumnName("PostID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CostGaccId).HasColumnName("CostGAccID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PostCid).HasColumnName("PostCID");

                entity.Property(e => e.PostClassifierCode)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PostName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PostTypeId).HasColumnName("PostTypeID");

                entity.Property(e => e.Rank).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<RPostC>(entity =>
            {
                entity.HasKey(e => e.PostCid)
                    .HasName("pk_r_PostC");

                entity.ToTable("r_PostC", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PostCname, "PostCName")
                    .IsUnique();

                entity.Property(e => e.PostCid)
                    .ValueGeneratedNever()
                    .HasColumnName("PostCID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PostCname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PostCName");
            });

            modelBuilder.Entity<RPostMc>(entity =>
            {
                entity.HasKey(e => new { e.PostId, e.EmpClass })
                    .HasName("_pk_r_PostMC")
                    .IsClustered(false);

                entity.ToTable("r_PostMC", "dbo");

                entity.HasIndex(e => e.EmpClass, "EmpClass");

                entity.HasIndex(e => e.PostId, "PostID");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.ClassFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ClassName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ClassSalary).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RPrev>(entity =>
            {
                entity.HasKey(e => e.PrevId)
                    .HasName("pk_r_Prevs");

                entity.ToTable("r_Prevs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PrevFiscId, "PrevFiscID");

                entity.HasIndex(e => e.PrevName, "PrevName")
                    .IsUnique();

                entity.Property(e => e.PrevId)
                    .ValueGeneratedNever()
                    .HasColumnName("PrevID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PrevDocId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PrevDocID");

                entity.Property(e => e.PrevDocItem)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrevDocPart)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrevDocPoint)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrevFiscId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PrevFiscID");

                entity.Property(e => e.PrevName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SickPayPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseIncomeTaxPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseIncomeTaxReliefPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UsePensFundPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseSocInsurePrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseTotAccidentPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseTotPensFundPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseTotSocInsurePrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseTotUnEmployPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.UseUnEmployPrc).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RProcessing>(entity =>
            {
                entity.HasKey(e => e.ProcessingId)
                    .HasName("pk_r_Processings");

                entity.ToTable("r_Processings", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ProcessingName, "ProcessingName")
                    .IsUnique();

                entity.Property(e => e.ProcessingId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProcessingID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ExtraInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Path)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessingName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessingType).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetryTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<RProd>(entity =>
            {
                entity.HasKey(e => e.ProdId)
                    .HasName("pk_r_Prods");

                entity.ToTable("r_Prods", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CounId, "CounID");

                entity.HasIndex(e => e.CstDty2, "CstDty2");

                entity.HasIndex(e => e.PbgrId, "PBGrID");

                entity.HasIndex(e => e.PcatId, "PCatID");

                entity.HasIndex(e => e.PgrAid, "PGrAID");

                entity.HasIndex(e => e.PgrId, "PGrID");

                entity.HasIndex(e => e.PgrId1, "PGrID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PgrId2, "PGrID2");

                entity.HasIndex(e => e.PgrId3, "PGrID3");

                entity.HasIndex(e => new { e.ProdId, e.InRems }, "ProdID_InRems");

                entity.HasIndex(e => e.ProdName, "ProdName")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Um, "UM");

                entity.Property(e => e.ProdId)
                    .ValueGeneratedNever()
                    .HasColumnName("ProdID");

                entity.Property(e => e.Age).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Article1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Article2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Article3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Article4)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AssPriceSeries).HasDefaultValueSql("((0))");

                entity.Property(e => e.AssortmentPriceName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BrendId)
                    .HasColumnName("BrendID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Capacity)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CellNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodePriceSegment).HasDefaultValueSql("((0))");

                entity.Property(e => e.ColCatId)
                    .HasColumnName("ColCatID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ConsumerExpDate)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CounId).HasColumnName("CounID");

                entity.Property(e => e.Country)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("([dbo].[zf_GetDate](getdate()))");

                entity.Property(e => e.CstDty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstDty2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstExc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocValidPeriod).HasColumnType("smalldatetime");

                entity.Property(e => e.EexpSet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EExpSet");

                entity.Property(e => e.EpId).HasColumnName("EpID");

                entity.Property(e => e.ExciseGrId).HasColumnName("ExciseGrID");

                entity.Property(e => e.Extra1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra4).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra5).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.File1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FirstPriceProduct).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Importer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ismarriage)
                    .HasColumnName("ismarriage")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LexpSet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LExpSet");

                entity.Property(e => e.MainProdId).HasColumnName("MainProdID");

                entity.Property(e => e.Materials)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MaxExtra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MaxPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MaxPriceMC");

                entity.Property(e => e.MerchGrId).HasColumnName("MerchGrID");

                entity.Property(e => e.MinExtra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MinPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MinPriceMC");

                entity.Property(e => e.MinRem).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Mplicity).HasColumnName("MPlicity");

                entity.Property(e => e.Norma1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma4).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma5).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notemenager)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Otm)
                    .HasColumnName("otm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatKmid)
                    .HasColumnName("PcatKMID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pcatsubgroupid).HasDefaultValueSql("((0))");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.PgrId6).HasColumnName("PGrID6");

                entity.Property(e => e.PrepareTime).HasDefaultValueSql("(0)");

                entity.Property(e => e.PrintSticker).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProdAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdCardNotChecked).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProdGenderId).HasColumnName("prodGenderID");

                entity.Property(e => e.ProdId1c)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ProdID1C");

                entity.Property(e => e.ProdIdroleId)
                    .HasColumnName("ProdIDRoleID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdOnHook).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProdPpdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ProdPPDate");

                entity.Property(e => e.Producer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProviderProdName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RecCatId).HasColumnName("RecCatID");

                entity.Property(e => e.RecMaxPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RecMaxPriceCC");

                entity.Property(e => e.RecMinPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RecMinPriceCC");

                entity.Property(e => e.RecRemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecStdPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RecStdPriceCC");

                entity.Property(e => e.Regulations)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ReviewId).HasColumnName("ReviewID");

                entity.Property(e => e.ScaleComponents)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleConditions)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleGrId).HasColumnName("ScaleGrID");

                entity.Property(e => e.ScaleStandard)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ShopExpDate)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SoftMultiplicity).HasDefaultValueSql("((0))");

                entity.Property(e => e.StdExtraE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StdExtraR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.StockExpDate)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SupExpDate)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxFreeReason)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.TrackWms)
                    .HasColumnName("TrackWMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TypeTreatment).HasDefaultValueSql("((0))");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Warnings)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RProdAc>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.Plid, e.ChPlid })
                    .HasName("_pk_r_ProdAC")
                    .IsClustered(false);

                entity.ToTable("r_ProdAC", "dbo");

                entity.HasIndex(e => e.ChPlid, "ChPLID");

                entity.HasIndex(e => e.ExpE, "ExpE");

                entity.HasIndex(e => e.ExpR, "ExpR");

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => new { e.ProdId, e.Plid }, "r_ProdMPr_ProdAC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.ChPlid).HasColumnName("ChPLID");

                entity.Property(e => e.ExpE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExpR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RProdBg>(entity =>
            {
                entity.HasKey(e => e.PbgrId)
                    .HasName("pk_r_ProdBG");

                entity.ToTable("r_ProdBG", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PbgrName, "PBGrName")
                    .IsUnique();

                entity.Property(e => e.PbgrId)
                    .ValueGeneratedNever()
                    .HasColumnName("PBGrID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PbgrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PBGrName");
            });

            modelBuilder.Entity<RProdBserv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("r_ProdBServs", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.BservName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BServName");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<RProdC>(entity =>
            {
                entity.HasKey(e => e.PcatId)
                    .HasName("pk_r_ProdC");

                entity.ToTable("r_ProdC", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PcatName, "PCatName")
                    .IsUnique();

                entity.Property(e => e.PcatId)
                    .ValueGeneratedNever()
                    .HasColumnName("PCatID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PcatName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PCatName");
            });

            modelBuilder.Entity<RProdCv>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.CompId, e.Bdate })
                    .HasName("_pk_r_ProdCV")
                    .IsClustered(false);

                entity.ToTable("r_ProdCV", "dbo");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Value1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value3).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RProdEc>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.CompId, e.ExtProdId })
                    .HasName("_pk_r_ProdEC")
                    .IsClustered(false);

                entity.ToTable("r_ProdEC", "dbo");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.ExtProdId, "ExtProdID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ExtProdId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ExtProdID");
            });

            modelBuilder.Entity<RProdG>(entity =>
            {
                entity.HasKey(e => e.PgrId)
                    .HasName("pk_r_ProdG");

                entity.ToTable("r_ProdG", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PgrName, "PGrName")
                    .IsUnique();

                entity.Property(e => e.PgrId)
                    .ValueGeneratedNever()
                    .HasColumnName("PGrID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PgrName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName");
            });

            modelBuilder.Entity<RProdG1>(entity =>
            {
                entity.HasKey(e => e.PgrId1)
                    .HasName("pk_r_ProdG1");

                entity.ToTable("r_ProdG1", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PgrName1, "PGrName1")
                    .IsUnique();

                entity.Property(e => e.PgrId1)
                    .ValueGeneratedNever()
                    .HasColumnName("PGrID1");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PgrName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName1");
            });

            modelBuilder.Entity<RProdG2>(entity =>
            {
                entity.HasKey(e => e.PgrId2)
                    .HasName("pk_r_ProdG2");

                entity.ToTable("r_ProdG2", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PgrName2, "PGrName2")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.PgrId2)
                    .ValueGeneratedNever()
                    .HasColumnName("PGrID2");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PgrName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName2");
            });

            modelBuilder.Entity<RProdG3>(entity =>
            {
                entity.HasKey(e => e.PgrId3)
                    .HasName("pk_r_ProdG3");

                entity.ToTable("r_ProdG3", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PgrName3, "PGrName3")
                    .IsUnique();

                entity.Property(e => e.PgrId3)
                    .ValueGeneratedNever()
                    .HasColumnName("PGrID3");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PgrName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrName3");

                entity.Property(e => e.SaleStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SeasonPutOutDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<RProdImage>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.SrcPosId })
                    .HasName("pk_r_ProdImages");

                entity.ToTable("r_ProdImages", "dbo");

                entity.HasIndex(e => new { e.ProdId, e.IsMain }, "ProdID_IsMain");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Picture).HasColumnType("image");
            });

            modelBuilder.Entity<RProdLv>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.LevyId })
                    .HasName("pk_r_ProdLV");

                entity.ToTable("r_ProdLV", "dbo");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");
            });

            modelBuilder.Entity<RProdM>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.SprodId })
                    .HasName("_pk_r_ProdMS")
                    .IsClustered(false);

                entity.ToTable("r_ProdMS", "dbo");

                entity.HasIndex(e => e.Eexp, "EExp");

                entity.HasIndex(e => e.EexpSub, "EExpSub");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Lexp, "RExp");

                entity.HasIndex(e => e.LexpSub, "RExpSub");

                entity.HasIndex(e => e.SprodId, "SProdID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SprodId).HasColumnName("SProdID");

                entity.Property(e => e.Eexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.EexpSub)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EExpSub");

                entity.Property(e => e.Lexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.Property(e => e.LexpSub)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LExpSub");
            });

            modelBuilder.Entity<RProdMa>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.AprodId })
                    .HasName("_pk_r_ProdMA")
                    .IsClustered(false);

                entity.ToTable("r_ProdMA", "dbo");

                entity.HasIndex(e => e.AprodId, "AProdID");

                entity.HasIndex(e => new { e.ProdId, e.Priority }, "Priority");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.AprodId).HasColumnName("AProdID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValidSets)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RProdMe>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.CodeId1, e.CodeId2, e.CodeId3, e.CodeId4, e.CodeId5 })
                    .HasName("_pk_r_ProdME")
                    .IsClustered(false);

                entity.ToTable("r_ProdME", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.Eexp, "EExp");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Lexp, "RExp");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Eexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LExp");
            });

            modelBuilder.Entity<RProdMp>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.Plid })
                    .HasName("_pk_r_ProdMP");

                entity.ToTable("r_ProdMP", "dbo");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => e.PriceMc, "PriceMC")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");
            });

            modelBuilder.Entity<RProdMp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("r_ProdMPs", "dbo");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<RProdMpch>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_r_ProdMPCh")
                    .IsClustered(false);

                entity.ToTable("r_ProdMPCh", "dbo");

                entity.HasIndex(e => e.ChDate, "ChDate");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.OldCurrId, "OldCurrID");

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChTime).HasColumnType("smalldatetime");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocChId).HasColumnName("DocChID");

                entity.Property(e => e.OldCurrId).HasColumnName("OldCurrID");

                entity.Property(e => e.OldPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OldPriceMC");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<RProdMpch1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("r_ProdMPChs", "dbo");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChTime).HasColumnType("smalldatetime");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.OldCurrId).HasColumnName("OldCurrID");

                entity.Property(e => e.OldPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OldPriceMC");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RProdMpsE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("r_ProdMPsE", "dbo");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.Plname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PLName");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RProdMq>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.Um })
                    .HasName("_pk_r_ProdMQ");

                entity.ToTable("r_ProdMQ", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .IsUnique();

                entity.HasIndex(e => new { e.BarCode, e.ProdId, e.Qty }, "FindBarCode");

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => e.ProdBarCode, "ProdBarCode");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ProdId, e.BarCode }, "ProdIDBarCode")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.Um, "UM");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Depth)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("depth");

                entity.Property(e => e.Height1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("height1");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OldQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.ProdBarCode)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Space)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("space");

                entity.Property(e => e.TareWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Weight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Weight1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("weight1");

                entity.Property(e => e.Width1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("width1");
            });

            modelBuilder.Entity<RProdMse>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.SprodId })
                    .HasName("_pk_r_ProdMSE");

                entity.ToTable("r_ProdMSE", "dbo");

                entity.HasIndex(e => e.Eexp, "EExp");

                entity.HasIndex(e => e.EexpSub, "EExpSub");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Lexp, "RExp");

                entity.HasIndex(e => e.LexpSub, "RExpSub");

                entity.HasIndex(e => e.SprodId, "SProdID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SprodId).HasColumnName("SProdID");

                entity.Property(e => e.Eexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.EexpSub)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EExpSub");

                entity.Property(e => e.Lexp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.Property(e => e.LexpSub)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LExpSub");
            });

            modelBuilder.Entity<RProdOper>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.SrcPosId })
                    .HasName("pk_r_ProdOpers");

                entity.ToTable("r_ProdOpers", "dbo");

                entity.HasIndex(e => new { e.ProdId, e.OperDesc }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.OperDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Percent1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Percent2).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RProdTurnOver>(entity =>
            {
                entity.HasKey(e => new { e.Edate, e.Bdate, e.StockId, e.ProdId })
                    .HasName("pk_r_ProdTurnOver")
                    .IsClustered(false);

                entity.ToTable("r_ProdTurnOver", "dbo");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.KoeffProfability).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.KoeffTurnOver).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumProfitCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumProfitCC");
            });

            modelBuilder.Entity<RProdValue>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.VarName })
                    .HasName("pk_r_ProdValues")
                    .IsClustered(false);

                entity.ToTable("r_ProdValues", "dbo");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.VarName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarValue)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RProdsDimension>(entity =>
            {
                entity.HasKey(e => e.Prodid)
                    .HasName("pk_r_ProdsDimension")
                    .IsClustered(false);

                entity.ToTable("r_ProdsDimension", "dbo");

                entity.Property(e => e.Prodid)
                    .ValueGeneratedNever()
                    .HasColumnName("prodid");

                entity.Property(e => e.Depth).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Height1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Space)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("space");

                entity.Property(e => e.Weight1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("weight1");

                entity.Property(e => e.Width1).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RProdum>(entity =>
            {
                entity.HasKey(e => e.PgrAid)
                    .HasName("pk_r_ProdA");

                entity.ToTable("r_ProdA", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.PgrAname, "PGrAName")
                    .IsUnique();

                entity.Property(e => e.PgrAid)
                    .ValueGeneratedNever()
                    .HasColumnName("PGrAID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PgrAname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PGrAName");
            });

            modelBuilder.Entity<RResource>(entity =>
            {
                entity.HasKey(e => e.ResourceId)
                    .HasName("pk_r_Resources");

                entity.ToTable("r_Resources", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ResourceName, "ResourceName");

                entity.HasIndex(e => e.ResourceTypeId, "ResourceTypeID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.Property(e => e.ResourceId)
                    .ValueGeneratedNever()
                    .HasColumnName("ResourceID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.MaxClients).HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceTypeId).HasColumnName("ResourceTypeID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<RResourceSched>(entity =>
            {
                entity.HasKey(e => new { e.ResourceId, e.Btime, e.Etime })
                    .HasName("pk_r_ResourceSched");

                entity.ToTable("r_ResourceSched", "dbo");

                entity.HasIndex(e => e.ResourceId, "ResourceID");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.Btime)
                    .HasColumnType("datetime")
                    .HasColumnName("BTime");

                entity.Property(e => e.Etime)
                    .HasColumnType("datetime")
                    .HasColumnName("ETime");
            });

            modelBuilder.Entity<RResourceType>(entity =>
            {
                entity.HasKey(e => e.ResourceTypeId)
                    .HasName("pk_r_ResourceTypes");

                entity.ToTable("r_ResourceTypes", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.ResourceTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ResourceTypeID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RScale>(entity =>
            {
                entity.HasKey(e => e.ScaleId)
                    .HasName("pk_r_Scales");

                entity.ToTable("r_Scales", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ScaleName, "ScaleName")
                    .IsUnique();

                entity.Property(e => e.ScaleId)
                    .ValueGeneratedNever()
                    .HasColumnName("ScaleID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Ip)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.MaxProdId).HasColumnName("MaxProdID");

                entity.Property(e => e.ScaleDefId).HasColumnName("ScaleDefID");

                entity.Property(e => e.ScaleGrId).HasColumnName("ScaleGrID");

                entity.Property(e => e.ScaleInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleSerial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleType).HasDefaultValueSql("(0)");

                entity.Property(e => e.SrvId).HasColumnName("SrvID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<RScaleDef>(entity =>
            {
                entity.HasKey(e => e.ScaleDefId)
                    .HasName("pk_r_ScaleDefs");

                entity.ToTable("r_ScaleDefs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ScaleDefName, "ScaleDefName")
                    .IsUnique();

                entity.Property(e => e.ScaleDefId)
                    .ValueGeneratedNever()
                    .HasColumnName("ScaleDefID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleDefName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleImage)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RScaleDefKey>(entity =>
            {
                entity.HasKey(e => new { e.ScaleDefId, e.ScaleKey })
                    .HasName("pk_r_ScaleDefKeys");

                entity.ToTable("r_ScaleDefKeys", "dbo");

                entity.HasIndex(e => e.ScaleKey, "ScaleKey");

                entity.Property(e => e.ScaleDefId).HasColumnName("ScaleDefID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RScaleGr>(entity =>
            {
                entity.HasKey(e => e.ScaleGrId)
                    .HasName("pk_r_ScaleGrs");

                entity.ToTable("r_ScaleGrs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ScaleGrName, "ScaleGrName")
                    .IsUnique();

                entity.Property(e => e.ScaleGrId)
                    .ValueGeneratedNever()
                    .HasColumnName("ScaleGrID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Iprange)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IPRange");

                entity.Property(e => e.MaxProdId).HasColumnName("MaxProdID");

                entity.Property(e => e.ScaleGrInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleGrName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Shed)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RScaleGrMw>(entity =>
            {
                entity.HasKey(e => new { e.ScaleGrId, e.Wpref })
                    .HasName("pk_r_ScaleGrMW");

                entity.ToTable("r_ScaleGrMW", "dbo");

                entity.HasIndex(e => e.ScaleGrId, "ScaleGrID");

                entity.HasIndex(e => e.Wpref, "WPref");

                entity.Property(e => e.ScaleGrId).HasColumnName("ScaleGrID");

                entity.Property(e => e.Wpref)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("WPref");
            });

            modelBuilder.Entity<RSec>(entity =>
            {
                entity.HasKey(e => e.SecId)
                    .HasName("pk_r_Secs");

                entity.ToTable("r_Secs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.SecName, "SecName")
                    .IsUnique();

                entity.Property(e => e.SecId)
                    .ValueGeneratedNever()
                    .HasColumnName("SecID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CrsecId).HasColumnName("CRSecID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RService>(entity =>
            {
                entity.HasKey(e => e.SrvcId)
                    .HasName("pk_r_Services");

                entity.ToTable("r_Services", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => new { e.ProdId, e.StockId }, "ProdID_StockID")
                    .IsUnique();

                entity.Property(e => e.SrvcId)
                    .ValueGeneratedNever()
                    .HasColumnName("SrvcID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<RServiceCompatibility>(entity =>
            {
                entity.HasKey(e => new { e.SrvcId, e.CompatibleServiceId })
                    .HasName("pk_r_ServiceCompatibility");

                entity.ToTable("r_ServiceCompatibility", "dbo");

                entity.HasIndex(e => e.CompatibleServiceId, "CompatibleServiceID");

                entity.HasIndex(e => e.SrvcId, "SrvcID");

                entity.Property(e => e.SrvcId).HasColumnName("SrvcID");

                entity.Property(e => e.CompatibleServiceId).HasColumnName("CompatibleServiceID");
            });

            modelBuilder.Entity<RServiceResource>(entity =>
            {
                entity.HasKey(e => new { e.SrvcId, e.ResourceTypeId })
                    .HasName("pk_r_ServiceResources");

                entity.ToTable("r_ServiceResources", "dbo");

                entity.HasIndex(e => e.ResourceTypeId, "ResourceTypeID");

                entity.HasIndex(e => e.SrvcId, "SrvcID");

                entity.Property(e => e.SrvcId).HasColumnName("SrvcID");

                entity.Property(e => e.ResourceTypeId).HasColumnName("ResourceTypeID");
            });

            modelBuilder.Entity<RShed>(entity =>
            {
                entity.HasKey(e => e.ShedId)
                    .HasName("pk_r_Sheds");

                entity.ToTable("r_Sheds", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ShedName, "ShedName")
                    .IsUnique();

                entity.HasIndex(e => new { e.WweekTypeId, e.ChId }, "WWeekType")
                    .IsUnique();

                entity.HasIndex(e => e.WweekTypeId, "WWeekTypeID");

                entity.Property(e => e.ShedId)
                    .ValueGeneratedNever()
                    .HasColumnName("ShedID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ShedBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ShedBDate");

                entity.Property(e => e.ShedName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WweekTypeId).HasColumnName("WWeekTypeID");
            });

            modelBuilder.Entity<RShedM>(entity =>
            {
                entity.HasKey(e => new { e.ShedId, e.DayPosId, e.ShiftId })
                    .HasName("_pk_r_ShedMS")
                    .IsClustered(false);

                entity.ToTable("r_ShedMS", "dbo");

                entity.HasIndex(e => e.DayPosId, "DayPosID");

                entity.HasIndex(e => e.ShedId, "ShedID");

                entity.HasIndex(e => e.ShiftId, "ShiftID");

                entity.HasIndex(e => new { e.ShedId, e.DayPosId }, "r_ShedMDr_ShedMS");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.DayPosId).HasColumnName("DayPosID");

                entity.Property(e => e.ShiftId).HasColumnName("ShiftID");

                entity.Property(e => e.BintTime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BIntTime");

                entity.Property(e => e.Btime)
                    .HasColumnType("datetime")
                    .HasColumnName("BTime");

                entity.Property(e => e.EintTime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EIntTime");

                entity.Property(e => e.Etime)
                    .HasColumnType("datetime")
                    .HasColumnName("ETime");

                entity.Property(e => e.IntLength).HasColumnType("smalldatetime");

                entity.Property(e => e.ShiftDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftLength).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<RShedMd>(entity =>
            {
                entity.HasKey(e => new { e.ShedId, e.DayPosId })
                    .HasName("_pk_r_ShedMD")
                    .IsClustered(false);

                entity.ToTable("r_ShedMD", "dbo");

                entity.HasIndex(e => e.DayPosId, "DayPosID");

                entity.HasIndex(e => e.ShedId, "ShedID");

                entity.HasIndex(e => e.ShifsQty, "ShifsQty");

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.DayPosId).HasColumnName("DayPosID");

                entity.Property(e => e.DayDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HoursInDay).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RSpend>(entity =>
            {
                entity.HasKey(e => e.SpendCode)
                    .HasName("pk_r_Spends");

                entity.ToTable("r_Spends", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.SpendName, "SpendName")
                    .IsUnique();

                entity.Property(e => e.SpendCode).ValueGeneratedNever();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RState>(entity =>
            {
                entity.HasKey(e => e.StateCode)
                    .HasName("pk_r_States");

                entity.ToTable("r_States", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.StateName, "StateName")
                    .IsUnique();

                entity.Property(e => e.StateCode).ValueGeneratedNever();

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.StateInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RStateDoc>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.StateCode })
                    .HasName("pk_r_StateDocs")
                    .IsClustered(false);

                entity.ToTable("r_StateDocs", "dbo");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.HasIndex(e => e.StateCode, "StateCode");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.RStateDocs)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_r_StateDocs_z_Docs");
            });

            modelBuilder.Entity<RStateDocsChange>(entity =>
            {
                entity.HasKey(e => new { e.UserCode, e.StateCode })
                    .HasName("pk_r_StateDocsChange")
                    .IsClustered(false);

                entity.ToTable("r_StateDocsChange", "dbo");
            });

            modelBuilder.Entity<RStateRule>(entity =>
            {
                entity.HasKey(e => e.StateRuleCode)
                    .HasName("pk_r_StateRules")
                    .IsClustered(false);

                entity.ToTable("r_StateRules", "dbo");

                entity.HasIndex(e => e.StateCodeFrom, "StateCodeFrom");

                entity.HasIndex(e => e.StateCodeTo, "StateCodeTo");

                entity.HasIndex(e => new { e.StateCodeFrom, e.StateCodeTo }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.StateRuleCode).ValueGeneratedNever();

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RStateRuleUser>(entity =>
            {
                entity.HasKey(e => new { e.StateRuleCode, e.UserCode })
                    .HasName("pk_r_StateRuleUsers")
                    .IsClustered(false);

                entity.ToTable("r_StateRuleUsers", "dbo");

                entity.HasIndex(e => e.UserCode, "UserCode")
                    .HasFillFactor(90);

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.RStateRuleUsers)
                    .HasForeignKey(d => d.UserCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_r_StateRuleUsers_r_Users");
            });

            modelBuilder.Entity<RStock>(entity =>
            {
                entity.HasKey(e => e.StockId)
                    .HasName("pk_r_Stocks");

                entity.ToTable("r_Stocks", "dbo");

                entity.HasIndex(e => e.Amid, "AMID");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CityId, "CityID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => e.StockGid, "StockGID");

                entity.HasIndex(e => e.StockName, "StockName")
                    .IsUnique();

                entity.Property(e => e.StockId)
                    .ValueGeneratedNever()
                    .HasColumnName("StockID");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Amid)
                    .HasColumnName("AMID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.CancelCheque).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChargeRate1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChargeRate2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChargeRate3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CheckoutsQty).HasDefaultValueSql("((1))");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.DenyBargChipRet)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DenyEditQty).HasDefaultValueSql("((0))");

                entity.Property(e => e.DepotCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.DisOpenFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.FormatTtid)
                    .HasColumnName("FormatTTID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.HeatingCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsTradeArea).HasDefaultValueSql("(0)");

                entity.Property(e => e.LimitNeed)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((350))");

                entity.Property(e => e.LimitPpe)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LimitPPE");

                entity.Property(e => e.MobAccept).HasDefaultValueSql("((0))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OverRems).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PlanSumCc1)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PlanSumCC1");

                entity.Property(e => e.PlanSumCc2)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PlanSumCC2");

                entity.Property(e => e.PlanSumCc3)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PlanSumCC3");

                entity.Property(e => e.PlanSumCcstock)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PlanSumCCStock");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.Rmempid)
                    .HasColumnName("RMempid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockGid).HasColumnName("StockGID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockTaxId).HasColumnName("StockTaxID");

                entity.Property(e => e.Tmempid)
                    .HasColumnName("TMempid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransitStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.UseCards).HasDefaultValueSql("((1))");

                entity.Property(e => e.UseInRems)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<RStockCrprod>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.ProdId, e.CrprodGroup })
                    .HasName("pk_r_StockCRProds")
                    .IsClustered(false);

                entity.ToTable("r_StockCRProds", "dbo");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.CrprodGroup).HasColumnName("CRProdGroup");

                entity.Property(e => e.CrprodId).HasColumnName("CRProdID");
            });

            modelBuilder.Entity<RStockG>(entity =>
            {
                entity.HasKey(e => e.StockGid)
                    .HasName("pk_r_StockGs");

                entity.ToTable("r_StockGs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.StockGname, "StockGName")
                    .IsUnique();

                entity.Property(e => e.StockGid)
                    .ValueGeneratedNever()
                    .HasColumnName("StockGID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StockGname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("StockGName");
            });

            modelBuilder.Entity<RStockSub>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.DepId })
                    .HasName("pk_r_StockSubs");

                entity.ToTable("r_StockSubs", "dbo");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.DepId).HasColumnName("DepID");

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");
            });

            modelBuilder.Entity<RSub>(entity =>
            {
                entity.HasKey(e => e.SubId)
                    .HasName("pk_r_Subs");

                entity.ToTable("r_Subs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ShedId, "ShedID");

                entity.HasIndex(e => e.SubName, "SubName")
                    .IsUnique();

                entity.Property(e => e.SubId)
                    .ValueGeneratedNever()
                    .HasColumnName("SubID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DisbDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FormDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ShedId).HasColumnName("ShedID");

                entity.Property(e => e.SubName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRegionId).HasColumnName("TaxRegionID");
            });

            modelBuilder.Entity<RSubStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("r_SubStocks", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");
            });

            modelBuilder.Entity<RTag>(entity =>
            {
                entity.HasKey(e => e.TagId)
                    .HasName("pk_r_Tags")
                    .IsClustered(false);

                entity.ToTable("r_Tags", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.TagId)
                    .ValueGeneratedNever()
                    .HasColumnName("TagID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TagCid).HasColumnName("TagCID");

                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTagC>(entity =>
            {
                entity.HasKey(e => e.TagCid)
                    .HasName("pk_r_TagC")
                    .IsClustered(false);

                entity.ToTable("r_TagC", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.TagCid)
                    .ValueGeneratedNever()
                    .HasColumnName("TagCID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TagCname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TagCName");
            });

            modelBuilder.Entity<RTaxRate>(entity =>
            {
                entity.HasKey(e => new { e.TaxTypeId, e.ChDate })
                    .HasName("pk_r_TaxRates");

                entity.ToTable("r_TaxRates", "dbo");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TaxPercent).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RTaxRegion>(entity =>
            {
                entity.HasKey(e => e.TaxRegionId)
                    .HasName("pk_r_TaxRegions");

                entity.ToTable("r_TaxRegions", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.TaxRegionName, "TaxRegionName")
                    .IsUnique();

                entity.Property(e => e.TaxRegionId)
                    .ValueGeneratedNever()
                    .HasColumnName("TaxRegionID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.TaxRegionName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RTaxRegionRate>(entity =>
            {
                entity.HasKey(e => new { e.TaxRegionId, e.SrcDate })
                    .HasName("pk_r_TaxRegionRates");

                entity.ToTable("r_TaxRegionRates", "dbo");

                entity.Property(e => e.TaxRegionId).HasColumnName("TaxRegionID");

                entity.Property(e => e.SrcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CommunalTaxRate).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<RTaxis>(entity =>
            {
                entity.HasKey(e => e.TaxTypeId)
                    .HasName("pk_r_Taxes");

                entity.ToTable("r_Taxes", "dbo");

                entity.Property(e => e.TaxTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("TaxTypeID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TaxDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxId).HasColumnName("TaxID");

                entity.Property(e => e.TaxName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RUni>(entity =>
            {
                entity.HasKey(e => new { e.RefTypeId, e.RefId })
                    .HasName("pk_r_Uni");

                entity.ToTable("r_Uni", "dbo");

                entity.HasIndex(e => new { e.RefTypeId, e.RefName }, "UniqueName")
                    .IsUnique();

                entity.Property(e => e.RefTypeId).HasColumnName("RefTypeID");

                entity.Property(e => e.RefId).HasColumnName("RefID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RefName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Relevance).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<RUniType>(entity =>
            {
                entity.HasKey(e => e.RefTypeId)
                    .HasName("pk_r_UniTypes");

                entity.ToTable("r_UniTypes", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.RefTypeName, "RefTypeName")
                    .IsUnique();

                entity.Property(e => e.RefTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("RefTypeID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RefTypeName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_r_Users");

                entity.ToTable("r_Users", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.UserName, "UserName")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("UserID");

                entity.Property(e => e.AllowRestChequeDel)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.AllowRestChequeUnite)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.AllowRestViewDesk)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.CanChangeDocId).HasColumnName("CanChangeDocID");

                entity.Property(e => e.CanChangeKursMc).HasColumnName("CanChangeKursMC");

                entity.Property(e => e.CanInitAltsPl).HasColumnName("CanInitAltsPL");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.OpenAgeBqty).HasColumnName("OpenAgeBQty");

                entity.Property(e => e.OpenAgeBtype).HasColumnName("OpenAgeBType");

                entity.Property(e => e.OpenAgeEqty).HasColumnName("OpenAgeEQty");

                entity.Property(e => e.OpenAgeEtype).HasColumnName("OpenAgeEType");

                entity.Property(e => e.PSalaryAcc).HasColumnName("p_SalaryAcc");

                entity.Property(e => e.SCcdiscount).HasColumnName("s_CCDiscount");

                entity.Property(e => e.SCcpl).HasColumnName("s_CCPL");

                entity.Property(e => e.SCcprice).HasColumnName("s_CCPrice");

                entity.Property(e => e.SCost).HasColumnName("s_Cost");

                entity.Property(e => e.SPpacc).HasColumnName("s_PPAcc");

                entity.Property(e => e.ShowPlcange).HasColumnName("ShowPLCange");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RWp>(entity =>
            {
                entity.HasKey(e => e.Wpid)
                    .HasName("pk_r_WPs");

                entity.ToTable("r_WPs", "dbo");

                entity.HasIndex(e => e.Crid, "CRID")
                    .IsUnique();

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.ScaleId, "ScaleID");

                entity.HasIndex(e => e.Wpname, "WPName")
                    .IsUnique();

                entity.Property(e => e.Wpid)
                    .ValueGeneratedNever()
                    .HasColumnName("WPID");

                entity.Property(e => e.AllowChequeClose)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.MetricMaxDays).HasDefaultValueSql("((14))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleId).HasColumnName("ScaleID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Wpname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WPName");

                entity.Property(e => e.WproleId).HasColumnName("WPRoleID");
            });

            modelBuilder.Entity<RWpref>(entity =>
            {
                entity.HasKey(e => e.Wpref)
                    .HasName("pk_r_WPrefs");

                entity.ToTable("r_WPrefs", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.Property(e => e.Wpref)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("WPref");

                entity.Property(e => e.BarDecCount).HasDefaultValueSql("(3)");

                entity.Property(e => e.BarQtyCount).HasDefaultValueSql("(5)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdIdoffset).HasColumnName("ProdIDOffset");
            });

            modelBuilder.Entity<RWprole>(entity =>
            {
                entity.HasKey(e => e.WproleId)
                    .HasName("pk_r_WPRoles");

                entity.ToTable("r_WPRoles", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.MenuId, "MenuID");

                entity.HasIndex(e => e.ProcessingId, "ProcessingID");

                entity.HasIndex(e => e.WproleName, "WPRoleName")
                    .IsUnique();

                entity.Property(e => e.WproleId)
                    .ValueGeneratedNever()
                    .HasColumnName("WPRoleID");

                entity.Property(e => e.AllowManualPasswordInput)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AllowPeriodicReports)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AllowVen).HasDefaultValueSql("((0))");

                entity.Property(e => e.AllowVenEditQty)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ApiServerParams)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.AskDcardsAfterOpen).HasColumnName("AskDCardsAfterOpen");

                entity.Property(e => e.AskDcardsBeforeClose)
                    .IsRequired()
                    .HasColumnName("AskDCardsBeforeClose")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AskParamsBeforeClose)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AskPwdanull).HasColumnName("AskPWDAnull");

                entity.Property(e => e.AskPwdbalance).HasColumnName("AskPWDBalance");

                entity.Property(e => e.AskPwdcn).HasColumnName("AskPWDCn");

                entity.Property(e => e.AskPwdcnCheque).HasColumnName("AskPWDCnCheque");

                entity.Property(e => e.AskPwddcardFind)
                    .IsRequired()
                    .HasColumnName("AskPWDDCardFind")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AskPwddeposit).HasColumnName("AskPWDDeposit");

                entity.Property(e => e.AskPwdfind).HasColumnName("AskPWDFind");

                entity.Property(e => e.AskPwdmoneyBox).HasColumnName("AskPWDMoneyBox");

                entity.Property(e => e.AskPwdperiodRep).HasColumnName("AskPWDPeriodRep");

                entity.Property(e => e.AskPwdposRePay).HasColumnName("AskPWDPosRePay");

                entity.Property(e => e.AskPwdret).HasColumnName("AskPWDRet");

                entity.Property(e => e.AskPwdsuspend).HasColumnName("AskPWDSuspend");

                entity.Property(e => e.AutoSelDiscs)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AutoZrepBalanceCheck)
                    .IsRequired()
                    .HasColumnName("AutoZRepBalanceCheck")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BookingDefaultClientId).HasColumnName("BookingDefaultClientID");

                entity.Property(e => e.BookingTimeRulerBegin).HasColumnType("smalldatetime");

                entity.Property(e => e.BookingTimeRulerEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.CanEditProdId).HasColumnName("CanEditProdID");

                entity.Property(e => e.CanEnterCodeId1)
                    .IsRequired()
                    .HasColumnName("CanEnterCodeID1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanEnterCodeId2)
                    .IsRequired()
                    .HasColumnName("CanEnterCodeID2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanEnterCodeId3)
                    .IsRequired()
                    .HasColumnName("CanEnterCodeID3")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanEnterCodeId4)
                    .IsRequired()
                    .HasColumnName("CanEnterCodeID4")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanEnterCodeId5)
                    .IsRequired()
                    .HasColumnName("CanEnterCodeID5")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanEnterDcard)
                    .IsRequired()
                    .HasColumnName("CanEnterDCard")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CanEnterNotes)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CancelMdiscsWarning)
                    .IsRequired()
                    .HasColumnName("CancelMDiscsWarning")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChangeSumWarning)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CheckRetSum)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CradminEditPbill)
                    .IsRequired()
                    .HasColumnName("CRAdminEditPBill")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CradminRunShift)
                    .IsRequired()
                    .HasColumnName("CRAdminRunShift")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CrchequeCopiesCount)
                    .HasColumnName("CRChequeCopiesCount")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.CrchequeFontSize).HasColumnName("CRChequeFontSize");

                entity.Property(e => e.CrchequeFontSizeReport)
                    .HasColumnName("CRChequeFontSizeReport")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CrunionChequeFontSize)
                    .HasColumnName("CRUnionChequeFontSize")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DecQtyFromRef)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DefaultMenuId).HasColumnName("DefaultMenuID");

                entity.Property(e => e.LoadLinkedMenus)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LoadProdHints)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MaxChange)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((200))");

                entity.Property(e => e.MaxSuspended).HasDefaultValueSql("((3))");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.MixedPays)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NoManualDcardEnter)
                    .IsRequired()
                    .HasColumnName("NoManualDCardEnter")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderReports)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PosEmpId).HasColumnName("PosEmpID");

                entity.Property(e => e.PosEmpIdtype).HasColumnName("PosEmpIDType");

                entity.Property(e => e.PrintAfterSendOrder)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintBillReport)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintBillReportDraft)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintClientReport)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintCrname)
                    .HasColumnName("PrintCRName")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrintPosunionChequeFirst).HasColumnName("PrintPOSUnionChequeFirst");

                entity.Property(e => e.PrintReport)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintReportMonExp)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintReportMonRec)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintReportRet)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintReportX)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintReportZ)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintShiftCloseReport)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVenReport)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessingId).HasColumnName("ProcessingID");

                entity.Property(e => e.ResetQtyAfterProdAdd)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowCancels)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowChequeDisc)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowClosedCheques)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowClosedChequesPanel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowPosDisc)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowPosEditOnCancel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowSuspendedChequesPanel)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseBarCode)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseNewMenu)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.WproleName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WPRoleName");

                entity.Property(e => e.ZrepAfterShift).HasColumnName("ZRepAfterShift");

                entity.Property(e => e.ZrepBlockExit).HasColumnName("ZRepBlockExit");

                entity.Property(e => e.ZrepExecInTime).HasColumnName("ZRepExecInTime");

                entity.Property(e => e.ZrepExecTime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ZRepExecTime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ZrepShiftBlock)
                    .IsRequired()
                    .HasColumnName("ZRepShiftBlock")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ZrepShiftEndTime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ZRepShiftEndTime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ZrepShiftStartTime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ZRepShiftStartTime")
                    .HasDefaultValueSql("('1900-01-01 08:00:00')");

                entity.Property(e => e.ZrepShiftTimeCheck).HasColumnName("ZRepShiftTimeCheck");

                entity.Property(e => e.ZrepWarningPeriod)
                    .HasColumnName("ZRepWarningPeriod")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.ZrepWarningTime)
                    .HasColumnName("ZRepWarningTime")
                    .HasDefaultValueSql("((5))");

                entity.Property(e => e.ZreportWarning).HasColumnName("ZReportWarning");
            });

            modelBuilder.Entity<RWrkType>(entity =>
            {
                entity.HasKey(e => e.WrkId)
                    .HasName("pk_r_WrkTypes");

                entity.ToTable("r_WrkTypes", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.WrkName, "WrkName")
                    .IsUnique();

                entity.Property(e => e.WrkId)
                    .ValueGeneratedNever()
                    .HasColumnName("WrkID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.Value1)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Value2)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Value3)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.WrkName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RWtsign>(entity =>
            {
                entity.HasKey(e => e.WtsignId)
                    .HasName("pk_r_WTSigns");

                entity.ToTable("r_WTSigns", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.WtsignName, "WTSignName")
                    .IsUnique();

                entity.Property(e => e.WtsignId).HasColumnName("WTSignID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PayFactor).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WtsignName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WTSignName");
            });

            modelBuilder.Entity<RWweek>(entity =>
            {
                entity.HasKey(e => e.WweekTypeId)
                    .HasName("pk_r_WWeeks");

                entity.ToTable("r_WWeeks", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.WweekName, "WWeekName")
                    .IsUnique();

                entity.Property(e => e.WweekTypeId).HasColumnName("WWeekTypeID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WweekName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WWeekName");
            });

            modelBuilder.Entity<RemDd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RemDD", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<RemSumOnMonthLastDayByStock>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.StockId });

                entity.ToTable("RemSumOnMonthLastDay_ByStocks", "report");

                entity.Property(e => e.Date).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.RemSumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RemSumCC_In");
            });

            modelBuilder.Entity<Round>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("round_", "dbo");

                entity.Property(e => e.Prodid).HasColumnName("prodid");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<Sale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sales", "dim");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<Sale1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sales", "fact");

                entity.Property(e => e.Bonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CashRegisterId).HasColumnName("CashRegisterID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateId)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("DateID");

                entity.Property(e => e.DiscountCardId).HasColumnName("DiscountCardID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PriceProcurement).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PriceSelling).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Quantity).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Sum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<SaleStatistic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SaleStatistic", "dashboard");

                entity.Property(e => e.AvgCheck).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DateOfData).HasColumnType("smalldatetime");

                entity.Property(e => e.Lfl)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LFL");

                entity.Property(e => e.Margin).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Rec).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.Turnover).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<SaleStatisticForTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SaleStatistic_ForTest", "dashboard");

                entity.Property(e => e.AvgCheck).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DateOfData).HasColumnType("smalldatetime");

                entity.Property(e => e.Lfl)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LFL");

                entity.Property(e => e.Margin).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Rec).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.Turnover).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ServiceStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ServiceStatuses", "dashboard");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Service)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sql06Rudenko>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SQL06_rudenko", "dbo");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Stockid).HasColumnName("stockid");
            });

            modelBuilder.Entity<SqlCommand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_sql_command", "dbo");

                entity.Property(e => e.CommandText).HasColumnName("command_text");
            });

            modelBuilder.Entity<SqlText>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_sql_text", "dbo");

                entity.Property(e => e.BatchText).HasColumnName("batchText");
            });

            modelBuilder.Entity<TAcc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Acc");

                entity.ToTable("t_Acc", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Jsonpage)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("JSONPage");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TAcc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Accs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TAccD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_AccD");

                entity.ToTable("t_AccD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_AccD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TAccPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_AccPays");

                entity.ToTable("t_AccPays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<TAccRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_AccRoutes")
                    .IsClustered(false);

                entity.ToTable("t_AccRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TAccRoutes)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_AccRoutes_t_Acc");
            });

            modelBuilder.Entity<TAccSale>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_AccSale");

                entity.ToTable("t_AccSale", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_nt");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TAccSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_AccSpends")
                    .IsClustered(false);

                entity.ToTable("t_AccSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TAccSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_AccSpends_t_Acc");
            });

            modelBuilder.Entity<TBalanceProd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_BalanceProd", "dbo");

                entity.Property(e => e.Chid).HasColumnName("chid");

                entity.Property(e => e.Docdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("docdate");

                entity.Property(e => e.Ourid).HasColumnName("ourid");

                entity.Property(e => e.Ppid).HasColumnName("ppid");

                entity.Property(e => e.Prodid).HasColumnName("prodid");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.Srcposid).HasColumnName("srcposid");

                entity.Property(e => e.Stockid).HasColumnName("stockid");

                entity.Property(e => e.Tabledesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Tablename)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("tablename");

                entity.Property(e => e.ToFtran)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ToFTran");
            });

            modelBuilder.Entity<TBooking>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("pk_t_Booking");

                entity.ToTable("t_Booking", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => new { e.DocChId, e.DocCode }, "DocChID_DocCode")
                    .IsUnique();

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.PersonId, "PersonID");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocChId).HasColumnName("DocChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");
            });

            modelBuilder.Entity<TBookingD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_BookingD");

                entity.ToTable("t_BookingD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => new { e.ChId, e.DetSrcPosId }, "ChID_DetSrcPosID")
                    .IsUnique();

                entity.HasIndex(e => e.ResourceId, "ResourceID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.HasIndex(e => e.SrvcId, "SrvcID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Btime)
                    .HasColumnType("datetime")
                    .HasColumnName("BTime");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.Etime)
                    .HasColumnType("datetime")
                    .HasColumnName("ETime");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.SrvcId).HasColumnName("SrvcID");
            });

            modelBuilder.Entity<TBookingTemp>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("pk_t_BookingTemp");

                entity.ToTable("t_BookingTemp", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.DocCreateTime, "DocCreateTime");

                entity.Property(e => e.DocId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocCreateTime).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.PersonName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBookingTempD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_BookingTempD");

                entity.ToTable("t_BookingTempD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.ExecutorId, "ExecutorID");

                entity.HasIndex(e => e.ResourceId, "ResourceID");

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.HasIndex(e => e.SrvcId, "SrvcID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Btime)
                    .HasColumnType("datetime")
                    .HasColumnName("BTime");

                entity.Property(e => e.Etime)
                    .HasColumnType("datetime")
                    .HasColumnName("ETime");

                entity.Property(e => e.ExecutorId).HasColumnName("ExecutorID");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.SrvcId).HasColumnName("SrvcID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TCo>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Cos")
                    .IsClustered(false);

                entity.ToTable("t_Cos", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TCosD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_CosD")
                    .IsClustered(false);

                entity.ToTable("t_CosD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_CosD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.CostPercent).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CostSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CostSumT).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewPriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_In");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_In");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Value1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value3).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TCosSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_CosSpends")
                    .IsClustered(false);

                entity.ToTable("t_CosSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TCosSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_CosSpends_t_Cos");
            });

            modelBuilder.Entity<TCoss>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Coss", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TCret>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_CRet")
                    .IsClustered(false);

                entity.ToTable("t_CRet", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Cubage)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cubage");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TCret1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_CRets", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cubage)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cubage");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TCretD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_CRetD");

                entity.ToTable("t_CRetD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SecId, "SecID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_CRetD")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceAcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_nt");

                entity.Property(e => e.PriceAcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_wt");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxAC");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TCretRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_CRetRoutes")
                    .IsClustered(false);

                entity.ToTable("t_CRetRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TCretRoutes)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_CRetRoutes_t_CRet");
            });

            modelBuilder.Entity<TCretSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_CRetSpends")
                    .IsClustered(false);

                entity.ToTable("t_CRetSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TCretSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_CRetSpends_t_CRet");
            });

            modelBuilder.Entity<TCrjournal>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_CRJournal");

                entity.ToTable("t_CRJournal", "dbo");

                entity.HasIndex(e => new { e.XmldocId, e.Crid }, "XMLDocID_CRID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Data).HasColumnType("image");

                entity.Property(e => e.DocChId).HasColumnName("DocChID");

                entity.Property(e => e.DocSubtypeId).HasColumnName("DocSubtypeID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.DocTypeId).HasColumnName("DocTypeID");

                entity.Property(e => e.FiscalId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FiscalID");

                entity.Property(e => e.SerialId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SerialID");

                entity.Property(e => e.XmldocId).HasColumnName("XMLDocID");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.TCrjournals)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_t_CRJournal_z_Docs");

                entity.HasOne(d => d.DocSubtype)
                    .WithMany(p => p.TCrjournals)
                    .HasForeignKey(d => d.DocSubtypeId)
                    .HasConstraintName("FK_t_CRJournal_t_CRJournalDocSubtypes");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.TCrjournals)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("FK_t_CRJournal_t_CRJournalDocTypes");
            });

            modelBuilder.Entity<TCrjournalDocSubtype>(entity =>
            {
                entity.HasKey(e => e.DocSubtypeId)
                    .HasName("pk_t_CRJournalDocSubtypes");

                entity.ToTable("t_CRJournalDocSubtypes", "dbo");

                entity.Property(e => e.DocSubtypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocSubtypeID");

                entity.Property(e => e.DocSubtypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCrjournalDocType>(entity =>
            {
                entity.HasKey(e => e.DocTypeId)
                    .HasName("pk_t_CRJournalDocTypes");

                entity.ToTable("t_CRJournalDocTypes", "dbo");

                entity.Property(e => e.DocTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocTypeID");

                entity.Property(e => e.DocTypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCrret>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_CRRet");

                entity.ToTable("t_CRRet", "dbo");

                entity.HasIndex(e => new { e.Crid, e.DocTime }, "CRID_DocTime");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.StockId, e.Crid, e.DocId, e.ChId }, "IDX-dbo-CRRet-01")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => new { e.OurId, e.StockId }, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DocDate, "ix11_t_CRRet_DocDate_includes");

                entity.HasIndex(e => new { e.DocDate, e.StockId }, "ix7_t_CRRet_DocDate_StockID_includes");

                entity.HasIndex(e => new { e.Crid, e.OperId }, "r_CRMOt_Ret")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CreditID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Wpid).HasColumnName("WPID");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.TCrrets)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_CRRet_r_DCards");
            });

            modelBuilder.Entity<TCrret1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_CRRets", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Doctime)
                    .HasColumnType("datetime")
                    .HasColumnName("doctime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TCrretD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_CRRetD");

                entity.ToTable("t_CRRetD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_CRRetD")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TCrretDlv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.LevyId })
                    .HasName("pk_t_CRRetDLV");

                entity.ToTable("t_CRRetDLV", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.LevySum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TCrretDrazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_CRREtDRazn_06_31", "dbo");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TCrretPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_CRRetPays");

                entity.ToTable("t_CRRetPays", "dbo");

                entity.HasIndex(e => new { e.ChId, e.PayFormCode, e.SumCcWt }, "ChID_PayFormCode_SumCC_wt");

                entity.HasIndex(e => e.SrcPosId, "ix_4Az_t_CRRetPays_SrcPosID_included");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.SrcPayPosId).HasColumnName("SrcPayPosID");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TransactionInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCrretPaysRazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_CRRetPaysRazn_06_31", "dbo");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.SrcPayPosId).HasColumnName("SrcPayPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TransactionInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCrretShadow>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_CRRetShadow")
                    .IsClustered(false);

                entity.ToTable("t_CRRetShadow", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CreditID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Wpid).HasColumnName("WPID");
            });

            modelBuilder.Entity<TCrretShadowD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_CRRetShadowD")
                    .IsClustered(false);

                entity.ToTable("t_CRRetShadowD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TCrretShadowDlv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_CRRetShadowDLV")
                    .IsClustered(false);

                entity.ToTable("t_CRRetShadowDLV", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.LevySum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TCrretShadowPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_CRRetShadowPays")
                    .IsClustered(false);

                entity.ToTable("t_CRRetShadowPays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.SrcPayPosId).HasColumnName("SrcPayPosID");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<TCst>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Cst")
                    .IsClustered(false);

                entity.ToTable("t_Cst", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DelId, "DelID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DelId).HasColumnName("DelID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TmoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMoreCC");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC_In");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.TtrtAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTrtAC");
            });

            modelBuilder.Entity<TCst1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Csts", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC_In");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TCst2>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Cst2")
                    .IsClustered(false);

                entity.ToTable("t_Cst2", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DelId, "DelID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursAc, "KursAC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.TmoreCc, "TMoreCC");

                entity.HasIndex(e => e.TsumAcIn, "TSumAC_In");

                entity.HasIndex(e => e.TtrtAc, "TTrtAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAdd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CstCompId).HasColumnName("CstCompID");

                entity.Property(e => e.CstDocCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DelId).HasColumnName("DelID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC");

                entity.Property(e => e.KursAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC_In");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TcstSumCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TCstSumCCCor");

                entity.Property(e => e.TmoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TMoreCC");

                entity.Property(e => e.TsumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC_In");

                entity.Property(e => e.TsumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_In");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.TtrtAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTrtAC");

                entity.Property(e => e.TtrtCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTrtCC");

                entity.Property(e => e.UseTrtCctoCstSumCc).HasColumnName("UseTrtCCToCstSumCC");
            });

            modelBuilder.Entity<TCst21>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Cst2s", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC_In");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.TtrtAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTrtAC");

                entity.Property(e => e.TtrtCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTrtCC");
            });

            modelBuilder.Entity<TCst2D>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_Cst2D")
                    .IsClustered(false);

                entity.ToTable("t_Cst2D", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CstDty, "CstDty");

                entity.HasIndex(e => e.CstDty2, "CstDty2");

                entity.HasIndex(e => e.Dty2Cc, "Dty2CC");

                entity.HasIndex(e => e.DtyCc, "DtyCC");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "ProdID_PPID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CstDty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstDty2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstExc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstPriceAC");

                entity.Property(e => e.CstPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstPriceCC");

                entity.Property(e => e.CstSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumAC");

                entity.Property(e => e.CstSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumCC");

                entity.Property(e => e.CstSumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumCC_In");

                entity.Property(e => e.CstSumCccor)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumCCCor");

                entity.Property(e => e.Dty2Cc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Dty2CC");

                entity.Property(e => e.DtyCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DtyCC");

                entity.Property(e => e.ExcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExcCC");

                entity.Property(e => e.ExcCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExcCostCC");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.ImpCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ImpCC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PrcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PrcCC");

                entity.Property(e => e.PriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_In");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_In");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TrtAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TrtAC");

                entity.Property(e => e.TrtCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TrtCC");

                entity.Property(e => e.Um)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TCstD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_CstD");

                entity.ToTable("t_CstD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.PriceCcIn, "PriceCC_In");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SumCcIn, "SumCC_In");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_CstD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CstPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstPriceCC");

                entity.Property(e => e.CstSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CstSumAC");

                entity.Property(e => e.DtyCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DtyCC");

                entity.Property(e => e.ExcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ExcCC");

                entity.Property(e => e.ImpCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ImpCC");

                entity.Property(e => e.MoreCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreCC");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PrcCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PrcCC");

                entity.Property(e => e.PriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_In");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_In");

                entity.Property(e => e.SumCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_In");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TrtAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TrtAC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TCstRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_CstRoutes")
                    .IsClustered(false);

                entity.ToTable("t_CstRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TCstSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_CstSpends")
                    .IsClustered(false);

                entity.ToTable("t_CstSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TDeskRe>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_DeskRes")
                    .IsClustered(false);

                entity.ToTable("t_DeskRes", "dbo");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.ResTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ResTimeEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumPrePay).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TDeskResD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_DeskResD")
                    .IsClustered(false);

                entity.ToTable("t_DeskResD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ServingId).HasColumnName("ServingID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TDeskRess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_DeskRess", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ResTime).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumPrePay).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TDi>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Dis");

                entity.ToTable("t_Dis", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CompId, "CompID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IntDocId, "IntDocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.KursMc, "KursMC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.WteamId, "WTeamID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccOpsempId).HasColumnName("AccOPSEmpID");

                entity.Property(e => e.AccPpwempId).HasColumnName("AccPPWEmpID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate")
                    .HasDefaultValueSql("([dbo].[zf_GetDate](getdate()))");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeId6)
                    .HasColumnName("CodeID6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DateOfDeliveryOps)
                    .HasColumnType("datetime")
                    .HasColumnName("DateOfDeliveryOPS");

                entity.Property(e => e.DateOfDeliveryPpw)
                    .HasColumnType("datetime")
                    .HasColumnName("DateOfDeliveryPPW");

                entity.Property(e => e.Dateproc)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dateproc");

                entity.Property(e => e.Dateproc2)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dateproc2");

                entity.Property(e => e.DistrCheckDate).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate")
                    .HasDefaultValueSql("([dbo].[zf_GetDate](getdate()))");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.GiveDateOnOps)
                    .HasColumnType("datetime")
                    .HasColumnName("GiveDateOnOPS");

                entity.Property(e => e.GiveDateOnPpw)
                    .HasColumnType("datetime")
                    .HasColumnName("GiveDateOnPPW");

                entity.Property(e => e.GiveOpsempId).HasColumnName("GiveOPSEmpID");

                entity.Property(e => e.GivePpwempId).HasColumnName("GivePPWEmpID");

                entity.Property(e => e.Handler).HasDefaultValueSql("((0))");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PlanProcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.ShedLoadDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Synctowms)
                    .HasColumnName("synctowms")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.WteamId).HasColumnName("WTeamID");

                entity.Property(e => e.WteamIdops).HasColumnName("WteamIDOPS");

                entity.Property(e => e.WteamIdppw).HasColumnName("WteamIDPPW");
            });

            modelBuilder.Entity<TDisD>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_t_DisD")
                    .IsClustered(false);

                entity.ToTable("t_DisD", "dbo");

                entity.HasIndex(e => e.AccQty, "AccQty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.RecCatId, "RecCatID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RemQty, "RemQty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SecId, "SecID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.WempId, "WEmpID");

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ActualRem)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Capacity).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ColCatId)
                    .HasColumnName("ColCatID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Datediff)
                    .HasColumnName("datediff")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DistributionQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.Mplicity)
                    .HasColumnName("MPlicity")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdRate).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyStock1300)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qtyStock1_300")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyStock301600)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyStock301_600")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuantStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecCatId).HasColumnName("RecCatID");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockQtyDis).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TeppQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TEppQty");

                entity.Property(e => e.Tnsqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNSQty");

                entity.Property(e => e.ToptQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TOptQty");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TrecQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRecQty");

                entity.Property(e => e.TremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRemQty");

                entity.Property(e => e.TsaleQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSaleQty");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Weight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.WempId).HasColumnName("WEmpID");
            });

            modelBuilder.Entity<TDisDNewAchId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_DisD_NewAChID", "dbo");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<TDisDd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DetSrcPosId })
                    .HasName("_pk_t_DisDD");

                entity.ToTable("t_DisDD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.DetStockId, "DetStockID");

                entity.HasIndex(e => new { e.AchId, e.DetStockId }, "NC_t_DisDD_AChID_DetStockID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.AchId, e.DetNewQty, e.DetStockId, e.ExistsExc, e.Sequence }, "ix_t_DisDD_AChID_DetNewQty_includes");

                entity.HasIndex(e => new { e.AchId, e.DetStockId }, "ix_t_DisDD_AChID_DetStockID_includes");

                entity.HasIndex(e => new { e.ExistsExc, e.DetNewQty }, "ix_t_DisDD_ExistsExc_DetNewQty_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.DestDisQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DestDocId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DestDocID");

                entity.Property(e => e.DetExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewQtyDis)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DetOptQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetOurId).HasColumnName("DetOurID");

                entity.Property(e => e.DetRemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetSaleFall)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DetSecId).HasColumnName("DetSecID");

                entity.Property(e => e.DetStockId).HasColumnName("DetStockID");

                entity.Property(e => e.DetSupQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DistributionQtyD)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("distributionQtyD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ExistsExc).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.MinRem)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.OpenDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ReservedQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sequence).HasColumnName("sequence");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TtGroup)
                    .HasColumnName("TT_group")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TDisRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_DisRoutes")
                    .IsClustered(false);

                entity.ToTable("t_DisRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TDisRoutes)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_DisRoutes_t_Dis");
            });

            modelBuilder.Entity<TDisSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_DisSpends")
                    .IsClustered(false);

                entity.ToTable("t_DisSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TDisSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_DisSpends_t_Dis");
            });

            modelBuilder.Entity<TDiss>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Diss", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId6).HasColumnName("CodeID6");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Dateproc)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dateproc");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Synctowms).HasColumnName("synctowms");
            });

            modelBuilder.Entity<TEoexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_EOExp");

                entity.ToTable("t_EOExp", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompGrId2, "CompGrID2");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpSn).HasColumnName("ExpSN");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreAC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrdBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdBDate");

                entity.Property(e => e.OrdEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdEDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumAC");

                entity.Property(e => e.TranAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranAC");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");
            });

            modelBuilder.Entity<TEoexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_EOExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OrdBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdBDate");

                entity.Property(e => e.OrdEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("OrdEDate");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TNewSumCC");

                entity.Property(e => e.TnewSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TNewSumMC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TEoexpD>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_t_EOExpD");

                entity.ToTable("t_EOExpD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CompId, "CompID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.NewQty, "NewQty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.NewSumAc, "NewSumAC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PcatId, "PCatID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PgrId, "PGrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PgrId3, "PGrID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Qty, "Qty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RemQty, "RemQty")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SecId, "SecID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SumAc, "SumAC")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.BringRange }, "ix_t_EOExpD_ChID_BringRange_includes");

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.AllWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Amper).HasColumnName("AMPer");

                entity.Property(e => e.Article1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Article4)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId)
                    .HasColumnName("CurrID")
                    .HasDefaultValueSql("((980))");

                entity.Property(e => e.Eodays).HasDefaultValueSql("((0))");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.KursLast)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastPriceInBaks).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.Mplicity).HasColumnName("MPlicity");

                entity.Property(e => e.MtranUn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MTranUn");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC");

                entity.Property(e => e.NewPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceMC");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewQtyPol).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewQtyVin).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.NewSumMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumMC");

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notemenager)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NremDays).HasColumnName("NRemDays");

                entity.Property(e => e.Otm)
                    .HasColumnName("otm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PalletaCrat).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PersentMarriage)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Pgrid6)
                    .HasColumnName("PGrid6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PolWeight).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdGenderId).HasColumnName("prodGenderID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdIdroleId)
                    .HasColumnName("ProdIDRoleID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ProdType).HasDefaultValueSql("((0))");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyPol).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyVin).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyWithMult).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.StatusMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumImp).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TranQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranQTY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit14).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit21).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Transit7).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitN).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransitPerOrd).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.VinWeight).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TEoexpDd>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.DetSrcPosId })
                    .HasName("_pk_t_EOExpDD");

                entity.ToTable("t_EOExpDD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.BremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("BRemQty");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.DetExpQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetNewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetNewSumAC");

                entity.Property(e => e.DetNremDays).HasColumnName("DetNRemDays");

                entity.Property(e => e.DetOurId).HasColumnName("DetOurID");

                entity.Property(e => e.DetPosExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DetPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetPriceAC");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.DetQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetQtyWithMult).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetRemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DetSecId).HasColumnName("DetSecID");

                entity.Property(e => e.DetStockId).HasColumnName("DetStockID");

                entity.Property(e => e.DetSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DetSumAC");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Eoqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("EOQty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EremQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ERemQty");

                entity.Property(e => e.ExcQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.InStockQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ioqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("IOQty");

                entity.Property(e => e.MarginSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MarginSumCC");

                entity.Property(e => e.MinRem).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.NewPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RegionId).HasColumnName("RegionID");

                entity.Property(e => e.SaleQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TransQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TEoexpRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_EOExpRoutes")
                    .IsClustered(false);

                entity.ToTable("t_EOExpRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TEoexpSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_EOExpSpends")
                    .IsClustered(false);

                entity.ToTable("t_EOExpSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TEorec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_EORec")
                    .IsClustered(false);

                entity.ToTable("t_EORec", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.InDocId, "SrcDocID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.OurId, e.InDocId }, "t_EOExpt_EORec");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpSn).HasColumnName("ExpSN");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.MoreAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MoreAC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TranAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TranAC");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");
            });

            modelBuilder.Entity<TEorec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_EORecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TEorecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_EORecD")
                    .IsClustered(false);

                entity.ToTable("t_EORecD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TEorecRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_EORecRoutes")
                    .IsClustered(false);

                entity.ToTable("t_EORecRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TEorecRoutes)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_EORecRoutes_t_EORec");
            });

            modelBuilder.Entity<TEorecSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_EORecSpends")
                    .IsClustered(false);

                entity.ToTable("t_EORecSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TEorecSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_EORecSpends_t_EORec");
            });

            modelBuilder.Entity<TEpp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Epp");

                entity.ToTable("t_Epp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TEpp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Epps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TEppD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_EppD");

                entity.ToTable("t_EppD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_EppD")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.PlpriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PLPriceCC");

                entity.Property(e => e.PlsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PLSumCC");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ReasonMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TEppRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_EppRoutes")
                    .IsClustered(false);

                entity.ToTable("t_EppRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TEppSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_EppSpends")
                    .IsClustered(false);

                entity.ToTable("t_EppSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TEst>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Est");

                entity.ToTable("t_Est", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TEst1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Ests", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TnewSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC");

                entity.Property(e => e.TnewSumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TNewSumMC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TEstD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_EstD");

                entity.ToTable("t_EstD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.NewPpid, "NewPPID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => new { e.ProdId, e.PriceCcWt }, "ProdID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ChId, e.NewSumCcNt, e.NewTaxSum, e.NewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.ProdId, e.NewPpid }, "t_PInP_Tt_EstD");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_EstD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewPpid).HasColumnName("NewPPID");

                entity.Property(e => e.NewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_nt");

                entity.Property(e => e.NewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_wt");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TExc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Exc");

                entity.ToTable("t_Exc", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DestStockId, "DestStockID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.IntDocId, "IntDocID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.KursMc, "KursMC")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.NewStockId, "NewStockID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SrcDocId, "SrcDocID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DestStockId, "ix21_t_Exc_DestStockID_includes");

                entity.HasIndex(e => e.DocDate, "ix_t_Exc_DocDate_includes");

                entity.HasIndex(e => new { e.NewStockId, e.StateCode, e.DestStockId }, "ix_t_Exc_NewStockID_StateCode_DestStockID_includes");

                entity.HasIndex(e => e.NewStockId, "ix_t_Exc_NewStockID_includes");

                entity.HasIndex(e => new { e.OurId, e.NewStockId, e.DocDate }, "ix_t_Exc_OurID_NewStockID_DocDate_includes");

                entity.HasIndex(e => new { e.OurId, e.NewStockId, e.StateCode }, "ix_t_Exc_OurID_NewStockID_StateCode_includes");

                entity.HasIndex(e => e.StockId, "ix_t_Exc_StockID_includes");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.ArrSdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ArrSDate");

                entity.Property(e => e.ArrWdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ArrWDate");

                entity.Property(e => e.ArrsAccountable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ArrwAccountable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CheckQa)
                    .HasColumnType("datetime")
                    .HasColumnName("CheckQA");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Cubage)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cubage")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DelivDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DestStockId).HasColumnName("DestStockID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDateWms)
                    .HasColumnType("datetime")
                    .HasColumnName("DocDateWMS");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocIdwms)
                    .HasColumnName("DocIDWMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PrintDate).HasColumnType("datetime");

                entity.Property(e => e.ReasonEmpId).HasColumnName("ReasonEmpID");

                entity.Property(e => e.ReasonId).HasColumnName("ReasonID");

                entity.Property(e => e.SendSdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SendSDate");

                entity.Property(e => e.SendWdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("SendWDate");

                entity.Property(e => e.SendsAccountable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SendwAccountable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ShipmentDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Shipmentaccountable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SyncToWms)
                    .HasColumnName("SyncToWMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransfertEmpId).HasColumnName("TransfertEmpID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TExc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Exc1", "dbo");

                entity.Property(e => e.BarCode)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DiffQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DiffRecSum).HasColumnType("numeric(38, 13)");

                entity.Property(e => e.DiffSum).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.NewStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RlogDocId).HasColumnName("RLogDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TnewQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TNewQty");

                entity.Property(e => e.TnewRecSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TNewRecSumCC");

                entity.Property(e => e.TnewSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TNewSumCC");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TranStockId).HasColumnName("TranStockID");

                entity.Property(e => e.TranStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TrecSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TRecSumCC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TExc2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Excs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cubage)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cubage");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DestStockId).HasColumnName("DestStockID");

                entity.Property(e => e.DestStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.NewStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TExcD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_ExcD");

                entity.ToTable("t_ExcD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ChId, e.ProdId }, "ix_t_ExcD_ChID_ProdID_includes");

                entity.HasIndex(e => e.ChId, "ix_t_ExcD_ChID_includes");

                entity.HasIndex(e => e.ProdId, "ix_t_ExcD_ProdID_includes");

                entity.HasIndex(e => e.Qty, "t_ExcD_Qty_Include");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_ExcD")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectionQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSecId).HasColumnName("NewSecID");

                entity.Property(e => e.PcatKmid).HasColumnName("PCatKMID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ReasonMarriage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.Sscccode)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("SSCCCode");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TExcRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_ExcRoutes")
                    .IsClustered(false);

                entity.ToTable("t_ExcRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TExcSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_ExcSpends")
                    .IsClustered(false);

                entity.ToTable("t_ExcSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TExp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Exp");

                entity.ToTable("t_Exp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MorePrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TExp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Exps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TExpD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_ExpD");

                entity.ToTable("t_ExpD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_ExpD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TExpRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_ExpRoutes")
                    .IsClustered(false);

                entity.ToTable("t_ExpRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TExpSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_ExpSpends")
                    .IsClustered(false);

                entity.ToTable("t_ExpSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TInv>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Inv");

                entity.ToTable("t_Inv", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.LetAttor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MorePrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TInv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Invs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TInvD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_s_InvD")
                    .IsClustered(false);

                entity.ToTable("t_InvD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "s_PInPs_InvD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TInvRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_InvRoutes")
                    .IsClustered(false);

                entity.ToTable("t_InvRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TInvSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_InvSpends")
                    .IsClustered(false);

                entity.ToTable("t_InvSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TIoexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_IOExp")
                    .IsClustered(false);

                entity.ToTable("t_IOExp", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.OurId, e.InDocId }, "t_IORect_IOExp");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TIoexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_IOExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.InDocId).HasColumnName("InDocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TIoexpD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_IOExpD")
                    .IsClustered(false);

                entity.ToTable("t_IOExpD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_IOExpD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TIoexpRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_IOExpRoutes")
                    .IsClustered(false);

                entity.ToTable("t_IOExpRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TIoexpRoutes)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_IOExpRoutes_t_IOExp");
            });

            modelBuilder.Entity<TIoexpSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_IOExpSpends")
                    .IsClustered(false);

                entity.ToTable("t_IOExpSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TIoexpSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_IOExpSpends_t_IOExp");
            });

            modelBuilder.Entity<TIorec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_IORec")
                    .IsClustered(false);

                entity.ToTable("t_IORec", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DestStockId).HasColumnName("DestStockID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpSn).HasColumnName("ExpSN");

                entity.Property(e => e.FinishDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NotDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotSn).HasColumnName("NotSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TIorec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_IORecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DestStockId).HasColumnName("DestStockID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewSumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TNewSumMC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TIorecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_IORecD")
                    .IsClustered(false);

                entity.ToTable("t_IORecD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.NewQty, "NewQty");

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RemQty, "RemQty");

                entity.HasIndex(e => e.SecId, "SecID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ForeCastQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TIorecRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_IORecRoutes")
                    .IsClustered(false);

                entity.ToTable("t_IORecRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TIorecRoutes)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_IORecRoutes_t_IORec");
            });

            modelBuilder.Entity<TIorecSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_IORecSpends")
                    .IsClustered(false);

                entity.ToTable("t_IORecSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TIorecSpends)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_IORecSpends_t_IORec");
            });

            modelBuilder.Entity<TLogDiscExp>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_t_LogDiscExp");

                entity.ToTable("t_LogDiscExp", "dbo");

                entity.HasIndex(e => e.DiscCode, "DiscCode");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.TLogDiscExps)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_LogDiscExp_r_DCards");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.TLogDiscExps)
                    .HasForeignKey(d => d.DiscCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_LogDiscExp_r_Discs");
            });

            modelBuilder.Entity<TLogDiscExpP>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_t_LogDiscExpP");

                entity.ToTable("t_LogDiscExpP", "dbo");

                entity.HasIndex(e => e.DiscCode, "DiscCode");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.TLogDiscExpPs)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_LogDiscExpP_r_DCards");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.TLogDiscExpPs)
                    .HasForeignKey(d => d.DiscCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_LogDiscExpP_r_Discs");
            });

            modelBuilder.Entity<TLogDiscRec>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_t_LogDiscRec");

                entity.ToTable("t_LogDiscRec", "dbo");

                entity.HasIndex(e => e.DiscCode, "DiscCode");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.TLogDiscRecs)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_LogDiscRec_r_DCards");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.TLogDiscRecs)
                    .HasForeignKey(d => d.DiscCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_LogDiscRec_r_Discs");
            });

            modelBuilder.Entity<TLogDiscRecTemp>(entity =>
            {
                entity.HasKey(e => new { e.LogId, e.ChId })
                    .HasName("pk_t_LogDiscRecTemp");

                entity.ToTable("t_LogDiscRecTemp", "dbo");

                entity.HasIndex(e => e.DiscCode, "DiscCode");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.TLogDiscRecTemps)
                    .HasForeignKey(d => d.DiscCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_LogDiscRecTemp_r_Discs");
            });

            modelBuilder.Entity<TMonIntExp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_MonIntExp")
                    .IsClustered(false);

                entity.ToTable("t_MonIntExp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocTime, "DocTime");

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SumCc, "SumCC")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.Crid, e.OperId }, "r_CRMOt_MExp")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<TMonIntExp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_MonIntExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<TMonIntRec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_MonIntRec")
                    .IsClustered(false);

                entity.ToTable("t_MonIntRec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocTime, "DocTime");

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SumCc, "SumCC")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Crid, e.OperId }, "r_CRMOt_MRec")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<TMonIntRec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_MonIntRecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<TMonRec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_MonRec")
                    .IsClustered(false);

                entity.ToTable("t_MonRec", "dbo");

                entity.HasIndex(e => e.AccountAc, "AccountAC");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.KursCc, "KursCC");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumAc, "SumAC");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<TOrderMonitorsTemp>(entity =>
            {
                entity.HasKey(e => e.LogIdex)
                    .HasName("pk_t_OrderMonitorsTemp");

                entity.ToTable("t_OrderMonitorsTemp", "dbo");

                entity.HasIndex(e => new { e.DocCode, e.DocChId, e.Wpid }, "DocCode_DocChID_WPID");

                entity.Property(e => e.LogIdex).HasColumnName("LogIDEx");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.DocChId).HasColumnName("DocChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QueueTime).HasColumnType("datetime");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.ServingId).HasColumnName("ServingID");

                entity.Property(e => e.ServingTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Wpid).HasColumnName("WPID");

                entity.HasOne(d => d.Prod)
                    .WithMany(p => p.TOrderMonitorsTemps)
                    .HasForeignKey(d => d.ProdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_OrderMonitorsTemp_r_Prods");

                entity.HasOne(d => d.Wp)
                    .WithMany(p => p.TOrderMonitorsTemps)
                    .HasForeignKey(d => d.Wpid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_OrderMonitorsTemp_r_WPs");
            });

            modelBuilder.Entity<TPinP>(entity =>
            {
                entity.HasKey(e => new { e.ProdId, e.Ppid })
                    .HasName("pk_t_PInP");

                entity.ToTable("t_PInP", "dbo");

                entity.HasIndex(e => e.CompId, "CompID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.CurrId, "CurrID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "IX-dbo-t_PInP-00")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.PriceCcIn, "PriceCC_In")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PriceMc, "PriceMC")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.PriceMcIn, "PriceMC_In")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Priority, "Priority")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ProdId, e.ProdDate, e.PriceCcIn }, "ix9_t_PInP_ProdID_ProdDate_PriceCC_In_includes")
                    .HasFillFactor(95);

                entity.HasIndex(e => e.ProdDate, "ix_t_PInP_ProdDate_includes");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Article)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CostAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostAC");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.CostMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostMC");

                entity.Property(e => e.CounId).HasColumnName("CounID");

                entity.Property(e => e.CstDocCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.File1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppdelay).HasColumnName("PPDelay");

                entity.Property(e => e.Ppdesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PPDesc");

                entity.Property(e => e.Ppweight)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PPWeight");

                entity.Property(e => e.PriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_In");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.PriceMcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC_In");

                entity.Property(e => e.PriceRc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceRC");

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdPpdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ProdPPDate");
            });

            modelBuilder.Entity<TPinP1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_PInPs", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CostAc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("CostAC");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.PriceMcIn)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC_In");

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<TPinPSql06temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_PInP_SQL06Temp", "dbo");

                entity.Property(e => e.Article)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CostAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostAC");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.CostMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostMC");

                entity.Property(e => e.CstDocCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.File1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppdelay).HasColumnName("PPDelay");

                entity.Property(e => e.Ppdesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PPDesc");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Ppweight)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PPWeight");

                entity.Property(e => e.PriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_In");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.PriceMcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC_In");

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdPpdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ProdPPDate");
            });

            modelBuilder.Entity<TPinPch>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("_pk_t_PInPCh")
                    .IsClustered(false);

                entity.ToTable("t_PInPCh", "dbo");

                entity.HasIndex(e => e.ChDate, "ChDate");

                entity.HasIndex(e => e.CurrId, "CurrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OldCurrId, "OldCurrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChTime).HasColumnType("smalldatetime");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.OldCurrId).HasColumnName("OldCurrID");

                entity.Property(e => e.OldPriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OldPriceAC_In");

                entity.Property(e => e.OldPriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OldPriceCC_In");

                entity.Property(e => e.OldPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OldPriceMC");

                entity.Property(e => e.OldPriceMcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("OldPriceMC_In");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceAcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_In");

                entity.Property(e => e.PriceCcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_In");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.PriceMcIn)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceMC_In");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<TProdTurnD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_ProdTurnD", "sas");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Rec");

                entity.ToTable("t_Rec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocDate, "DocDate2");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.PayDelay, "PayDelay");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.WteamId, "WTeamID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate")
                    .HasDefaultValueSql("([dbo].[zf_GetDate](getdate()))");

                entity.Property(e => e.CheckQualityDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ContainerNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDateWms)
                    .HasColumnType("datetime")
                    .HasColumnName("DocDateWMS");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocIdwms).HasColumnName("DocIDWMS");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate")
                    .HasDefaultValueSql("([dbo].[zf_GetDate](getdate()))");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RecFactEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecFactEDate");

                entity.Property(e => e.RecPlanEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecPlanEDate");

                entity.Property(e => e.ShipDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SyncToWms)
                    .HasColumnName("SyncToWMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransitDocId).HasColumnName("TransitDocID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.WteamId).HasColumnName("WTeamID");
            });

            modelBuilder.Entity<TRec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Recs", "dbo");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CheckQualityDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChildDocId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChildDocID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompGrId2).HasColumnName("CompGrID2");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.ContainerNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDateWms)
                    .HasColumnType("datetime")
                    .HasColumnName("DocDateWMS");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocIdwms).HasColumnName("DocIDWMS");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdCount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecFactEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecFactEDate");

                entity.Property(e => e.RecPlanEdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("RecPlanEDate");

                entity.Property(e => e.RlogDocId).HasColumnName("RLogDocID");

                entity.Property(e => e.ShipDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TransitDocId).HasColumnName("TransitDocID");

                entity.Property(e => e.TsumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumAC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");

                entity.Property(e => e.Weight).HasColumnType("numeric(38, 13)");
            });

            modelBuilder.Entity<TRecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_RecD");

                entity.ToTable("t_RecD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RecCatId, "RecCatID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.WempId, "WEmpID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_RecD")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.CostSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CounId).HasColumnName("CounID");

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExPlanQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.FactQtyWms)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("FactQtyWMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FinishDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastVenQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Mplicity)
                    .HasColumnName("MPlicity")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Note2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceAcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_nt");

                entity.Property(e => e.PriceAcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC_wt");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QuantStock)
                    .HasColumnName("quantStock")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReGradingQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecCatId).HasColumnName("RecCatID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumAcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_nt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SumAcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC_wt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxAC");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSumAC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WempId).HasColumnName("WEmpID");
            });

            modelBuilder.Entity<TRecRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_RecRoutes")
                    .IsClustered(false);

                entity.ToTable("t_RecRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TRecSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_RecSpends")
                    .IsClustered(false);

                entity.ToTable("t_RecSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TRem>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.StockId, e.SecId, e.ProdId, e.Ppid })
                    .HasName("_pk_t_Rem");

                entity.ToTable("t_Rem", "dbo");

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.OurId, e.StockId, e.ProdId }, "ix_t_Rem_OurID_StockID_ProdID_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ProdId, e.StockId }, "ix_t_Rem_ProdID_StockID_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TRem1>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.StockId, e.SecId, e.ProdId, e.Ppid })
                    .HasName("PK-dwh-t_Rem");

                entity.ToTable("t_Rem", "dwh");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TRemD1c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_RemD1C", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemD2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_RemD", "gms");

                entity.Property(e => e.Dbiid).HasColumnName("dbiid");

                entity.Property(e => e.Name)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Ourid).HasColumnName("ourid");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemDAssortmentManagement>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.ProdId });

                entity.ToTable("t_RemD_AssortmentManagement", "dbo");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");
            });

            modelBuilder.Entity<TRemDBe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_RemD_BES", "dbo");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemDCompare>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_RemD_Compare", "dbo");

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(100);

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemDStatic>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK__t_RemD_S__AF02F0B84BD5F498");

                entity.ToTable("t_RemD_Static", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CalcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<TRemDStaticD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.OurId, e.StockId, e.ProdId, e.SecId, e.Ppid })
                    .HasName("PK__t_RemD_S__4870C9591CB559D3");

                entity.ToTable("t_RemD_StaticD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.AccQty).HasColumnType("numeric(19, 5)");

                entity.Property(e => e.Qty).HasColumnType("numeric(19, 5)");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TRemDStaticDs)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK__t_RemD_Sta__ChID__518ECDEE");
            });

            modelBuilder.Entity<TRemDStaticD52>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_RemD_StaticD_52", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Chid).HasColumnName("chid");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemDStaticH>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK__t_RemD_S__AF02F0B86B1995C7");

                entity.ToTable("t_RemD_StaticH", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.AppName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Bdate2)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate2");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.HostName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.StartTs)
                    .HasColumnType("datetime")
                    .HasColumnName("StartTS")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StaticBdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("StaticBDate");

                entity.Property(e => e.StaticChId).HasColumnName("StaticChID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<TRemDatePl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemDatePL", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemDatePlre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemDatePLRes", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.AccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumCC");

                entity.Property(e => e.AccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WoaccQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("WOAccQty");

                entity.Property(e => e.WoaccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumCC");

                entity.Property(e => e.WoaccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumMC");
            });

            modelBuilder.Entity<TRemDatePp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemDatePP", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemDatePpre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemDatePPRes", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.AccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumCC");

                entity.Property(e => e.AccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumMC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WoaccQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("WOAccQty");

                entity.Property(e => e.WoaccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumCC");

                entity.Property(e => e.WoaccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumMC");
            });

            modelBuilder.Entity<TRemDateQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemDateQty", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemDateQtyRe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemDateQtyRes", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WoaccQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("WOAccQty");
            });

            modelBuilder.Entity<TRemDay>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK__t_RemDay__AF02F0B8425DA044");

                entity.ToTable("t_RemDay", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CalcDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<TRemDayProd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_RemDayProds", "dbo");

                entity.HasIndex(e => new { e.ChId, e.OurId, e.StockId }, "ChID_OurID_StockID_INC");

                entity.HasIndex(e => e.ChId, "idx_ChID");

                entity.HasIndex(e => e.OurId, "idx_OurID");

                entity.HasIndex(e => e.ProdId, "idx_ProdID");

                entity.HasIndex(e => e.StockId, "idx_StockID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.HasOne(d => d.Ch)
                    .WithMany()
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK__t_RemDayPr__ChID__0AD86130");
            });

            modelBuilder.Entity<TRemDbyDateAnalytic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_remDbyDate_analytic", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CalcDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemDi>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.OurId, e.StockId, e.SecId, e.ProdId })
                    .HasName("_pk_t_RemDis");

                entity.ToTable("t_RemDis", "dbo");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.StockId, e.ProdId }, "ix_t_RemDis_OurID_StockID_ProdID_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ProdId, e.StockId }, "ix_t_RemDis_ProdID_StockID_includes");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");
            });

            modelBuilder.Entity<TRemDi1>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.OurId, e.StockId, e.SecId, e.ProdId })
                    .HasName("_pk_t_RemDis");

                entity.ToTable("t_RemDis", "gms");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");
            });

            modelBuilder.Entity<TRemDis2>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.OurId, e.StockId, e.SecId, e.ProdId })
                    .HasName("_pk_t_RemDis2");

                entity.ToTable("t_RemDis2", "dbo");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.StockId, e.ProdId }, "ix_t_RemDis2_OurID_StockID_ProdID_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ProdId, e.StockId }, "ix_t_RemDis2_ProdID_StockID_includes");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");
            });

            modelBuilder.Entity<TRemDsium>(entity =>
            {
                entity.ToTable("t_RemDSIA", "dbo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Date).HasColumnType("smalldatetime");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemExpire>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemExpire", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.AccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumCC");

                entity.Property(e => e.AccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumMC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WoaccQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("WOAccQty");

                entity.Property(e => e.WoaccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumCC");

                entity.Property(e => e.WoaccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumMC");
            });

            modelBuilder.Entity<TRemPl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemPL", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemPlre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemPLRes", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.AccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumCC");

                entity.Property(e => e.AccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WoaccQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("WOAccQty");

                entity.Property(e => e.WoaccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumCC");

                entity.Property(e => e.WoaccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumMC");
            });

            modelBuilder.Entity<TRemPp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemPP", "dbo");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemPpre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemPPRes", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.AccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumCC");

                entity.Property(e => e.AccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumMC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.RemSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumCC");

                entity.Property(e => e.RemSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RemSumMC");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WoaccQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("WOAccQty");

                entity.Property(e => e.WoaccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumCC");

                entity.Property(e => e.WoaccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("WOAccSumMC");
            });

            modelBuilder.Entity<TRemQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemQty", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemQtyRe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemQtyRes", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RemQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TransQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.WoaccQty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("WOAccQty");
            });

            modelBuilder.Entity<TRemResPl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemResPL", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.AccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumCC");

                entity.Property(e => e.AccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemResPp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RemResPP", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.AccSumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumCC");

                entity.Property(e => e.AccSumMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("AccSumMC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(32, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceMc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("PriceMC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRemd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_remd", "AVRORA\\A.Pysanka");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemd1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_remd", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemdAnalytic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_remd_analytic", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemdRevizor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_remd_revizor", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRemdRudenko>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_remd_rudenko", "dbo");

                entity.Property(e => e.AccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TReplicaVen>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_ReplicaVen")
                    .IsClustered(false);

                entity.ToTable("t_ReplicaVen", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");
            });

            modelBuilder.Entity<TReplicaVen5555>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_ReplicaVen_5555")
                    .IsClustered(false);

                entity.ToTable("t_ReplicaVen_5555", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");
            });

            modelBuilder.Entity<TRestShift>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_RestShift")
                    .IsClustered(false);

                entity.ToTable("t_RestShift", "dbo");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ShiftCloseTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ShiftOpenTime).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRestShift1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_RestShifts", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ShiftCloseTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ShiftOpenTime).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TRestShiftD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_RestShiftD")
                    .IsClustered(false);

                entity.ToTable("t_RestShiftD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ShiftPostId).HasColumnName("ShiftPostID");

                entity.HasOne(d => d.Ch)
                    .WithMany(p => p.TRestShiftDs)
                    .HasForeignKey(d => d.ChId)
                    .HasConstraintName("FK_t_RestShiftD_t_RestShift");
            });

            modelBuilder.Entity<TRet>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Ret")
                    .IsClustered(false);

                entity.ToTable("t_Ret", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TRet1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Rets", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.PayDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TRetD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_RetD");

                entity.ToTable("t_RetD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_RetD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TRetRoute>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.RouteId })
                    .HasName("pk_t_RetRoutes")
                    .IsClustered(false);

                entity.ToTable("t_RetRoutes", "dbo");

                entity.HasIndex(e => e.RouteId, "RouteID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.RouteId).HasColumnName("RouteID");

                entity.Property(e => e.RouteAddress)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RouteNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RouteSumCC");
            });

            modelBuilder.Entity<TRetSpend>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SpendCode })
                    .HasName("pk_t_RetSpends")
                    .IsClustered(false);

                entity.ToTable("t_RetSpends", "dbo");

                entity.HasIndex(e => e.SpendCode, "SpendCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SpendNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SpendSumCC");
            });

            modelBuilder.Entity<TSale>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Sale");

                entity.ToTable("t_Sale", "dbo");

                entity.HasIndex(e => new { e.Crid, e.DocTime }, "CRID_DocTime")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CompId, "CompID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocDate, e.TsumCcWt }, "DocDate")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DocId, "DocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.StockId, e.Crid, e.DocId }, "IDX-dbo-Sale-01")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocTime, e.DocId, e.ChId }, "IX-dbo-t_Sale-00")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.StockId, e.DocDate }, "ix7_t_Sale_StockID_DocDate_includes")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.StockId, e.DocDate }, "ix_t_Sale_OurID_StockID_DocDate_includes")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.Crid, e.OperId }, "r_CRMOt_Sale")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CashSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CashSumCC");

                entity.Property(e => e.ChangeSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChangeSumCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CreditID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocCreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TpurSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_nt");

                entity.Property(e => e.TpurSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_wt");

                entity.Property(e => e.TpurTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurTaxSum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Visitors).HasDefaultValueSql("(0)");

                entity.Property(e => e.Wpid).HasColumnName("WPID");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.TSales)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_t_Sale_r_DCards");
            });

            modelBuilder.Entity<TSale1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Sales", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Crname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CRName");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Doctime)
                    .HasColumnType("datetime")
                    .HasColumnName("doctime");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TSaleC>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_SaleC");

                entity.ToTable("t_SaleC", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ChId, "ChID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.ChId, e.EmpId }, "IDX-dbo-t_SaleC-001")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSaleCrazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_SaleCRazn_06_31", "dbo");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSaleD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_SaleD");

                entity.ToTable("t_SaleD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "IX-dbo-t_SaleD-00")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ProdId, "IX_ProdID_Includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Ppid, "NC_t_SaleD_PPID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => e.ProdId, "ix_t_SaleD_ProdID_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_SaleD");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_nt");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSaleDlv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.LevyId })
                    .HasName("pk_t_SaleDLV");

                entity.ToTable("t_SaleDLV", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.LevySum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TSaleDrazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_SaleDRazn_06_31", "dbo");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_nt");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSaleM>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.ModCode })
                    .HasName("pk_t_SaleM");

                entity.ToTable("t_SaleM", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");
            });

            modelBuilder.Entity<TSalePay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SalePays");

                entity.ToTable("t_SalePays", "dbo");

                entity.HasIndex(e => new { e.ChId, e.PayFormCode, e.SumCcWt }, "ChID_PayFormCode_SumCC_wt")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.CashBack).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TransactionInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSalePaysRazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_SalePaysRazn_06_31", "dbo");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.CashBack).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TransactionInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSaleRazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_SaleRazn_06_31", "dbo");

                entity.Property(e => e.CashSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CashSumCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ChangeSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChangeSumCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CreditID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocCreateTime).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TpurSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_nt");

                entity.Property(e => e.TpurSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_wt");

                entity.Property(e => e.TpurTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurTaxSum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Wpid).HasColumnName("WPID");
            });

            modelBuilder.Entity<TSaleShadow>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SaleShadow")
                    .IsClustered(false);

                entity.ToTable("t_SaleShadow", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CashSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CashSumCC");

                entity.Property(e => e.ChangeSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChangeSumCC");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CreditID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocCreateTime).HasColumnType("datetime");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TlevySum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TLevySum");

                entity.Property(e => e.TpurSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_nt");

                entity.Property(e => e.TpurSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurSumCC_wt");

                entity.Property(e => e.TpurTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TPurTaxSum");

                entity.Property(e => e.TrealSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRealSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Wpid).HasColumnName("WPID");
            });

            modelBuilder.Entity<TSaleShadowC>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SaleShadowC")
                    .IsClustered(false);

                entity.ToTable("t_SaleShadowC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSaleShadowD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SaleShadowD")
                    .IsClustered(false);

                entity.ToTable("t_SaleShadowD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_nt");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSaleShadowDlv>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SaleShadowDLV")
                    .IsClustered(false);

                entity.ToTable("t_SaleShadowDLV", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.LevyId).HasColumnName("LevyID");

                entity.Property(e => e.LevySum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TSaleShadowM>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ModCode, e.SrcPosId })
                    .HasName("pk_t_SaleShadowM")
                    .IsClustered(false);

                entity.ToTable("t_SaleShadowM", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");
            });

            modelBuilder.Entity<TSaleShadowPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SaleShadowPays")
                    .IsClustered(false);

                entity.ToTable("t_SaleShadowPays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<TSaleTemp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SaleTemp")
                    .IsClustered(false);

                entity.ToTable("t_SaleTemp", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CashSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CashSumCC");

                entity.Property(e => e.ChangeSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("ChangeSumCC");

                entity.Property(e => e.ClientInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CreditID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ExtraInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RateMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RateMC");

                entity.Property(e => e.SaleDocId).HasColumnName("SaleDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Visitors).HasDefaultValueSql("(0)");

                entity.Property(e => e.Wpid).HasColumnName("WPID");
            });

            modelBuilder.Entity<TSaleTempD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SaleTempD")
                    .IsClustered(false);

                entity.ToTable("t_SaleTempD", "dbo");

                entity.HasIndex(e => new { e.ChId, e.SrcPosId, e.SumCcWt }, "ChID_SrcPosID_SumCC_wt");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CanEditQty)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.CreasonId).HasColumnName("CReasonID");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CsrcPosId).HasColumnName("CSrcPosID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ModifyTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.PrintTime).HasColumnType("datetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurSumCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealBarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.RealQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ServingId).HasColumnName("ServingID");

                entity.Property(e => e.ServingTime).HasColumnType("smalldatetime");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSaleTempM>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId, e.ModCode })
                    .HasName("pk_t_SaleTempM")
                    .IsClustered(false);

                entity.ToTable("t_SaleTempM", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");
            });

            modelBuilder.Entity<TSaleTempPay>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SaleTempPays");

                entity.ToTable("t_SaleTempPays", "dbo");

                entity.HasIndex(e => new { e.ChId, e.PayFormCode, e.SumCcWt }, "ChID_PayFormCode_SumCC_wt");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BservId).HasColumnName("BServID");

                entity.Property(e => e.ChequeText)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.PospayText)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("POSPayText");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<TSest>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SEst")
                    .IsClustered(false);

                entity.ToTable("t_SEst", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RevaluationDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('20010101')");
            });

            modelBuilder.Entity<TSest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_SEsts", "dbo");

                entity.Property(e => e.Aextra)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("AExtra");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.TnewPriceAc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TNewPriceAC");

                entity.Property(e => e.TpriceAc)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TPriceAC");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("TQty");
            });

            modelBuilder.Entity<TSestD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("_pk_t_SEstD")
                    .IsClustered(false);

                entity.ToTable("t_SEstD", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CurrId, "CurrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.NewCurrId, "NewCurrID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewCurrId).HasColumnName("NewCurrID");

                entity.Property(e => e.NewPriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceAC");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceAC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SExp");

                entity.ToTable("t_SExp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SubDocDate, "SubDocDate");

                entity.HasIndex(e => e.SubStockId, "SubStockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SubDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.TcostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TCostSumCC");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TsetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSetSumCC");

                entity.Property(e => e.TsubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_nt");

                entity.Property(e => e.TsubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_wt");

                entity.Property(e => e.TsubNewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewTaxSum");

                entity.Property(e => e.TsubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_nt");

                entity.Property(e => e.TsubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_wt");

                entity.Property(e => e.TsubTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubTaxSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Value1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value3).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TSexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_SExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.SubStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TSexpA>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_t_SExpA")
                    .IsClustered(false);

                entity.ToTable("t_SExpA", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SetCostCc, "SetCostCC");

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ChId, e.NewSumCcNt, e.NewTaxSum, e.NewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_SExpA");

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.NewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_nt");

                entity.Property(e => e.NewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_wt");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SetCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetCostCC");

                entity.Property(e => e.SetValue1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SetValue2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SetValue3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSexpD>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SubSrcPosId })
                    .HasName("_pk_t_SExpD");

                entity.ToTable("t_SExpD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SubBarCode, "SubBarCode");

                entity.HasIndex(e => e.SubPpid, "SubPPID");

                entity.HasIndex(e => e.SubProdId, "SubProdID");

                entity.HasIndex(e => e.SubSecId, "SubSecID");

                entity.HasIndex(e => new { e.AchId, e.SubQty, e.SubSumCcNt, e.SubTaxSum, e.SubSumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.AchId, e.SubNewSumCcNt, e.SubNewTaxSum, e.SubNewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.SubProdId, e.SubPpid }, "t_PInPt_SExpD");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SubSrcPosId).HasColumnName("SubSrcPosID");

                entity.Property(e => e.SubBarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.SubExtra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubNewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_nt");

                entity.Property(e => e.SubNewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_wt");

                entity.Property(e => e.SubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_nt");

                entity.Property(e => e.SubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_wt");

                entity.Property(e => e.SubNewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubNewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubPpid).HasColumnName("SubPPID");

                entity.Property(e => e.SubPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC");

                entity.Property(e => e.SubPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_nt");

                entity.Property(e => e.SubPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_wt");

                entity.Property(e => e.SubProdId).HasColumnName("SubProdID");

                entity.Property(e => e.SubQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubSecId).HasColumnName("SubSecID");

                entity.Property(e => e.SubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_nt");

                entity.Property(e => e.SubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_wt");

                entity.Property(e => e.SubTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubUM");
            });

            modelBuilder.Entity<TSexpE>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SetCodeId1, e.SetCodeId2, e.SetCodeId3, e.SetCodeId4, e.SetCodeId5 })
                    .HasName("_pk_t_SExpE")
                    .IsClustered(false);

                entity.ToTable("t_SExpE", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SetCodeId1, "SetCodeID1");

                entity.HasIndex(e => e.SetCodeId2, "SetCodeID2");

                entity.HasIndex(e => e.SetCodeId3, "SetCodeID3");

                entity.HasIndex(e => e.SetCodeId4, "SetCodeID4");

                entity.HasIndex(e => e.SetCodeId5, "SetCodeID5");

                entity.HasIndex(e => e.SetSumCc, "SetSumCC");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SetCodeId1).HasColumnName("SetCodeID1");

                entity.Property(e => e.SetCodeId2).HasColumnName("SetCodeID2");

                entity.Property(e => e.SetCodeId3).HasColumnName("SetCodeID3");

                entity.Property(e => e.SetCodeId4).HasColumnName("SetCodeID4");

                entity.Property(e => e.SetCodeId5).HasColumnName("SetCodeID5");

                entity.Property(e => e.SetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetSumCC");
            });

            modelBuilder.Entity<TSexpM>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.CostCodeId1, e.CostCodeId2, e.CostCodeId3, e.CostCodeId4, e.CostCodeId5 })
                    .HasName("_pk_t_SExpM")
                    .IsClustered(false);

                entity.ToTable("t_SExpM", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CostCodeId1, "CostCodeID1");

                entity.HasIndex(e => e.CostCodeId2, "CostCodeID2");

                entity.HasIndex(e => e.CostCodeId3, "CostCodeID3");

                entity.HasIndex(e => e.CostCodeId4, "CostCodeID4");

                entity.HasIndex(e => e.CostCodeId5, "CostCodeID5");

                entity.HasIndex(e => e.CostSumCc, "CostSumCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CostCodeId1).HasColumnName("CostCodeID1");

                entity.Property(e => e.CostCodeId2).HasColumnName("CostCodeID2");

                entity.Property(e => e.CostCodeId3).HasColumnName("CostCodeID3");

                entity.Property(e => e.CostCodeId4).HasColumnName("CostCodeID4");

                entity.Property(e => e.CostCodeId5).HasColumnName("CostCodeID5");

                entity.Property(e => e.CostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostSumCC");
            });

            modelBuilder.Entity<TSpec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Spec");

                entity.ToTable("t_Spec", "dbo");

                entity.HasIndex(e => new { e.DocDate, e.ProdId, e.OurId }, "DocDate_ProdID_OurID")
                    .IsUnique();

                entity.HasIndex(e => new { e.DocId, e.OurId }, "DocID_OurID")
                    .IsUnique();

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.OutQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OutUm)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OutUM");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSpecD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SpecD");

                entity.ToTable("t_SpecD", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.OperDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OutUm)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OutUM");

                entity.Property(e => e.Percent1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Percent2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSpecD1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_SpecDs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.GrossQty).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.NetQty).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.OperDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OutQty).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.OutUm)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OutUM");

                entity.Property(e => e.Percent1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Percent2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSpecDesc>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SpecDesc");

                entity.ToTable("t_SpecDesc", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSpecParam>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SpecParams");

                entity.ToTable("t_SpecParams", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.LayQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LayUm)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LayUM");

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TSpecPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_SpecPrices", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CostCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("CostCC");

                entity.Property(e => e.Extra).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<TSpecT>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_SpecT");

                entity.ToTable("t_SpecT", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.OperDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSpexp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SPExp")
                    .IsClustered(false);

                entity.ToTable("t_SPExp", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SubDocDate, "SubDocDate");

                entity.HasIndex(e => e.SubStockId, "SubStockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SubDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.TcostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TCostSumCC");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TsetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSetSumCC");

                entity.Property(e => e.TsubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_nt");

                entity.Property(e => e.TsubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_wt");

                entity.Property(e => e.TsubNewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewTaxSum");

                entity.Property(e => e.TsubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_nt");

                entity.Property(e => e.TsubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_wt");

                entity.Property(e => e.TsubTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubTaxSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Value1)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Value2)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Value3)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<TSpexp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_SPExps", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.SubStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TSpexpA>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_t_SPExpA")
                    .IsClustered(false);

                entity.ToTable("t_SPExpA", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SetCostCc, "SetCostCC");

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ChId, e.NewSumCcNt, e.NewTaxSum, e.NewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInP_Tt_SPExpA");

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.NewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_nt");

                entity.Property(e => e.NewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_wt");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SetCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetCostCC");

                entity.Property(e => e.SetValue1)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SetValue2)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SetValue3)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSpexpD>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SubSrcPosId })
                    .HasName("_pk_t_SPExpD");

                entity.ToTable("t_SPExpD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SubBarCode, "SubBarCode");

                entity.HasIndex(e => e.SubPpid, "SubPPID");

                entity.HasIndex(e => e.SubProdId, "SubProdID");

                entity.HasIndex(e => e.SubSecId, "SubSecID");

                entity.HasIndex(e => new { e.AchId, e.SubQty, e.SubSumCcNt, e.SubTaxSum, e.SubSumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.AchId, e.SubNewSumCcNt, e.SubNewTaxSum, e.SubNewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.SubProdId, e.SubPpid }, "t_PInP_Tt_SPExpD");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SubSrcPosId).HasColumnName("SubSrcPosID");

                entity.Property(e => e.SubBarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.SubExtra)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SubNewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_nt");

                entity.Property(e => e.SubNewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_wt");

                entity.Property(e => e.SubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_nt");

                entity.Property(e => e.SubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_wt");

                entity.Property(e => e.SubNewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubNewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubPpid).HasColumnName("SubPPID");

                entity.Property(e => e.SubPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SubPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_nt");

                entity.Property(e => e.SubPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_wt");

                entity.Property(e => e.SubProdId).HasColumnName("SubProdID");

                entity.Property(e => e.SubQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubSecId).HasColumnName("SubSecID");

                entity.Property(e => e.SubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_nt");

                entity.Property(e => e.SubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_wt");

                entity.Property(e => e.SubTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubUM");
            });

            modelBuilder.Entity<TSpexpE>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SetCodeId1, e.SetCodeId2, e.SetCodeId3, e.SetCodeId4, e.SetCodeId5 })
                    .HasName("_pk_t_SPExpE");

                entity.ToTable("t_SPExpE", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SetCodeId1, "SetCodeID1");

                entity.HasIndex(e => e.SetCodeId2, "SetCodeID2");

                entity.HasIndex(e => e.SetCodeId3, "SetCodeID3");

                entity.HasIndex(e => e.SetCodeId4, "SetCodeID4");

                entity.HasIndex(e => e.SetCodeId5, "SetCodeID5");

                entity.HasIndex(e => e.SetSumCc, "SetSumCC");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SetCodeId1).HasColumnName("SetCodeID1");

                entity.Property(e => e.SetCodeId2).HasColumnName("SetCodeID2");

                entity.Property(e => e.SetCodeId3).HasColumnName("SetCodeID3");

                entity.Property(e => e.SetCodeId4).HasColumnName("SetCodeID4");

                entity.Property(e => e.SetCodeId5).HasColumnName("SetCodeID5");

                entity.Property(e => e.SetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetSumCC");
            });

            modelBuilder.Entity<TSpexpM>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.CostCodeId1, e.CostCodeId2, e.CostCodeId3, e.CostCodeId4, e.CostCodeId5 })
                    .HasName("_pk_t_SPExpM");

                entity.ToTable("t_SPExpM", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CostCodeId1, "CostCodeID1");

                entity.HasIndex(e => e.CostCodeId2, "CostCodeID2");

                entity.HasIndex(e => e.CostCodeId3, "CostCodeID3");

                entity.HasIndex(e => e.CostCodeId4, "CostCodeID4");

                entity.HasIndex(e => e.CostCodeId5, "CostCodeID5");

                entity.HasIndex(e => e.CostSumCc, "CostSumCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CostCodeId1).HasColumnName("CostCodeID1");

                entity.Property(e => e.CostCodeId2).HasColumnName("CostCodeID2");

                entity.Property(e => e.CostCodeId3).HasColumnName("CostCodeID3");

                entity.Property(e => e.CostCodeId4).HasColumnName("CostCodeID4");

                entity.Property(e => e.CostCodeId5).HasColumnName("CostCodeID5");

                entity.Property(e => e.CostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostSumCC");
            });

            modelBuilder.Entity<TSprec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SPRec")
                    .IsClustered(false);

                entity.ToTable("t_SPRec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SubDocDate, "SubDocDate");

                entity.HasIndex(e => e.SubStockId, "SubStockID");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SubDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.TcostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TCostSumCC");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TsetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSetSumCC");

                entity.Property(e => e.TsubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_nt");

                entity.Property(e => e.TsubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_wt");

                entity.Property(e => e.TsubNewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewTaxSum");

                entity.Property(e => e.TsubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_nt");

                entity.Property(e => e.TsubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_wt");

                entity.Property(e => e.TsubTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubTaxSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Value1)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Value2)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Value3)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<TSprec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_SPRecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.SubStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TSprecA>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_t_SPRecA")
                    .IsClustered(false);

                entity.ToTable("t_SPRecA", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SetCostCc, "SetCostCC");

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ChId, e.NewSumCcNt, e.NewTaxSum, e.NewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInP_Tt_SPRecA");

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Extra)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.NewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_nt");

                entity.Property(e => e.NewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_wt");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SetCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetCostCC");

                entity.Property(e => e.SetValue1)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SetValue2)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SetValue3)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSprecD>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SubSrcPosId })
                    .HasName("_pk_t_SPRecD");

                entity.ToTable("t_SPRecD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SubBarCode, "SubBarCode");

                entity.HasIndex(e => e.SubPpid, "SubPPID");

                entity.HasIndex(e => e.SubProdId, "SubProdID");

                entity.HasIndex(e => e.SubSecId, "SubSecID");

                entity.HasIndex(e => new { e.AchId, e.SubQty, e.SubSumCcNt, e.SubTaxSum, e.SubSumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.AchId, e.SubNewSumCcNt, e.SubNewTaxSum, e.SubNewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.SubProdId, e.SubPpid }, "t_PInP_Tt_SPRecD");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SubSrcPosId).HasColumnName("SubSrcPosID");

                entity.Property(e => e.SubBarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.SubNewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_nt");

                entity.Property(e => e.SubNewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_wt");

                entity.Property(e => e.SubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_nt");

                entity.Property(e => e.SubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_wt");

                entity.Property(e => e.SubNewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubNewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubPpid).HasColumnName("SubPPID");

                entity.Property(e => e.SubPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_nt");

                entity.Property(e => e.SubPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_wt");

                entity.Property(e => e.SubProdId).HasColumnName("SubProdID");

                entity.Property(e => e.SubQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubSecId).HasColumnName("SubSecID");

                entity.Property(e => e.SubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_nt");

                entity.Property(e => e.SubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_wt");

                entity.Property(e => e.SubTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubUM");
            });

            modelBuilder.Entity<TSprecE>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SetCodeId1, e.SetCodeId2, e.SetCodeId3, e.SetCodeId4, e.SetCodeId5 })
                    .HasName("_pk_t_SPRecE");

                entity.ToTable("t_SPRecE", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SetCodeId1, "SetCodeID1");

                entity.HasIndex(e => e.SetCodeId2, "SetCodeID2");

                entity.HasIndex(e => e.SetCodeId3, "SetCodeID3");

                entity.HasIndex(e => e.SetCodeId4, "SetCodeID4");

                entity.HasIndex(e => e.SetCodeId5, "SetCodeID5");

                entity.HasIndex(e => e.SetSumCc, "SetSumCC");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SetCodeId1).HasColumnName("SetCodeID1");

                entity.Property(e => e.SetCodeId2).HasColumnName("SetCodeID2");

                entity.Property(e => e.SetCodeId3).HasColumnName("SetCodeID3");

                entity.Property(e => e.SetCodeId4).HasColumnName("SetCodeID4");

                entity.Property(e => e.SetCodeId5).HasColumnName("SetCodeID5");

                entity.Property(e => e.SetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetSumCC");
            });

            modelBuilder.Entity<TSprecM>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.CostCodeId1, e.CostCodeId2, e.CostCodeId3, e.CostCodeId4, e.CostCodeId5 })
                    .HasName("_pk_t_SPRecM");

                entity.ToTable("t_SPRecM", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CostCodeId1, "CostCodeID1");

                entity.HasIndex(e => e.CostCodeId2, "CostCodeID2");

                entity.HasIndex(e => e.CostCodeId3, "CostCodeID3");

                entity.HasIndex(e => e.CostCodeId4, "CostCodeID4");

                entity.HasIndex(e => e.CostCodeId5, "CostCodeID5");

                entity.HasIndex(e => e.CostSumCc, "CostSumCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CostCodeId1).HasColumnName("CostCodeID1");

                entity.Property(e => e.CostCodeId2).HasColumnName("CostCodeID2");

                entity.Property(e => e.CostCodeId3).HasColumnName("CostCodeID3");

                entity.Property(e => e.CostCodeId4).HasColumnName("CostCodeID4");

                entity.Property(e => e.CostCodeId5).HasColumnName("CostCodeID5");

                entity.Property(e => e.CostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostSumCC");
            });

            modelBuilder.Entity<TSrec>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_SRec")
                    .IsClustered(false);

                entity.ToTable("t_SRec", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocId, "DocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.IntDocId, "IntDocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.KursMc, "KursMC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SubDocDate, "SubDocDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SubStockId, "SubStockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SubDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.TcostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TCostSumCC");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TsetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSetSumCC");

                entity.Property(e => e.TsubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_nt");

                entity.Property(e => e.TsubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewSumCC_wt");

                entity.Property(e => e.TsubNewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubNewTaxSum");

                entity.Property(e => e.TsubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_nt");

                entity.Property(e => e.TsubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubSumCC_wt");

                entity.Property(e => e.TsubTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSubTaxSum");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Value1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Value3).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TSrec1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_SRecs", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubStockId).HasColumnName("SubStockID");

                entity.Property(e => e.SubStockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TSrecA>(entity =>
            {
                entity.HasKey(e => e.AchId)
                    .HasName("pk_t_SRecA");

                entity.ToTable("t_SRecA", "dbo");

                entity.HasIndex(e => e.BarCode, "BarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.ProdId, "ProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.SetCostCc, "SetCostCC");

                entity.HasIndex(e => new { e.ChId, e.SrcPosId }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.ChId, e.Qty, e.SumCcNt, e.TaxSum, e.SumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.ChId, e.NewSumCcNt, e.NewTaxSum, e.NewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_SRecA")
                    .HasFillFactor(90);

                entity.Property(e => e.AchId)
                    .ValueGeneratedNever()
                    .HasColumnName("AChID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Extra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_nt");

                entity.Property(e => e.NewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewPriceCC_wt");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SetCostCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetCostCC");

                entity.Property(e => e.SetValue1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SetValue2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SetValue3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TSrecD>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SubSrcPosId })
                    .HasName("_pk_t_SRecD");

                entity.ToTable("t_SRecD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SubBarCode, "SubBarCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SubPpid, "SubPPID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SubProdId, "SubProdID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SubSecId, "SubSecID");

                entity.HasIndex(e => new { e.AchId, e.SubQty, e.SubSumCcNt, e.SubTaxSum, e.SubSumCcWt }, "ZTotals");

                entity.HasIndex(e => new { e.AchId, e.SubNewSumCcNt, e.SubNewTaxSum, e.SubNewSumCcWt }, "ZTotalsNew");

                entity.HasIndex(e => new { e.SubProdId, e.SubPpid }, "t_PInPt_SRecD")
                    .HasFillFactor(90);

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SubSrcPosId).HasColumnName("SubSrcPosID");

                entity.Property(e => e.SubBarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.SubNewPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_nt");

                entity.Property(e => e.SubNewPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewPriceCC_wt");

                entity.Property(e => e.SubNewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_nt");

                entity.Property(e => e.SubNewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubNewSumCC_wt");

                entity.Property(e => e.SubNewTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubNewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubPpid).HasColumnName("SubPPID");

                entity.Property(e => e.SubPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_nt");

                entity.Property(e => e.SubPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubPriceCC_wt");

                entity.Property(e => e.SubProdId).HasColumnName("SubProdID");

                entity.Property(e => e.SubQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubSecId).HasColumnName("SubSecID");

                entity.Property(e => e.SubSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_nt");

                entity.Property(e => e.SubSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SubSumCC_wt");

                entity.Property(e => e.SubTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SubUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubUM");
            });

            modelBuilder.Entity<TSrecE>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.SetCodeId1, e.SetCodeId2, e.SetCodeId3, e.SetCodeId4, e.SetCodeId5 })
                    .HasName("_pk_t_SRecE")
                    .IsClustered(false);

                entity.ToTable("t_SRecE", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.SetCodeId1, "SetCodeID1");

                entity.HasIndex(e => e.SetCodeId2, "SetCodeID2");

                entity.HasIndex(e => e.SetCodeId3, "SetCodeID3");

                entity.HasIndex(e => e.SetCodeId4, "SetCodeID4");

                entity.HasIndex(e => e.SetCodeId5, "SetCodeID5");

                entity.HasIndex(e => e.SetSumCc, "SetSumCC");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.SetCodeId1).HasColumnName("SetCodeID1");

                entity.Property(e => e.SetCodeId2).HasColumnName("SetCodeID2");

                entity.Property(e => e.SetCodeId3).HasColumnName("SetCodeID3");

                entity.Property(e => e.SetCodeId4).HasColumnName("SetCodeID4");

                entity.Property(e => e.SetCodeId5).HasColumnName("SetCodeID5");

                entity.Property(e => e.SetSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SetSumCC");
            });

            modelBuilder.Entity<TSrecM>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.CostCodeId1, e.CostCodeId2, e.CostCodeId3, e.CostCodeId4, e.CostCodeId5 })
                    .HasName("_pk_t_SRecM")
                    .IsClustered(false);

                entity.ToTable("t_SRecM", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => e.CostCodeId1, "CostCodeID1");

                entity.HasIndex(e => e.CostCodeId2, "CostCodeID2");

                entity.HasIndex(e => e.CostCodeId3, "CostCodeID3");

                entity.HasIndex(e => e.CostCodeId4, "CostCodeID4");

                entity.HasIndex(e => e.CostCodeId5, "CostCodeID5");

                entity.HasIndex(e => e.CostSumCc, "CostSumCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CostCodeId1).HasColumnName("CostCodeID1");

                entity.Property(e => e.CostCodeId2).HasColumnName("CostCodeID2");

                entity.Property(e => e.CostCodeId3).HasColumnName("CostCodeID3");

                entity.Property(e => e.CostCodeId4).HasColumnName("CostCodeID4");

                entity.Property(e => e.CostCodeId5).HasColumnName("CostCodeID5");

                entity.Property(e => e.CostSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("CostSumCC");
            });

            modelBuilder.Entity<TVen>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_Ven");

                entity.ToTable("t_Ven", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId2, "CodeID2")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId3, "CodeID3")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId4, "CodeID4")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.CodeId5, "CodeID5")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocDate, "DocDate")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.DocId, "DocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.EmpId, "EmpID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocId, e.DocDate, e.StockId }, "IDX-dbo-t_Ven-001")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.IntDocId, "IntDocID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.KursMc, "KursMC")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.OurId, "OurID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.StockId, "StockID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.DocDate, e.StockId, e.ChId }, "UIDX-dbo-t_Ven-001")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Cause).HasColumnName("cause");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.Curator).HasColumnName("curator");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocIdwms).HasColumnName("DocIDWMS");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SrcDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.TrouteSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TRouteSumCC");

                entity.Property(e => e.TspendSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSpendSumCC");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");
            });

            modelBuilder.Entity<TVen1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("t_Vens", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DiffInSum).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DiffPlsum)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DiffPLSum");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StocKname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("StocKName");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TnewSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC");

                entity.Property(e => e.TnewSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TNewSumMC");

                entity.Property(e => e.TsumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC");

                entity.Property(e => e.TsumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("TSumMC");
            });

            modelBuilder.Entity<TVenA>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.ProdId })
                    .HasName("_pk_t_VenA");

                entity.ToTable("t_VenA", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => new { e.ChId, e.TsrcPosId }, "NoDuplicate")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ChId, e.ProdId }, "UIDX-dbo-t_VenA-001")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ChId, e.Tqty, e.TnewQty }, "ix_t_VenA_ChID_TQty_TNewQty_includes");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.DiffPlsum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("DiffPLSum");

                entity.Property(e => e.Norma1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PlpriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PLPriceCC");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_NT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reasoncalc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TnewQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewQty");

                entity.Property(e => e.TnewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_nt");

                entity.Property(e => e.TnewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewSumCC_wt");

                entity.Property(e => e.TnewTaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewTaxSum");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TQty");

                entity.Property(e => e.TsrcPosId).HasColumnName("TSrcPosID");

                entity.Property(e => e.TsumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_nt");

                entity.Property(e => e.TsumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TSumCC_wt");

                entity.Property(e => e.TtaxSum)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TTaxSum");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.VenCorrectionQty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TVenD>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DetProdId, e.SrcPosId })
                    .HasName("_pk_t_VenD");

                entity.ToTable("t_VenD", "dbo");

                entity.HasIndex(e => e.ChId, "ChID");

                entity.HasIndex(e => new { e.ChId, e.DetProdId }, "ChIDDetProdID");

                entity.HasIndex(e => e.DetProdId, "DetProdID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DetProdId, e.Ppid }, "DetProdIDPPID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Ppid, "PPID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.SecId, "SecID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewSumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_nt");

                entity.Property(e => e.NewSumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumCC_wt");

                entity.Property(e => e.NewTaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TVenDUm>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DetProdId, e.DetUm })
                    .HasName("pk_t_VenD_UM");

                entity.ToTable("t_VenD_UM", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DetProdId).HasColumnName("DetProdID");

                entity.Property(e => e.DetUm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DetUM");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.QtyUm)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("QtyUM");

                entity.Property(e => e.Tqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TQty");
            });

            modelBuilder.Entity<TVenI>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.SrcPosId })
                    .HasName("pk_t_VenI");

                entity.ToTable("t_VenI", "dbo");

                entity.HasIndex(e => new { e.ProdId, e.BarCode, e.Um }, "ProdID_Barcode_UM");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.InputTypeId).HasColumnName("InputTypeID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<TZInP>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_zInP")
                    .IsClustered(false);

                entity.ToTable("t_zInP", "dbo");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.KursMc, "KursMC");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.Ppid, "PPID");

                entity.HasIndex(e => e.ProdId, "ProdID");

                entity.HasIndex(e => e.Qty, "Qty");

                entity.HasIndex(e => e.SecId, "SecID");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.SumCcNt, "SumCC_nt");

                entity.HasIndex(e => e.SumCcWt, "SumCC_wt");

                entity.HasIndex(e => e.TaxSum, "TaxSum");

                entity.HasIndex(e => new { e.OurId, e.StockId, e.SecId, e.ProdId, e.Ppid }, "UniqueIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.ProdId, e.Ppid }, "t_PInPt_zInP");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TZRep>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_t_zRep")
                    .IsClustered(false);

                entity.ToTable("t_zRep", "dbo");

                entity.HasIndex(e => new { e.Crid, e.DocTime }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.FacId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FacID");

                entity.Property(e => e.FinId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FinID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OperId).HasColumnName("OperID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.RetSumA)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetSum_A");

                entity.Property(e => e.RetSumB)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetSum_B");

                entity.Property(e => e.RetSumC)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetSum_C");

                entity.Property(e => e.RetSumCard).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumCash).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumCheque).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumCredit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetSumD)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetSum_D");

                entity.Property(e => e.RetSumE)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetSum_E");

                entity.Property(e => e.RetSumF)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetSum_F");

                entity.Property(e => e.RetSumOther).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RetTaxA)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetTax_A")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetTaxB)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetTax_B")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetTaxC)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetTax_C")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetTaxD)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetTax_D")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetTaxE)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetTax_E")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RetTaxF)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RetTax_F")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SumA)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Sum_A");

                entity.Property(e => e.SumB)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Sum_B");

                entity.Property(e => e.SumC)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Sum_C");

                entity.Property(e => e.SumCard).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCash).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.SumCheque).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumCredit).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumD)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Sum_D");

                entity.Property(e => e.SumE)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Sum_E");

                entity.Property(e => e.SumF)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Sum_F");

                entity.Property(e => e.SumMonExp).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumMonRec).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumOther).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SumRem)
                    .HasColumnType("numeric(21, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TaxA)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Tax_A")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxB)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Tax_B")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxC)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Tax_C")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxD)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Tax_D")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxE)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Tax_E")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxF)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("Tax_F")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ZrepNum).HasColumnName("ZRepNum");
            });

            modelBuilder.Entity<TempA>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempA", "AVRORA\\A.Pysanka");

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("parent_id");
            });

            modelBuilder.Entity<TempA1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempA", "AVRORA\\O.Lysenko");

                entity.Property(e => e.Prodid).HasColumnName("prodid");

                entity.Property(e => e.Qty).HasColumnName("qty");
            });

            modelBuilder.Entity<TempB>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempB", "AVRORA\\O.Lysenko");

                entity.Property(e => e.Prodid).HasColumnName("prodid");

                entity.Property(e => e.Qty).HasColumnName("qty");
            });

            modelBuilder.Entity<TempBadVen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_badVen", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");
            });

            modelBuilder.Entity<TempDc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_dc", "dbo");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");
            });

            modelBuilder.Entity<TempDc10400>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_dc_10400", "dbo");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");
            });

            modelBuilder.Entity<TempDc11004>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_dc_11004", "dbo");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");
            });

            modelBuilder.Entity<TempDcWrong>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_dc_wrong", "dbo");

                entity.Property(e => e.BirthDay).HasColumnType("smalldatetime");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DcardIdold)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DcardIDOld");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneMob)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempDcard20210101>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_dcard_20210101", "dbo");

                entity.Property(e => e.DcardId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DcardID");

                entity.Property(e => e.Sumbonus)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("sumbonus");
            });

            modelBuilder.Entity<TempDcards20220519Rudenko0>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_dcards_20220519_Rudenko_0", "dbo");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TempDcards20220519RudenkoDd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_dcards_20220519_Rudenko_dd", "dbo");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Docdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("docdate");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TempDistributionQtyD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_distributionQtyD", "dbo");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.Cnt)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("cnt");

                entity.Property(e => e.DetSrcPosId).HasColumnName("DetSrcPosID");

                entity.Property(e => e.DistributionQtyD)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("distributionQtyD");
            });

            modelBuilder.Entity<TempDocLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_DocLinks", "dbo");

                entity.Property(e => e.ChildChId).HasColumnName("ChildChID");

                entity.Property(e => e.ChildDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChildDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChildDocID");

                entity.Property(e => e.Crc2).HasColumnName("CRC2");

                entity.Property(e => e.DocLinkTypeId).HasColumnName("DocLinkTypeID");

                entity.Property(e => e.LinkDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LinkDocDate2).HasColumnType("date");

                entity.Property(e => e.LinkId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LinkID");

                entity.Property(e => e.LinkSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LinkSumCC");

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.ParentDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ParentDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ParentDocID");
            });

            modelBuilder.Entity<TempExcRudenko>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_exc_rudenko", "dbo");

                entity.Property(e => e.Chid).HasColumnName("chid");

                entity.Property(e => e.DestStockId).HasColumnName("DestStockID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Docid).HasColumnName("docid");

                entity.Property(e => e.NewStockId).HasColumnName("NewStockID");

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.Stockid).HasColumnName("stockid");
            });

            modelBuilder.Entity<TempItImpDcardId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_it_ImpDcardID", "dbo");

                entity.Property(e => e.BirthDay).HasColumnType("smalldatetime");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.DcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DcardIdold)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DcardIDOld");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneMob)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempLogDiscExp>(entity =>
            {
                entity.HasKey(e => new { e.LogId, e.DocCode, e.ChId })
                    .HasName("pk_temp_LogDiscExp");

                entity.ToTable("temp_LogDiscExp", "dbo");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TempLogDiscRec>(entity =>
            {
                entity.HasKey(e => new { e.LogId, e.DocCode, e.ChId })
                    .HasName("pk_temp_LogDiscRec");

                entity.ToTable("temp_LogDiscRec", "dbo");

                entity.HasIndex(e => e.DiscCode, "DiscCode");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.TempLogDiscRecs)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_temp_LogDiscRec_r_DCards");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.TempLogDiscRecs)
                    .HasForeignKey(d => d.DiscCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_temp_LogDiscRec_r_Discs");
            });

            modelBuilder.Entity<TempRProd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_r_prods", "dbo");

                entity.Property(e => e.Age).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Article1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Article2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Article3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Article4)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Capacity).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.ColCatId).HasColumnName("ColCatID");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CounId).HasColumnName("CounID");

                entity.Property(e => e.Country)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CstDty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstDty2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstExc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstPrc).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.CstProdCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EexpSet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EExpSet");

                entity.Property(e => e.ExciseGrId).HasColumnName("ExciseGrID");

                entity.Property(e => e.Extra1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra4).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Extra5).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.File1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ImpAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Importer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LexpSet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LExpSet");

                entity.Property(e => e.Materials)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MaxExtra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MaxPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MaxPriceMC");

                entity.Property(e => e.MinExtra).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MinPriceMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("MinPriceMC");

                entity.Property(e => e.MinRem).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Mplicity).HasColumnName("MPlicity");

                entity.Property(e => e.Norma1).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma2).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma3).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma4).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Norma5).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notemenager)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Otm).HasColumnName("otm");

                entity.Property(e => e.PbgrId).HasColumnName("PBGrID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PcatKmid).HasColumnName("PcatKMID");

                entity.Property(e => e.PgrAid).HasColumnName("PGrAID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.PgrId6).HasColumnName("PGrID6");

                entity.Property(e => e.ProdAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdPpdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ProdPPDate");

                entity.Property(e => e.Producer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RecCatId).HasColumnName("RecCatID");

                entity.Property(e => e.RecMaxPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RecMaxPriceCC");

                entity.Property(e => e.RecMinPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RecMinPriceCC");

                entity.Property(e => e.RecRemQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RecStdPriceCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("RecStdPriceCC");

                entity.Property(e => e.Regulations)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleComponents)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleConditions)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleGrId).HasColumnName("ScaleGrID");

                entity.Property(e => e.ScaleStandard)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StdExtraE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StdExtraR)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TaxFreeReason)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.Warnings)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TempRec>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_rec", "dbo");

                entity.Property(e => e.Chid).HasColumnName("chid");

                entity.Property(e => e.Statecode).HasColumnName("statecode");
            });

            modelBuilder.Entity<TempRem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_rem", "dbo");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TempRemd206>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_remd206", "dbo");

                entity.Property(e => e.Prodid).HasColumnName("prodid");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<TempRudenko20210720Crret>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_rudenko_20210720_crret", "dbo");

                entity.Property(e => e.CrretChid).HasColumnName("crretChid");

                entity.Property(e => e.CrretPpid).HasColumnName("crretPpid");

                entity.Property(e => e.CrretProdid).HasColumnName("crretProdid");

                entity.Property(e => e.CrretQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("crretQty");

                entity.Property(e => e.Docdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("docdate");

                entity.Property(e => e.SalePpid).HasColumnName("salePpid");

                entity.Property(e => e.SaleProdid).HasColumnName("saleProdid");

                entity.Property(e => e.SaleQty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("saleQty");
            });

            modelBuilder.Entity<TempSaled405>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_saled_405", "dbo");

                entity.Property(e => e.BarCode)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.ModifyTime).HasColumnType("datetime");

                entity.Property(e => e.Plid).HasColumnName("PLID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.PriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_nt");

                entity.Property(e => e.PriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PriceCC_wt");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.PurPriceCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_nt");

                entity.Property(e => e.PurPriceCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("PurPriceCC_wt");

                entity.Property(e => e.PurTax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealPrice).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.RealSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");

                entity.Property(e => e.Tax).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxSum).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TaxTypeId).HasColumnName("TaxTypeID");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UM");
            });

            modelBuilder.Entity<TempStocksRudenko>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_Stocks_rudenko", "dbo");

                entity.Property(e => e.Num)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("num");

                entity.Property(e => e.RemDo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("rem_do");

                entity.Property(e => e.RemPosle)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("rem_posle");

                entity.Property(e => e.Stockid).HasColumnName("stockid");
            });

            modelBuilder.Entity<TempTsale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_tsale", "dbo");

                entity.Property(e => e.Chid).HasColumnName("chid");
            });

            modelBuilder.Entity<TempTsaled>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_tsaled", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<TempTsalepay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_tsalepays", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PospayDocId).HasColumnName("POSPayDocID");

                entity.Property(e => e.PospayId).HasColumnName("POSPayID");

                entity.Property(e => e.PospayRrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("POSPayRRN");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumCcWt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_wt");
            });

            modelBuilder.Entity<TempTt20190523>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_tt_20190523", "dbo");

                entity.Property(e => e.Stockid).HasColumnName("stockid");

                entity.Property(e => e.Tt).HasColumnName("tt");
            });

            modelBuilder.Entity<TempZDocdc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_z_docdc", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");
            });

            modelBuilder.Entity<TempZLogDiscExpDcardchid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_z_LogDiscExp_dcardchid", "dbo");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogId).HasColumnName("LogID");
            });

            modelBuilder.Entity<TempZLogDiscRecDcardchid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_z_LogDiscRec_dcardchid", "dbo");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogId).HasColumnName("LogID");
            });

            modelBuilder.Entity<TempZLogdiscexp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_z_logdiscexp", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TempZLogdiscrec>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_z_logdiscrec", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<TempreportUnitBalancefrom06>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempreportUnitBalancefrom06", "dbo");

                entity.Property(e => e._21НеОбработанныеРаспределенияВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.1. Не обработанные распределения, Всего юнитов");

                entity.Property(e => e._22НеОбработанныеРаспределенияЮнитовНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.2. Не обработанные распределения, Юнитов на ТТ");

                entity.Property(e => e._23НеОбработанныеРаспределенияВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.3. Не обработанные распределения, Всего к-во артикулов");

                entity.Property(e => e._24НеОбработанныеРаспределенияКВоСтрокЗаказаНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.4. Не обработанные распределения, К-во строк заказа на ТТ");

                entity.Property(e => e._25НеОбработанныеРаспределенияВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.5. Не обработанные распределения, Всего сумма ЦЗ");

                entity.Property(e => e._31ОбработаноВсегоЮнитовЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.1. Обработано, Всего юнитов за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._32ОбработаноЮнитовНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.2. Обработано, Юнитов на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._33ОбработаноКВоАртикуловНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.3. Обработано, К-во артикулов на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._34ОбработаноКВоСтрокЗаказаНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.4. Обработано, К-во строк заказа на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._35ОбработаноВсегоСуммаЦзЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.5. Обработано, Всего сумма ЦЗ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._36ОбработаноСуммаЦзНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.6. Обработано, Сумма ЦЗ на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._51ОжидаемоеПоступлениеВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("5.1. Ожидаемое поступление, Всего юнитов");

                entity.Property(e => e._52ОжидаемоеПоступлениеВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("5.2. Ожидаемое поступление, Всего к-во артикулов");

                entity.Property(e => e._53ОжидаемоеПоступлениеВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("5.3. Ожидаемое поступление, Всего сумма ЦЗ");

                entity.Property(e => e._61РаспределеноВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("6.1. Распределено, Всего юнитов");

                entity.Property(e => e._62РаспределеноВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("6.2. Распределено, Всего к-во артикулов");

                entity.Property(e => e._63РаспределеноВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("6.3. Распределено, Всего сумма ЦЗ");

                entity.Property(e => e._71ФактическиПоступилоВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("7.1. Фактически поступило, Всего юнитов");

                entity.Property(e => e._72ФактическиПоступилоВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("7.2. Фактически поступило, Всего к-во артикулов");

                entity.Property(e => e._73ФактическиПоступилоВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("7.3. Фактически поступило, Всего сумма ЦЗ");

                entity.Property(e => e._81НаСколькоДнейОбработкиТовараВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.1. На сколько дней обработки товара, Всего юнитов");

                entity.Property(e => e._82НаСколькоДнейОбработкиТовараЮнитовНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.2. На сколько дней обработки товара, Юнитов на ТТ");

                entity.Property(e => e._83НаСколькоДнейОбработкиТовараВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.3. На сколько дней обработки товара, Всего к-во артикулов");

                entity.Property(e => e._84НаСколькоДнейОбработкиТовараКВоСтрокЗаказаНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.4. На сколько дней обработки товара, К-во строк заказа на ТТ");

                entity.Property(e => e._85НаСколькоДнейОбработкиТовараВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.5. На сколько дней обработки товара, Всего сумма ЦЗ");

                entity.Property(e => e._91СреднедневнаяОбработкаВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.1. Среднедневная обработка, Всего юнитов");

                entity.Property(e => e._92СреднедневнаяОбработкаЮнитовНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.2. Среднедневная обработка, Юнитов на ТТ");

                entity.Property(e => e._93СреднедневнаяОбработкаКВоАртикуловНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.3. Среднедневная обработка, К-во артикулов на ТТ");

                entity.Property(e => e._94СреднедневнаяОбработкаКВоСтрокЗаказаНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.4. Среднедневная обработка, К-во строк заказа на ТТ");

                entity.Property(e => e._95СреднедневнаяОбработкаВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.5. Среднедневная обработка, Всего сумма ЦЗ");

                entity.Property(e => e._96СреднедневнаяОбработкаСуммаЦзНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.6. Среднедневная обработка, Сумма ЦЗ на ТТ");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<TempreportUnitBalancefrom31>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempreportUnitBalancefrom31", "dbo");

                entity.Property(e => e._21НеОбработанныеРаспределенияВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.1. Не обработанные распределения, Всего юнитов");

                entity.Property(e => e._22НеОбработанныеРаспределенияЮнитовНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.2. Не обработанные распределения, Юнитов на ТТ");

                entity.Property(e => e._23НеОбработанныеРаспределенияВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.3. Не обработанные распределения, Всего к-во артикулов");

                entity.Property(e => e._24НеОбработанныеРаспределенияКВоСтрокЗаказаНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.4. Не обработанные распределения, К-во строк заказа на ТТ");

                entity.Property(e => e._25НеОбработанныеРаспределенияВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("2.5. Не обработанные распределения, Всего сумма ЦЗ");

                entity.Property(e => e._31ОбработаноВсегоЮнитовЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.1. Обработано, Всего юнитов за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._32ОбработаноЮнитовНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.2. Обработано, Юнитов на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._33ОбработаноКВоАртикуловНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.3. Обработано, К-во артикулов на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._34ОбработаноКВоСтрокЗаказаНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.4. Обработано, К-во строк заказа на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._35ОбработаноВсегоСуммаЦзЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.5. Обработано, Всего сумма ЦЗ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._36ОбработаноСуммаЦзНаТтЗаСуткиС800До800)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("3.6. Обработано, Сумма ЦЗ на ТТ за сутки (с 8.00 до 8.00)");

                entity.Property(e => e._51ОжидаемоеПоступлениеВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("5.1. Ожидаемое поступление, Всего юнитов");

                entity.Property(e => e._52ОжидаемоеПоступлениеВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("5.2. Ожидаемое поступление, Всего к-во артикулов");

                entity.Property(e => e._53ОжидаемоеПоступлениеВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("5.3. Ожидаемое поступление, Всего сумма ЦЗ");

                entity.Property(e => e._61РаспределеноВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("6.1. Распределено, Всего юнитов");

                entity.Property(e => e._62РаспределеноВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("6.2. Распределено, Всего к-во артикулов");

                entity.Property(e => e._63РаспределеноВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("6.3. Распределено, Всего сумма ЦЗ");

                entity.Property(e => e._71ФактическиПоступилоВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("7.1. Фактически поступило, Всего юнитов");

                entity.Property(e => e._72ФактическиПоступилоВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("7.2. Фактически поступило, Всего к-во артикулов");

                entity.Property(e => e._73ФактическиПоступилоВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("7.3. Фактически поступило, Всего сумма ЦЗ");

                entity.Property(e => e._81НаСколькоДнейОбработкиТовараВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.1. На сколько дней обработки товара, Всего юнитов");

                entity.Property(e => e._82НаСколькоДнейОбработкиТовараЮнитовНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.2. На сколько дней обработки товара, Юнитов на ТТ");

                entity.Property(e => e._83НаСколькоДнейОбработкиТовараВсегоКВоАртикулов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.3. На сколько дней обработки товара, Всего к-во артикулов");

                entity.Property(e => e._84НаСколькоДнейОбработкиТовараКВоСтрокЗаказаНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.4. На сколько дней обработки товара, К-во строк заказа на ТТ");

                entity.Property(e => e._85НаСколькоДнейОбработкиТовараВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("8.5. На сколько дней обработки товара, Всего сумма ЦЗ");

                entity.Property(e => e._91СреднедневнаяОбработкаВсегоЮнитов)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.1. Среднедневная обработка, Всего юнитов");

                entity.Property(e => e._92СреднедневнаяОбработкаЮнитовНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.2. Среднедневная обработка, Юнитов на ТТ");

                entity.Property(e => e._93СреднедневнаяОбработкаКВоАртикуловНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.3. Среднедневная обработка, К-во артикулов на ТТ");

                entity.Property(e => e._94СреднедневнаяОбработкаКВоСтрокЗаказаНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.4. Среднедневная обработка, К-во строк заказа на ТТ");

                entity.Property(e => e._95СреднедневнаяОбработкаВсегоСуммаЦз)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.5. Среднедневная обработка, Всего сумма ЦЗ");

                entity.Property(e => e._96СреднедневнаяОбработкаСуммаЦзНаТт)
                    .HasColumnType("decimal(21, 9)")
                    .HasColumnName("9.6. Среднедневная обработка, Сумма ЦЗ на ТТ");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Tempt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempt", "AVRORA\\O.Lysenko");

                entity.Property(e => e.Step)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Test13>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test13", "dbo");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<TestTable>(entity =>
            {
                entity.ToTable("TestTable", "dbo");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmpTSale31>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_t_Sale31", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");
            });

            modelBuilder.Entity<TmpTSaleD31>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_t_SaleD31", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");
            });

            modelBuilder.Entity<TmpTurnDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp_TurnDay", "sas");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Qty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<VDatabase>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.Dbname })
                    .HasName("_pk_v_Databases")
                    .IsClustered(false);

                entity.ToTable("v_Databases", "dbo");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DBName");

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.UseDb).HasColumnName("UseDB");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VDatabases)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_Databases_v_Reps");
            });

            modelBuilder.Entity<VDelIndexOptimize>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDelIndexOptimize", "dbo");

                entity.Property(e => e.DatabaseId).HasColumnName("Database_ID");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(128)
                    .HasColumnName("DBName");

                entity.Property(e => e.FilterDefinition).HasColumnName("Filter_Definition");

                entity.Property(e => e.IndexAdvantage).HasColumnName("index_advantage");

                entity.Property(e => e.IndexId).HasColumnName("Index_ID");

                entity.Property(e => e.IndexIsPk).HasColumnName("IndexIsPK");

                entity.Property(e => e.IndexName).HasMaxLength(128);

                entity.Property(e => e.IndexTypeDesc)
                    .HasMaxLength(60)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.LastSystemLookup)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_System_Lookup");

                entity.Property(e => e.LastSystemScan)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_System_Scan");

                entity.Property(e => e.LastSystemSeek)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_System_Seek");

                entity.Property(e => e.LastUserLookup)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_User_Lookup");

                entity.Property(e => e.LastUserScan)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_User_Scan");

                entity.Property(e => e.LastUserSeek)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_User_Seek");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName).HasMaxLength(128);

                entity.Property(e => e.ObjectType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.ObjectTypeDesc)
                    .HasMaxLength(60)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.SchemaName).HasMaxLength(128);

                entity.Property(e => e.SystemLookups).HasColumnName("SYSTEM_LOOKUPS");

                entity.Property(e => e.SystemScans).HasColumnName("SYSTEM_SCANS");

                entity.Property(e => e.SystemSeeks).HasColumnName("SYSTEM_SEEKS");

                entity.Property(e => e.SystemUpdates).HasColumnName("SYSTEM_UPDATES");

                entity.Property(e => e.UserLookups).HasColumnName("USER_LOOKUPS");

                entity.Property(e => e.UserScans).HasColumnName("USER_SCANS");

                entity.Property(e => e.UserSeeks).HasColumnName("USER_SEEKS");

                entity.Property(e => e.UserUpdates).HasColumnName("USER_UPDATES");
            });

            modelBuilder.Entity<VField>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.FieldName })
                    .HasName("_pk_v_Fields")
                    .IsClustered(false);

                entity.ToTable("v_Fields", "dbo");

                entity.HasIndex(e => e.Caption, "Caption")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FieldLevel, "FieldLevel")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FieldName, "FieldName")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Location, "Location")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SrcPosId, "PosID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RepId, "RepID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TableCode, "TableCode")
                    .HasFillFactor(90);

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Caption)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildNames)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Eexpr)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EExpr");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.GroupField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Lexpr)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LExpr");

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.ParentNames)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VFields)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_Fields_v_Reps");
            });

            modelBuilder.Entity<VFormula>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.FieldName, e.SourceId })
                    .HasName("_pk_v_Formulas")
                    .IsClustered(false);

                entity.ToTable("v_Formulas", "dbo");

                entity.HasIndex(e => e.RepId, "RepID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.SourceId, "SourceID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RepId, e.FieldName }, "v_Fieldsv_Formulas");

                entity.HasIndex(e => new { e.RepId, e.SourceId }, "v_Sourcesv_Formulas");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.Eexp)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("LExp");
            });

            modelBuilder.Entity<VGraph>(entity =>
            {
                entity.HasKey(e => e.GraphId)
                    .HasName("pk_v_Graphs")
                    .IsClustered(false);

                entity.ToTable("v_Graphs", "dbo");

                entity.HasIndex(e => new { e.RepId, e.GraphName }, "UniqueName")
                    .IsUnique();

                entity.Property(e => e.GraphId)
                    .ValueGeneratedNever()
                    .HasColumnName("GraphID");

                entity.Property(e => e.GraphDef)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.GraphName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VGraphs)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_Graphs_v_Reps");
            });

            modelBuilder.Entity<VJoin>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.SourceId, e.ParentCode, e.TableCode, e.JoinFields })
                    .HasName("_pk_v_Joins")
                    .IsClustered(false);

                entity.ToTable("v_Joins", "dbo");

                entity.HasIndex(e => new { e.RepId, e.SourceId }, "v_Sourcesv_Joins");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.JoinFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.VSource)
                    .WithMany(p => p.VJoins)
                    .HasForeignKey(d => new { d.RepId, d.SourceId })
                    .HasConstraintName("FK_v_Joins_v_Sources");
            });

            modelBuilder.Entity<VMapSg>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.SourceGrName, e.SourceId })
                    .HasName("_pk_v_MapSG")
                    .IsClustered(false);

                entity.ToTable("v_MapSG", "dbo");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.HasIndex(e => e.SourceId, "SourceID");

                entity.HasIndex(e => new { e.RepId, e.SourceGrName }, "v_SourceGrsv_MapSG");

                entity.HasIndex(e => new { e.RepId, e.SourceId }, "v_Sourcesv_MapSG");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.SourceGrName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.Efilter)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("EFilter");

                entity.Property(e => e.Ehaving)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("EHaving");

                entity.Property(e => e.Lfilter)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("LFilter");

                entity.Property(e => e.Lhaving)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("LHaving");

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.Sqlstr)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SQLStr");
            });

            modelBuilder.Entity<VNotify>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.NotifyName })
                    .HasName("pk_v_Notify")
                    .IsClustered(false);

                entity.ToTable("v_Notify", "dbo");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.NotifyName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NotifyText)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VNotifies)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_Notify_v_Reps");
            });

            modelBuilder.Entity<VParam>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.ParamName })
                    .HasName("_pk_v_Params")
                    .IsClustered(false);

                entity.ToTable("v_Params", "dbo");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.ParamName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Eexp)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VParams)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_Params_v_Reps");
            });

            modelBuilder.Entity<VRep>(entity =>
            {
                entity.HasKey(e => e.RepId)
                    .HasName("_pk_v_Reps")
                    .IsClustered(false);

                entity.ToTable("v_Reps", "dbo");

                entity.HasIndex(e => e.RepGrId, "RepGrID");

                entity.HasIndex(e => e.RepName, "RepName")
                    .IsUnique();

                entity.Property(e => e.RepId)
                    .ValueGeneratedNever()
                    .HasColumnName("RepID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Changed).HasColumnType("smalldatetime");

                entity.Property(e => e.Changer)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Created).HasColumnType("smalldatetime");

                entity.Property(e => e.Creator)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.PrintFontName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrintLandscape).HasDefaultValueSql("(0)");

                entity.Property(e => e.RepGrId).HasColumnName("RepGrID");

                entity.Property(e => e.RepInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepNotes).HasColumnType("text");

                entity.HasOne(d => d.RepGr)
                    .WithMany(p => p.VReps)
                    .HasForeignKey(d => d.RepGrId)
                    .HasConstraintName("FK_v_Reps_v_RepGrs");
            });

            modelBuilder.Entity<VRepGr>(entity =>
            {
                entity.HasKey(e => e.RepGrId)
                    .HasName("_pk_v_RepGrs")
                    .IsClustered(false);

                entity.ToTable("v_RepGrs", "dbo");

                entity.HasIndex(e => e.RepGrName, "RepGrName")
                    .IsUnique();

                entity.Property(e => e.RepGrId)
                    .ValueGeneratedNever()
                    .HasColumnName("RepGrID");

                entity.Property(e => e.RepGrName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VRepUser>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.UserId })
                    .HasName("_pk_v_RepUsers")
                    .IsClustered(false);

                entity.ToTable("v_RepUsers", "dbo");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Apdelete).HasColumnName("APDelete");

                entity.Property(e => e.Apedit).HasColumnName("APEdit");

                entity.Property(e => e.ApexportReport).HasColumnName("APExportReport");

                entity.Property(e => e.ApexportTemplate).HasColumnName("APExportTemplate");

                entity.Property(e => e.Apopen).HasColumnName("APOpen");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VRepUsers)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_RepUsers_v_Reps");
            });

            modelBuilder.Entity<VReplace>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.SourceGrName, e.SourceId, e.FieldName })
                    .HasName("_pk_v_Replace")
                    .IsClustered(false);

                entity.ToTable("v_Replace", "dbo");

                entity.HasIndex(e => e.FieldName, "FieldName");

                entity.HasIndex(e => e.SourceId, "SourceID");

                entity.HasIndex(e => new { e.RepId, e.FieldName }, "v_Fieldsv_Replace");

                entity.HasIndex(e => new { e.RepId, e.SourceGrName, e.SourceId }, "v_MapSGv_Replace");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.SourceGrName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Eexp)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.HasOne(d => d.VField)
                    .WithMany(p => p.VReplaces)
                    .HasForeignKey(d => new { d.RepId, d.FieldName })
                    .HasConstraintName("FK_v_Replace_v_Fields");
            });

            modelBuilder.Entity<VScript>(entity =>
            {
                entity.HasKey(e => e.RepId)
                    .HasName("pk_v_Scripts")
                    .IsClustered(false);

                entity.ToTable("v_Scripts", "dbo");

                entity.Property(e => e.RepId)
                    .ValueGeneratedNever()
                    .HasColumnName("RepID");

                entity.Property(e => e.ScAfterPrepare).HasColumnType("text");

                entity.Property(e => e.ScAfterSource).HasColumnType("text");

                entity.Property(e => e.ScBeforeLoad).HasColumnType("text");

                entity.Property(e => e.ScBeforeRun).HasColumnType("text");

                entity.Property(e => e.ScBeforeSource).HasColumnType("text");

                entity.HasOne(d => d.Rep)
                    .WithOne(p => p.VScript)
                    .HasForeignKey<VScript>(d => d.RepId)
                    .HasConstraintName("FK_v_Scripts_v_Reps");
            });

            modelBuilder.Entity<VSizeCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSizeCache", "dbo");

                entity.Property(e => e.Cache)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.CacheSizeMb).HasColumnName("Cache Size (MB)");

                entity.Property(e => e.PercentOfTotalQueries).HasColumnName("Percent of Total/Queries");
            });

            modelBuilder.Entity<VSource>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.SourceId })
                    .HasName("_pk_v_Sources")
                    .IsClustered(false);

                entity.ToTable("v_Sources", "dbo");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.HasIndex(e => new { e.RepId, e.SourceName }, "NoDuplicates");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.HasIndex(e => e.SourceId, "SourceID");

                entity.HasIndex(e => e.SourceName, "SourceName");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.SourceName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VSources)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_Sources_v_Reps");
            });

            modelBuilder.Entity<VSourceGr>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.SourceGrName })
                    .HasName("_pk_v_SourceGrs")
                    .IsClustered(false);

                entity.ToTable("v_SourceGrs", "dbo");

                entity.HasIndex(e => e.SrcPosId, "PosID");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.SourceGrName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VSourceGrs)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_SourceGrs_v_Reps");
            });

            modelBuilder.Entity<VTable>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.TableIdx })
                    .HasName("_pk_v_Tables")
                    .IsClustered(false);

                entity.ToTable("v_Tables", "dbo");

                entity.HasIndex(e => e.TableCode, "TableCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TableIdx, "TableIdx")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RepId, e.SourceId, e.RelName }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.RepId, e.SourceId }, "v_Sourcesv_Tables")
                    .HasFillFactor(90);

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.RelName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.HasOne(d => d.RelNameNavigation)
                    .WithMany(p => p.VTables)
                    .HasForeignKey(d => d.RelName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_v_Tables_z_Relations");
            });

            modelBuilder.Entity<VUfield>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RepId, e.FieldName })
                    .HasName("_pk_v_UFields")
                    .IsClustered(false);

                entity.ToTable("v_UFields", "dbo");

                entity.HasIndex(e => e.FieldName, "FieldName")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.Location, "Location");

                entity.HasIndex(e => e.SrcPosId, "PosID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.RepId, "RepID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Caption)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Eexpr)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EExpr");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.GroupField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Lexpr)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LExpr");

                entity.Property(e => e.Ofilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("OFilter");

                entity.Property(e => e.Pfilter)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("PFilter");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VUfields)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_UFields_v_Reps");
            });

            modelBuilder.Entity<VUgraph>(entity =>
            {
                entity.HasKey(e => e.GraphId)
                    .HasName("pk_v_UGraphs")
                    .IsClustered(false);

                entity.ToTable("v_UGraphs", "dbo");

                entity.HasIndex(e => new { e.RepId, e.UserId, e.GraphName }, "UniqueName")
                    .IsUnique();

                entity.Property(e => e.GraphId)
                    .ValueGeneratedNever()
                    .HasColumnName("GraphID");

                entity.Property(e => e.GraphDef)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.GraphName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VUgraphs)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_UGraphs_v_Reps");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.VUgraphs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_v_UGraphs_r_Users");
            });

            modelBuilder.Entity<VUnotify>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.UserId, e.NotifyName })
                    .HasName("pk_v_UNotify")
                    .IsClustered(false);

                entity.ToTable("v_UNotify", "dbo");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.NotifyName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NotifyText)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VUnotifies)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_UNotify_v_Reps");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.VUnotifies)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_v_UNotify_r_Users");
            });

            modelBuilder.Entity<VUparam>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.ParamName, e.UserId })
                    .HasName("_pk_v_UParams")
                    .IsClustered(false);

                entity.ToTable("v_UParams", "dbo");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.ParamName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Eexp)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VUparams)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_UParams_v_Reps");
            });

            modelBuilder.Entity<VUrep>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.UserId, e.VerId })
                    .HasName("pk_v_UReps")
                    .IsClustered(false);

                entity.ToTable("v_UReps", "dbo");

                entity.HasIndex(e => e.RepId, "RepID");

                entity.HasIndex(e => e.UserId, "UserID")
                    .HasFillFactor(90);

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.VerId)
                    .HasColumnName("VerID")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.AzPrepareTime)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DateField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.FixRows)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LastOpen)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.TotalTime)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VerDateTime).HasColumnType("smalldatetime");

                entity.Property(e => e.VerName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VUreps)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_UReps_v_Reps");
            });

            modelBuilder.Entity<VUscript>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.UserId })
                    .HasName("pk_v_UScripts")
                    .IsClustered(false);

                entity.ToTable("v_UScripts", "dbo");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ScAfterPrepare).HasColumnType("text");

                entity.Property(e => e.ScAfterSource).HasColumnType("text");

                entity.Property(e => e.ScBeforeLoad).HasColumnType("text");

                entity.Property(e => e.ScBeforeRun).HasColumnType("text");

                entity.Property(e => e.ScBeforeSource).HasColumnType("text");

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VUscripts)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_UScripts_v_Reps");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.VUscripts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_v_UScripts_r_Users");
            });

            modelBuilder.Entity<VUview>(entity =>
            {
                entity.HasKey(e => e.ViewId)
                    .HasName("pk_v_UViews")
                    .IsClustered(false);

                entity.ToTable("v_UViews", "dbo");

                entity.HasIndex(e => new { e.RepId, e.UserId, e.ViewName }, "UniqueName")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.ViewId)
                    .ValueGeneratedNever()
                    .HasColumnName("ViewID");

                entity.Property(e => e.FixRows)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ViewName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VUviews)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_UViews_v_Reps");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.VUviews)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_v_UViews_r_Users");
            });

            modelBuilder.Entity<VUviewField>(entity =>
            {
                entity.HasKey(e => new { e.ViewId, e.Caption })
                    .HasName("pk_v_UViewFields")
                    .IsClustered(false);

                entity.ToTable("v_UViewFields", "dbo");

                entity.Property(e => e.ViewId).HasColumnName("ViewID");

                entity.Property(e => e.Caption)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.HasOne(d => d.View)
                    .WithMany(p => p.VUviewFields)
                    .HasForeignKey(d => d.ViewId)
                    .HasConstraintName("FK_v_UViewFields_v_UViews");
            });

            modelBuilder.Entity<VValid>(entity =>
            {
                entity.HasKey(e => new { e.RepId, e.TableIdx, e.FieldName })
                    .HasName("pk_v_Valids")
                    .IsClustered(false);

                entity.ToTable("v_Valids", "dbo");

                entity.HasIndex(e => e.FieldName, "FieldName");

                entity.HasIndex(e => e.TableCode, "TableCode");

                entity.HasIndex(e => e.ValidFieldName, "ValidFieldName");

                entity.HasIndex(e => e.ValidTableCode, "ValidTableCode");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.ValidFieldName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VView>(entity =>
            {
                entity.HasKey(e => e.ViewId)
                    .HasName("pk_v_Views")
                    .IsClustered(false);

                entity.ToTable("v_Views", "dbo");

                entity.HasIndex(e => new { e.RepId, e.ViewName }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ViewId)
                    .ValueGeneratedNever()
                    .HasColumnName("ViewID");

                entity.Property(e => e.FixRows)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.ViewName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Rep)
                    .WithMany(p => p.VViews)
                    .HasForeignKey(d => d.RepId)
                    .HasConstraintName("FK_v_Views_v_Reps");
            });

            modelBuilder.Entity<VViewField>(entity =>
            {
                entity.HasKey(e => new { e.ViewId, e.Caption })
                    .HasName("pk_v_ViewFields")
                    .IsClustered(false);

                entity.ToTable("v_ViewFields", "dbo");

                entity.Property(e => e.ViewId).HasColumnName("ViewID");

                entity.Property(e => e.Caption)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.HasOne(d => d.View)
                    .WithMany(p => p.VViewFields)
                    .HasForeignKey(d => d.ViewId)
                    .HasConstraintName("FK_v_ViewFields_v_Views");
            });

            modelBuilder.Entity<VbBankExpAc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vb_BankExpAC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VbBankExpCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vb_BankExpCC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VbBankRecAc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vb_BankRecAC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VbBankRecCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vb_BankRecCC", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumCcNt)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcCompCor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_CompCor", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcCompCurr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_CompCurr", "dbo");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NewAccountAC");

                entity.Property(e => e.NewCurrId).HasColumnName("NewCurrID");

                entity.Property(e => e.NewCurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewKursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursCC");

                entity.Property(e => e.NewKursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursMC");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.NewSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("NewSumCC");

                entity.Property(e => e.NewSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("NewSumMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcCompExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_CompExp", "dbo");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcCompRec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_CompRec", "dbo");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcEmpCor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_EmpCor", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcEmpCurr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_EmpCurr", "dbo");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NewAccountAC");

                entity.Property(e => e.NewCurrId).HasColumnName("NewCurrID");

                entity.Property(e => e.NewCurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewKursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursCC");

                entity.Property(e => e.NewKursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewKursMC");

                entity.Property(e => e.NewSumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("NewSumAC");

                entity.Property(e => e.NewSumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("NewSumCC");

                entity.Property(e => e.NewSumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("NewSumMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcEmpExc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_EmpExc", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.NewEmpId).HasColumnName("NewEmpID");

                entity.Property(e => e.NewEmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcEmpExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_EmpExp", "dbo");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcEmpRec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_EmpRec", "dbo");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcEmpRep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_EmpRep", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcOurCor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_OurCor", "dbo");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcPlanExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_PlanExp", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<VcPlanRec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vc_PlanRec", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CodeName1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodeName5)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CompName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.CurrName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.StockName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("SumCC");

                entity.Property(e => e.SumMc)
                    .HasColumnType("numeric(38, 17)")
                    .HasColumnName("SumMC");
            });

            modelBuilder.Entity<Ven>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ven", "dbo");

                entity.Property(e => e.Chid).HasColumnName("chid");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Docdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("docdate");

                entity.Property(e => e.Newqty).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Prodid).HasColumnName("prodid");

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("qty");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Tnewqty)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TNewqty");

                entity.Property(e => e.Tqty).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<VvTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vv_Tables", "dbo");

                entity.Property(e => e.ChildDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildNames)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNames)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RelName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.TableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VvValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vv_Valids", "dbo");

                entity.Property(e => e.FieldDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepId).HasColumnName("RepID");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.TableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValidFieldDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValidFieldName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValidTableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValidTableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzAppDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_AppDocs", "dbo");

                entity.Property(e => e.AppName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BalanceFesign).HasColumnName("BalanceFESign");

                entity.Property(e => e.CodeField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FormClass)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkEexp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LinkEExp");

                entity.Property(e => e.LinkLexp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LinkLExp");

                entity.Property(e => e.NameField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SyncFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzDataset>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_Datasets", "dbo");

                entity.Property(e => e.AfcodeWidth).HasColumnName("AFCodeWidth");

                entity.Property(e => e.AfcolCount).HasColumnName("AFColCount");

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Dscode).HasColumnName("DSCode");

                entity.Property(e => e.Dslevel).HasColumnName("DSLevel");

                entity.Property(e => e.Dsname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DSName");

                entity.Property(e => e.IntFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IntName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MasterFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MasterSource)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OpenFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SortFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sqlstr)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SQLStr");

                entity.Property(e => e.Sqltype).HasColumnName("SQLType");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzDatasetField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_DatasetFields", "dbo");

                entity.Property(e => e.AutoNewValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CustomConstraint)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayFormat)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Dscode).HasColumnName("DSCode");

                entity.Property(e => e.Dsname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DSName");

                entity.Property(e => e.EditFormat)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EditMask)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.LookupKey)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSource)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSourceKey)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSourceResult)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MaxValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MinValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PickList)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Sqltype).HasColumnName("SQLType");

                entity.Property(e => e.SqltypeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SQLTypeName");

                entity.Property(e => e.TableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_Fields", "dbo");

                entity.Property(e => e.Dbdefault)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DBDefault");

                entity.Property(e => e.FieldDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.Sqltype).HasColumnName("SQLType");

                entity.Property(e => e.SqltypeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SQLTypeName");

                entity.Property(e => e.TableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzNow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_Now", "dbo");

                entity.Property(e => e.Now).HasColumnType("datetime");
            });

            modelBuilder.Entity<VzRelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_Relations", "dbo");

                entity.Property(e => e.ChildDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildDescs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildNames)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDescs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNames)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RelName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_Tables", "dbo");

                entity.Property(e => e.CodeField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FormClass)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IntFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NameField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OpenFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pkfields)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PKFields");

                entity.Property(e => e.SortFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SyncAufields).HasColumnName("SyncAUFields");

                entity.Property(e => e.SyncFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzTool>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_Tools", "dbo");

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FormClass)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzToolApp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_ToolApps", "dbo");

                entity.Property(e => e.FormClass)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ShortCut)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceAppName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzToolDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_ToolDocs", "dbo");

                entity.Property(e => e.FormClass)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ShortCut)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceDocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VzValidTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vz_ValidTables", "dbo");

                entity.Property(e => e.ChildDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildDescs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildNames)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDescs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNames)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RelName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZAccDef>(entity =>
            {
                entity.HasKey(e => e.AccDefCode)
                    .HasName("pk_z_AccDefs");

                entity.ToTable("z_AccDefs", "dbo");

                entity.HasIndex(e => e.AccDefName, "AccDefName")
                    .IsUnique();

                entity.Property(e => e.AccDefCode).ValueGeneratedNever();

                entity.Property(e => e.AccDefDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccDefName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZAccDefDoc>(entity =>
            {
                entity.HasKey(e => new { e.AccDefCode, e.DocCode })
                    .HasName("pk_z_AccDefDocs")
                    .IsClustered(false);

                entity.ToTable("z_AccDefDocs", "dbo");

                entity.HasOne(d => d.AccDefCodeNavigation)
                    .WithMany(p => p.ZAccDefDocs)
                    .HasForeignKey(d => d.AccDefCode)
                    .HasConstraintName("FK_z_AccDefDocs_z_AccDefs");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZAccDefDocs)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_AccDefDocs_z_Docs");
            });

            modelBuilder.Entity<ZAccDefObject>(entity =>
            {
                entity.HasKey(e => new { e.AccDefCode, e.ObjCode })
                    .HasName("pk_z_AccDefObjects")
                    .IsClustered(false);

                entity.ToTable("z_AccDefObjects", "dbo");

                entity.HasOne(d => d.AccDefCodeNavigation)
                    .WithMany(p => p.ZAccDefObjects)
                    .HasForeignKey(d => d.AccDefCode)
                    .HasConstraintName("FK_z_AccDefObjects_z_AccDefs");

                entity.HasOne(d => d.ObjCodeNavigation)
                    .WithMany(p => p.ZAccDefObjects)
                    .HasForeignKey(d => d.ObjCode)
                    .HasConstraintName("FK_z_AccDefObjects_z_Objects");
            });

            modelBuilder.Entity<ZAccDefTable>(entity =>
            {
                entity.HasKey(e => new { e.AccDefCode, e.TableCode })
                    .HasName("pk_z_AccDefTables")
                    .IsClustered(false);

                entity.ToTable("z_AccDefTables", "dbo");

                entity.HasOne(d => d.AccDefCodeNavigation)
                    .WithMany(p => p.ZAccDefTables)
                    .HasForeignKey(d => d.AccDefCode)
                    .HasConstraintName("FK_z_AccDefTables_z_AccDefs");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZAccDefTables)
                    .HasForeignKey(d => d.TableCode)
                    .HasConstraintName("FK_z_AccDefTables_z_Tables");
            });

            modelBuilder.Entity<ZAgentScript>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_z_AgentScripts");

                entity.ToTable("z_AgentScripts", "dbo");

                entity.HasIndex(e => e.ScriptName, "ScriptName")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.ExecStr).IsUnicode(false);

                entity.Property(e => e.LastRun).HasColumnType("datetime");

                entity.Property(e => e.Msg)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Shed)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZApp>(entity =>
            {
                entity.HasKey(e => e.AppCode)
                    .HasName("pk_z_Apps")
                    .IsClustered(false);

                entity.ToTable("z_Apps", "dbo");

                entity.HasIndex(e => e.AppName, "AppName")
                    .IsUnique();

                entity.Property(e => e.AppCode).ValueGeneratedNever();

                entity.Property(e => e.AppInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AppName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZAppDoc>(entity =>
            {
                entity.HasKey(e => new { e.AppCode, e.DocCode })
                    .HasName("pk_z_AppDocs")
                    .IsClustered(false);

                entity.ToTable("z_AppDocs", "dbo");

                entity.HasOne(d => d.AppCodeNavigation)
                    .WithMany(p => p.ZAppDocs)
                    .HasForeignKey(d => d.AppCode)
                    .HasConstraintName("FK_z_AppDocs_z_Apps");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZAppDocs)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_AppDocs_z_Docs");
            });

            modelBuilder.Entity<ZAppPrint>(entity =>
            {
                entity.HasKey(e => new { e.AppCode, e.FileName })
                    .HasName("pk_z_AppPrints")
                    .IsClustered(false);

                entity.ToTable("z_AppPrints", "dbo");

                entity.HasIndex(e => e.AppCode, "AppCode");

                entity.HasIndex(e => e.FileName, "FileName");

                entity.HasIndex(e => new { e.AppCode, e.FileDesc }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FileDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.AppCodeNavigation)
                    .WithMany(p => p.ZAppPrints)
                    .HasForeignKey(d => d.AppCode)
                    .HasConstraintName("FK_z_AppPrints_z_Apps");
            });

            modelBuilder.Entity<ZAppRole>(entity =>
            {
                entity.HasKey(e => new { e.AppCode, e.RoleCode })
                    .HasName("pk_z_AppRoles")
                    .IsClustered(false);

                entity.ToTable("z_AppRoles", "dbo");

                entity.HasOne(d => d.AppCodeNavigation)
                    .WithMany(p => p.ZAppRoles)
                    .HasForeignKey(d => d.AppCode)
                    .HasConstraintName("FK_z_AppRoles_z_Apps");

                entity.HasOne(d => d.RoleCodeNavigation)
                    .WithMany(p => p.ZAppRoles)
                    .HasForeignKey(d => d.RoleCode)
                    .HasConstraintName("FK_z_AppRoles_z_Roles");
            });

            modelBuilder.Entity<ZAppUser>(entity =>
            {
                entity.HasKey(e => new { e.AppCode, e.UserCode })
                    .HasName("pk_z_AppUsers")
                    .IsClustered(false);

                entity.ToTable("z_AppUsers", "dbo");

                entity.HasOne(d => d.AppCodeNavigation)
                    .WithMany(p => p.ZAppUsers)
                    .HasForeignKey(d => d.AppCode)
                    .HasConstraintName("FK_z_AppUsers_z_Apps");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZAppUsers)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_AppUsers_r_Users");
            });

            modelBuilder.Entity<ZAufield>(entity =>
            {
                entity.HasKey(e => new { e.Auid, e.AufieldName })
                    .IsClustered(false);

                entity.ToTable("z_AUFields", "dbo");

                entity.HasIndex(e => new { e.Auid, e.SrcPosId }, "AUIDSrcPosID")
                    .IsUnique();

                entity.HasIndex(e => e.SrcPosId, "SrcPosID");

                entity.Property(e => e.Auid).HasColumnName("AUID");

                entity.Property(e => e.AufieldName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AUFieldName");

                entity.Property(e => e.AufieldDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AUFieldDesc");

                entity.Property(e => e.Eexp)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.HasOne(d => d.Au)
                    .WithMany(p => p.ZAufields)
                    .HasForeignKey(d => d.Auid)
                    .HasConstraintName("FK_z_AUFields_z_AutoUpdate");
            });

            modelBuilder.Entity<ZAugroup>(entity =>
            {
                entity.HasKey(e => e.AugroupCode)
                    .IsClustered(false);

                entity.ToTable("z_AUGroups", "dbo");

                entity.HasIndex(e => e.AugroupName, "UniqueName")
                    .IsUnique();

                entity.Property(e => e.AugroupCode)
                    .ValueGeneratedNever()
                    .HasColumnName("AUGroupCode");

                entity.Property(e => e.AugroupName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AUGroupName");

                entity.Property(e => e.FilterSpname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FilterSPName");

                entity.Property(e => e.FilterTableDbo).HasColumnName("FilterTableDBO");

                entity.Property(e => e.GroupFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Spname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPName");

                entity.Property(e => e.Sptype).HasColumnName("SPType");

                entity.Property(e => e.TableDbo).HasColumnName("TableDBO");
            });

            modelBuilder.Entity<ZAutable>(entity =>
            {
                entity.HasKey(e => new { e.Auid, e.CtableCode })
                    .IsClustered(false);

                entity.ToTable("z_AUTables", "dbo");

                entity.HasIndex(e => e.Auid, "AUID");

                entity.Property(e => e.Auid).HasColumnName("AUID");

                entity.Property(e => e.CtableCode).HasColumnName("CTableCode");

                entity.Property(e => e.CfieldDescs)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CFieldDescs");

                entity.Property(e => e.CfieldNames)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CFieldNames");

                entity.Property(e => e.Efilter)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("EFilter");

                entity.Property(e => e.Lfilter)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("LFilter");

                entity.Property(e => e.PfieldDescs)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PFieldDescs");

                entity.Property(e => e.PfieldNames)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PFieldNames");

                entity.Property(e => e.PtableCode).HasColumnName("PTableCode");

                entity.HasOne(d => d.Au)
                    .WithMany(p => p.ZAutables)
                    .HasForeignKey(d => d.Auid)
                    .HasConstraintName("FK_z_AUTables_z_AutoUpdate");
            });

            modelBuilder.Entity<ZAutoUpdate>(entity =>
            {
                entity.HasKey(e => e.Auid)
                    .IsClustered(false);

                entity.ToTable("z_AutoUpdate", "dbo");

                entity.HasIndex(e => e.AutableCode, "AUTableCode");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.HasIndex(e => e.TableCode, "TableCode");

                entity.HasIndex(e => new { e.DocCode, e.TableCode, e.Auname }, "UniqueName")
                    .IsUnique();

                entity.Property(e => e.Auid)
                    .ValueGeneratedNever()
                    .HasColumnName("AUID");

                entity.Property(e => e.AugroupCode).HasColumnName("AUGroupCode");

                entity.Property(e => e.Auname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AUName");

                entity.Property(e => e.Auoperation).HasColumnName("AUOperation");

                entity.Property(e => e.AutableCode).HasColumnName("AUTableCode");

                entity.HasOne(d => d.AugroupCodeNavigation)
                    .WithMany(p => p.ZAutoUpdates)
                    .HasForeignKey(d => d.AugroupCode)
                    .HasConstraintName("FK_z_AutoUpdate_z_AUGroups");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZAutoUpdates)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_AutoUpdate_z_Docs");
            });

            modelBuilder.Entity<ZBarMask>(entity =>
            {
                entity.HasKey(e => e.SrcPosId)
                    .HasName("_pk_z_BarMask")
                    .IsClustered(false);

                entity.ToTable("z_BarMask", "dbo");

                entity.Property(e => e.SrcPosId)
                    .ValueGeneratedNever()
                    .HasColumnName("SrcPosID");

                entity.Property(e => e.BarExpE)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BarExpValue)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZContract>(entity =>
            {
                entity.HasKey(e => new { e.DocId, e.OurId })
                    .HasName("_pk_z_Contracts");

                entity.ToTable("z_Contracts", "dbo");

                entity.HasIndex(e => e.ChId, "ChID")
                    .IsUnique();

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.CompAccountAc, "CompAccountAC");

                entity.HasIndex(e => e.CompAccountCc, "CompAccountCC");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.CurrId, "CurrID");

                entity.HasIndex(e => e.DocDate, "DocDate");

                entity.HasIndex(e => e.DocId, "DocID");

                entity.HasIndex(e => e.EmpId, "EmpID");

                entity.HasIndex(e => e.IntDocId, "IntDocID");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.AccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountAC");

                entity.Property(e => e.AccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AccountCC");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompAccountAc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountAC");

                entity.Property(e => e.CompAccountCc)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompAccountCC");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.File1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.File3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SrcDocID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");
            });

            modelBuilder.Entity<ZDataSet>(entity =>
            {
                entity.HasKey(e => e.Dscode)
                    .HasName("pk_z_DataSets")
                    .IsClustered(false);

                entity.ToTable("z_DataSets", "dbo");

                entity.HasIndex(e => e.Dsname, "DSName")
                    .IsUnique();

                entity.HasIndex(e => new { e.DocCode, e.PageIndex, e.UserCode }, "UniquePageIndex")
                    .IsUnique();

                entity.HasIndex(e => new { e.DocCode, e.PageName, e.UserCode }, "UniquePageName")
                    .IsUnique();

                entity.Property(e => e.Dscode)
                    .ValueGeneratedNever()
                    .HasColumnName("DSCode");

                entity.Property(e => e.AfcodeWidth).HasColumnName("AFCodeWidth");

                entity.Property(e => e.AfcolCount).HasColumnName("AFColCount");

                entity.Property(e => e.Dslevel).HasColumnName("DSLevel");

                entity.Property(e => e.Dsname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DSName");

                entity.Property(e => e.IntFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IntName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MasterFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MasterSource)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OpenFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PageVisible)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.SortFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sqlstr)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SQLStr");

                entity.Property(e => e.Sqltype).HasColumnName("SQLType");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZDataSets)
                    .HasForeignKey(d => d.TableCode)
                    .HasConstraintName("FK_z_DataSets_z_Tables");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZDataSets)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_DataSets_r_Users");
            });

            modelBuilder.Entity<ZDatasetField>(entity =>
            {
                entity.HasKey(e => new { e.Dscode, e.FieldName })
                    .HasName("pk_z_DatasetFields")
                    .IsClustered(false);

                entity.ToTable("z_DatasetFields", "dbo");

                entity.HasIndex(e => e.FieldPosId, "FieldPosID")
                    .HasFillFactor(90);

                entity.Property(e => e.Dscode).HasColumnName("DSCode");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AutoNewValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CustomConstraint)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DataSize).HasDefaultValueSql("(0)");

                entity.Property(e => e.DisplayFormat)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EditFormat)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EditMask)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.LookupKey)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSource)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSourceKey)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSourceResult)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MaxValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MinValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PickList)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Visible)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.FieldNameNavigation)
                    .WithMany(p => p.ZDatasetFields)
                    .HasForeignKey(d => d.FieldName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_DatasetFields_z_FieldsRep");
            });

            modelBuilder.Entity<ZDatasetLink>(entity =>
            {
                entity.HasKey(e => new { e.Dscode, e.LinkDscode })
                    .HasName("pk_z_DatasetLinks")
                    .IsClustered(false);

                entity.ToTable("z_DatasetLinks", "dbo");

                entity.Property(e => e.Dscode).HasColumnName("DSCode");

                entity.Property(e => e.LinkDscode).HasColumnName("LinkDSCode");
            });

            modelBuilder.Entity<ZDdlevent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_DDLEvents", "dbo");

                entity.Property(e => e.DatabaseName).HasMaxLength(250);

                entity.Property(e => e.EventDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EventDdl).HasColumnName("EventDDL");

                entity.Property(e => e.EventType).HasMaxLength(64);

                entity.Property(e => e.EventXml)
                    .HasColumnType("xml")
                    .HasColumnName("EventXML");

                entity.Property(e => e.HostName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.LoginName).HasMaxLength(250);

                entity.Property(e => e.ObjectName).HasMaxLength(250);

                entity.Property(e => e.ProgramName).HasMaxLength(250);

                entity.Property(e => e.SchemaName).HasMaxLength(250);
            });

            modelBuilder.Entity<ZDoc>(entity =>
            {
                entity.HasKey(e => e.DocCode)
                    .HasName("pk_z_Docs")
                    .IsClustered(false);

                entity.ToTable("z_Docs", "dbo");

                entity.HasIndex(e => e.CodeField, "CodeField");

                entity.HasIndex(e => e.DocCatCode, "DocCatCode");

                entity.HasIndex(e => e.DocGrpCode, "DocGrpCode");

                entity.HasIndex(e => e.DocName, "DocName")
                    .IsUnique();

                entity.HasIndex(e => e.NameField, "NameField");

                entity.HasIndex(e => e.SyncCode, "SyncCode");

                entity.Property(e => e.DocCode).ValueGeneratedNever();

                entity.Property(e => e.BalanceFesign).HasColumnName("BalanceFESign");

                entity.Property(e => e.CodeField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FormClass)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LinkEexp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LinkEExp");

                entity.Property(e => e.LinkLexp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LinkLExp");

                entity.Property(e => e.NameField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SyncFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocCatCodeNavigation)
                    .WithMany(p => p.ZDocs)
                    .HasForeignKey(d => d.DocCatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_Docs_z_DocCats");

                entity.HasOne(d => d.DocGrpCodeNavigation)
                    .WithMany(p => p.ZDocs)
                    .HasForeignKey(d => d.DocGrpCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_Docs_z_DocGrps");
            });

            modelBuilder.Entity<ZDocCat>(entity =>
            {
                entity.HasKey(e => e.DocCatCode)
                    .HasName("pk_z_DocCats")
                    .IsClustered(false);

                entity.ToTable("z_DocCats", "dbo");

                entity.HasIndex(e => e.DocCatName, "DocCatName")
                    .IsUnique();

                entity.Property(e => e.DocCatCode).ValueGeneratedNever();

                entity.Property(e => e.DocCatInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocCatName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZDocDc>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.ChId, e.DcardChId })
                    .HasName("pk_z_DocDC");

                entity.ToTable("z_DocDC", "dbo");

                entity.HasIndex(e => e.DcardChId, "IX_DCardChID")
                    .HasFillFactor(100);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.ZDocDcs)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_DocDC_r_DCards");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZDocDcs)
                    .HasForeignKey(d => d.DocCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_DocDC_z_Docs");
            });

            modelBuilder.Entity<ZDocDcrazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_DocDCRazn_06_31", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");
            });

            modelBuilder.Entity<ZDocDcshadow>(entity =>
            {
                entity.HasKey(e => new { e.ChId, e.DcardChId, e.DocCode })
                    .HasName("pk_z_DocDCShadow")
                    .IsClustered(false);

                entity.ToTable("z_DocDCShadow", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");
            });

            modelBuilder.Entity<ZDocForm>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.FormDesc })
                    .HasName("pk_z_DocForms")
                    .IsClustered(false);

                entity.ToTable("z_DocForms", "dbo");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.HasIndex(e => e.FileName, "FileName");

                entity.HasIndex(e => e.FormDesc, "FormDesc");

                entity.HasIndex(e => e.FormName, "FormName");

                entity.Property(e => e.FormDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IsDefault).HasDefaultValueSql("(0)");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZDocForms)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_DocForms_z_Docs");
            });

            modelBuilder.Entity<ZDocGrp>(entity =>
            {
                entity.HasKey(e => e.DocGrpCode)
                    .HasName("pk_z_DocGrps")
                    .IsClustered(false);

                entity.ToTable("z_DocGrps", "dbo");

                entity.HasIndex(e => e.DocGrpName, "DocGrpName")
                    .IsUnique();

                entity.Property(e => e.DocGrpCode).ValueGeneratedNever();

                entity.Property(e => e.DocGrpInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DocGrpName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZDocLink>(entity =>
            {
                entity.HasKey(e => e.LinkId)
                    .HasName("pk_z_DocLinks");

                entity.ToTable("z_DocLinks", "dbo");

                entity.HasIndex(e => e.DocLinkTypeId, "DocLinkTypeID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocLinkTypeId, e.ParentDocCode, e.ParentChId }, "DocLinkTypeParents");

                entity.HasIndex(e => new { e.ParentDocCode, e.ChildDocCode }, "IX_ParentDocCode_ChildDocCode_Includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ParentDocCode, e.ChildDocCode, e.ParentDocDate }, "NCI_z_DocLinks_ParentDocCode_ChildDocCode_ParentDocDate_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ParentDocCode, e.ParentChId, e.ChildDocCode, e.ChildChId }, "UniqueParent")
                    .IsUnique();

                entity.HasIndex(e => e.LinkDocDate2, "ix9_z_DocLinks_LinkDocDate2_crc")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.ChildChId, "ix_z_DocLinks_ChildChID_includes");

                entity.HasIndex(e => new { e.ParentDocCode, e.ChildDocCode }, "ix_z_DocLinks_ParentDocCode_ChildDocCode_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ChildDocCode, e.ChildChId }, "missing_index_26_25");

                entity.HasIndex(e => e.ChildDocCode, "missing_index_28_27");

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.ChildChId).HasColumnName("ChildChID");

                entity.Property(e => e.ChildDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChildDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChildDocID");

                entity.Property(e => e.Crc2)
                    .HasColumnName("CRC2")
                    .HasComputedColumnSql("(checksum([LinkDocDate],[ParentDocCode],[ParentChID],[ChildDocCode],[ChildChID],[LinkSumCC],[DocLinkTypeID]))", false);

                entity.Property(e => e.DocLinkTypeId).HasColumnName("DocLinkTypeID");

                entity.Property(e => e.LinkDocDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LinkDocDate2)
                    .HasColumnType("date")
                    .HasComputedColumnSql("(CONVERT([date],[LinkDocDate],(0)))", true);

                entity.Property(e => e.LinkSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LinkSumCC");

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.ParentDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ParentDocId).HasColumnName("ParentDocID");
            });

            modelBuilder.Entity<ZDocLinkType>(entity =>
            {
                entity.HasKey(e => e.DocLinkTypeId)
                    .HasName("pk_z_DocLinkTypes")
                    .IsClustered(false);

                entity.ToTable("z_DocLinkTypes", "dbo");

                entity.HasIndex(e => e.DocLinkTypeName, "DocLinkTypeName")
                    .IsUnique();

                entity.Property(e => e.DocLinkTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("DocLinkTypeID");

                entity.Property(e => e.DocLinkTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZDocLinks101>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_DocLinks101", "dbo");

                entity.HasIndex(e => e.LinkId, "CI_z_DocLinks101_LinkID")
                    .IsClustered()
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ParentChId, e.ParentDocDate, e.ChildDocCode, e.ChildChId }, "NC_z_DocLinks101_ParentDocCode_ChildDocCode_ParentChID_ChildChID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.LinkDocDate2, "ix9_z_DocLinks101_LinkDocDate_crc")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.LinkId, "pk_z_DocLinks101")
                    .IsUnique()
                    .HasFillFactor(100);

                entity.Property(e => e.ChildChId).HasColumnName("ChildChID");

                entity.Property(e => e.ChildDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChildDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChildDocID");

                entity.Property(e => e.Crc2)
                    .HasColumnName("CRC2")
                    .HasComputedColumnSql("(checksum([LinkDocDate],[ParentDocCode],[ParentChID],[ChildDocCode],[ChildChID],[LinkSumCC],[DocLinkTypeID]))", true);

                entity.Property(e => e.DocLinkTypeId).HasColumnName("DocLinkTypeID");

                entity.Property(e => e.LinkDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LinkDocDate2)
                    .HasColumnType("date")
                    .HasComputedColumnSql("(CONVERT([date],[LinkDocDate],(0)))", true);

                entity.Property(e => e.LinkId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LinkID");

                entity.Property(e => e.LinkSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LinkSumCC");

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.ParentDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ParentDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ParentDocID");
            });

            modelBuilder.Entity<ZDocLinksTax>(entity =>
            {
                entity.HasKey(e => e.LinkId)
                    .HasName("pk_z_DocLinks_Tax")
                    .IsClustered(false);

                entity.ToTable("z_DocLinks_Tax", "dbo");

                entity.Property(e => e.LinkId)
                    .ValueGeneratedNever()
                    .HasColumnName("LinkID");

                entity.Property(e => e.SumCcNt0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_0");

                entity.Property(e => e.SumCcNt20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_20");

                entity.Property(e => e.SumCcNtFree)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_Free");

                entity.Property(e => e.SumCcNtNo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC_nt_No");

                entity.Property(e => e.TaxSum0)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_0");

                entity.Property(e => e.TaxSum20)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_20");

                entity.Property(e => e.TaxSumFree)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_Free");

                entity.Property(e => e.TaxSumNo)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("TaxSum_No");
            });

            modelBuilder.Entity<ZDocLinksTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_DocLinks_temp", "dbo");

                entity.Property(e => e.ChildChId).HasColumnName("ChildChID");

                entity.Property(e => e.ChildDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ChildDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChildDocID");

                entity.Property(e => e.Crc2)
                    .HasColumnName("CRC2")
                    .HasComputedColumnSql("(checksum([LinkDocDate],[ParentDocCode],[ParentChID],[ChildDocCode],[ChildChID],[LinkSumCC],[DocLinkTypeID]))", true);

                entity.Property(e => e.DocLinkTypeId).HasColumnName("DocLinkTypeID");

                entity.Property(e => e.LinkDocDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LinkDocDate2)
                    .HasColumnType("date")
                    .HasComputedColumnSql("(CONVERT([date],[LinkDocDate],(0)))", true);

                entity.Property(e => e.LinkId).HasColumnName("LinkID");

                entity.Property(e => e.LinkSumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("LinkSumCC");

                entity.Property(e => e.ParentChId).HasColumnName("ParentChID");

                entity.Property(e => e.ParentDocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ParentDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ParentDocID");
            });

            modelBuilder.Entity<ZDocPrint>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.FileName })
                    .HasName("pk_z_DocPrints")
                    .IsClustered(false);

                entity.ToTable("z_DocPrints", "dbo");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.HasIndex(e => e.FileName, "FileName");

                entity.HasIndex(e => new { e.DocCode, e.FileDesc }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FileDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZDocPrints)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_DocPrints_z_Docs");
            });

            modelBuilder.Entity<ZDocRole>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.RoleCode })
                    .HasName("pk_z_DocRoles")
                    .IsClustered(false);

                entity.ToTable("z_DocRoles", "dbo");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZDocRoles)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_DocRoles_z_Docs");

                entity.HasOne(d => d.RoleCodeNavigation)
                    .WithMany(p => p.ZDocRoles)
                    .HasForeignKey(d => d.RoleCode)
                    .HasConstraintName("FK_z_DocRoles_z_Roles");
            });

            modelBuilder.Entity<ZDocShed>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.ChId, e.SrcPosId })
                    .HasName("pk_z_DocShed")
                    .IsClustered(false);

                entity.ToTable("z_DocShed", "dbo");

                entity.HasIndex(e => new { e.DocCode, e.ChId }, "DocCodeChID");

                entity.HasIndex(e => new { e.DocCode, e.ChId, e.PlanDate }, "DocCodeChIDPlanDate");

                entity.HasIndex(e => new { e.DocCode, e.ChId, e.StateCode }, "DocCodeChIDStateCode");

                entity.HasIndex(e => new { e.DocCode, e.ChId, e.StateCodeFrom }, "DocCodeChIDStateCodeFrom");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.FactDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PlanDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");

                entity.Property(e => e.SumCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumCC");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZDocSheds)
                    .HasForeignKey(d => d.DocCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_DocShed_z_Docs");
            });

            modelBuilder.Entity<ZDocUser>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.UserCode })
                    .HasName("pk_z_DocUsers")
                    .IsClustered(false);

                entity.ToTable("z_DocUsers", "dbo");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZDocUsers)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_DocUsers_z_Docs");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZDocUsers)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_DocUsers_r_Users");
            });

            modelBuilder.Entity<ZField>(entity =>
            {
                entity.HasKey(e => new { e.TableCode, e.FieldName })
                    .HasName("pk_z_Fields")
                    .IsClustered(false);

                entity.ToTable("z_Fields", "dbo");

                entity.HasIndex(e => e.FieldName, "FieldName")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.TableCode, "TableCode")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.TableCode, e.FieldPosId }, "UniqueIndex")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Dbdefault)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DBDefault");

                entity.Property(e => e.FieldInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.HasOne(d => d.FieldNameNavigation)
                    .WithMany(p => p.ZFields)
                    .HasForeignKey(d => d.FieldName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_Fields_z_FieldsRep");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZFields)
                    .HasForeignKey(d => d.TableCode)
                    .HasConstraintName("FK_z_Fields_z_Tables");
            });

            modelBuilder.Entity<ZFieldsRep>(entity =>
            {
                entity.HasKey(e => e.FieldName)
                    .HasName("pk_z_FieldsRep")
                    .IsClustered(false);

                entity.ToTable("z_FieldsRep", "dbo");

                entity.HasIndex(e => e.DataType, "DataType");

                entity.HasIndex(e => e.FieldDesc, "FieldDesc")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FieldId, "FieldID")
                    .IsUnique();

                entity.HasIndex(e => e.FieldsRepGrpCode, "FieldsRepGrpCode");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AutoNewValue)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.CustomConstraint)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Dbdefault)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DBDefault");

                entity.Property(e => e.DisplayFormat)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EditFormat)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EditMask)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldId).HasColumnName("FieldID");

                entity.Property(e => e.FieldInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldNick)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupKey)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSource)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSourceKey)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LookupSourceResult)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MaxValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.MinValue).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.PickList)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Sqlprec)
                    .HasColumnName("SQLPrec")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sqlscale)
                    .HasColumnName("SQLScale")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sqltype).HasColumnName("SQLType");

                entity.Property(e => e.Visible)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Width).HasDefaultValueSql("(50)");

                entity.HasOne(d => d.FieldsRepGrpCodeNavigation)
                    .WithMany(p => p.ZFieldsReps)
                    .HasForeignKey(d => d.FieldsRepGrpCode)
                    .HasConstraintName("FK_z_FieldsRep_z_FieldsRepGrps");
            });

            modelBuilder.Entity<ZFieldsRepGrp>(entity =>
            {
                entity.HasKey(e => e.FieldsRepGrpCode)
                    .HasName("pk_z_FieldsRepGrps")
                    .IsClustered(false);

                entity.ToTable("z_FieldsRepGrps", "dbo");

                entity.HasIndex(e => e.FieldsRepGrpName, "FieldsRepGrpName")
                    .IsUnique();

                entity.Property(e => e.FieldsRepGrpCode).ValueGeneratedNever();

                entity.Property(e => e.FieldsRepGrpInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldsRepGrpName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZFile>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("pk_z_Files")
                    .IsClustered(false);

                entity.ToTable("z_Files", "dbo");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.Property(e => e.FileId)
                    .ValueGeneratedNever()
                    .HasColumnName("FileID");

                entity.Property(e => e.ExtFileId).HasColumnName("ExtFileID");

                entity.Property(e => e.FileData)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.FileDate).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZFrudf>(entity =>
            {
                entity.HasKey(e => e.OperName)
                    .HasName("_pk_z_FRUDFs")
                    .IsClustered(false);

                entity.ToTable("z_FRUDFs", "dbo");

                entity.HasIndex(e => e.Eformula, "EFormula");

                entity.HasIndex(e => e.Eformula1, "EFormula1");

                entity.HasIndex(e => e.Eformula2, "EFormula2");

                entity.HasIndex(e => e.Rformula, "RFormula");

                entity.HasIndex(e => e.Rformula1, "RFormula1");

                entity.HasIndex(e => e.Rformula2, "RFormula2");

                entity.Property(e => e.OperName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ArgDesc1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ArgDesc2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ArgDesc3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Eformula)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EFormula");

                entity.Property(e => e.Eformula1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EFormula1");

                entity.Property(e => e.Eformula2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EFormula2");

                entity.Property(e => e.OperDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RevId).HasColumnName("RevID");

                entity.Property(e => e.Rformula)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RFormula");

                entity.Property(e => e.Rformula1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RFormula1");

                entity.Property(e => e.Rformula2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RFormula2");
            });

            modelBuilder.Entity<ZFrudfr>(entity =>
            {
                entity.HasKey(e => e.Udfid)
                    .HasName("_pk_z_FRUDFR")
                    .IsClustered(false);

                entity.ToTable("z_FRUDFR", "dbo");

                entity.HasIndex(e => e.Udfdesc, "UDFDesc");

                entity.HasIndex(e => e.Udfname, "UDFName")
                    .IsUnique();

                entity.Property(e => e.Udfid)
                    .ValueGeneratedNever()
                    .HasColumnName("UDFID");

                entity.Property(e => e.RevId).HasColumnName("RevID");

                entity.Property(e => e.Udfdesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UDFDesc");

                entity.Property(e => e.Udfname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UDFName");
            });

            modelBuilder.Entity<ZFrudfrd>(entity =>
            {
                entity.HasKey(e => new { e.Udfid, e.Bdate })
                    .HasName("_pk_z_FRUDFRD")
                    .IsClustered(false);

                entity.ToTable("z_FRUDFRD", "dbo");

                entity.HasIndex(e => e.Bdate, "BDate");

                entity.HasIndex(e => e.Edate, "EDate");

                entity.HasIndex(e => e.Udfid, "UDFID");

                entity.Property(e => e.Udfid).HasColumnName("UDFID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.Eexp)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("LExp");
            });

            modelBuilder.Entity<ZInAcc>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_z_InAcc");

                entity.ToTable("z_InAcc", "dbo");

                entity.HasIndex(e => new { e.OurId, e.DocId }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");

                entity.Property(e => e.CompId).HasColumnName("CompID");

                entity.Property(e => e.CurrId).HasColumnName("CurrID");

                entity.Property(e => e.DocDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.EmpId).HasColumnName("EmpID");

                entity.Property(e => e.IntDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IntDocID");

                entity.Property(e => e.KursAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursAC");

                entity.Property(e => e.KursCc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursCC");

                entity.Property(e => e.KursMc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("KursMC");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.SumAc)
                    .HasColumnType("numeric(21, 9)")
                    .HasColumnName("SumAC");
            });

            modelBuilder.Entity<ZLicense>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("PK__z_Licens__AF02F0B837BDB43B");

                entity.ToTable("z_Licenses", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.BlobValue).HasColumnType("image");
            });

            modelBuilder.Entity<ZLogAmProd>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__z_log_AM__5E5499A87140F771");

                entity.ToTable("z_log_AM_Prods", "dbo");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLogAu>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogAU")
                    .IsClustered(false);

                entity.ToTable("z_LogAU", "dbo");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.AugroupCode).HasColumnName("AUGroupCode");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.DocDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");
            });

            modelBuilder.Entity<ZLogBaseRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_Log_BaseRate", "dbo");

                entity.Property(e => e.CalcName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("HOST");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LogID");

                entity.Property(e => e.LogPosId).HasColumnName("LogPosID");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<ZLogCalcDisDd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_Log_CalcDisDD", "dbo");

                entity.HasIndex(e => e.LogId, "CI_LogID")
                    .IsClustered();

                entity.HasIndex(e => e.LogPosId, "IX_LogPosID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.CalcName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("HOST");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LogID");

                entity.Property(e => e.LogPosId).HasColumnName("LogPosID");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<ZLogCashReg>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogCashReg")
                    .IsClustered(false);

                entity.ToTable("z_LogCashReg", "dbo");

                entity.HasIndex(e => new { e.Crid, e.CashRegAction, e.LogId }, "CRID_CashRegAction_LogID")
                    .IsUnique();

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLogCreate>(entity =>
            {
                entity.HasKey(e => new { e.TableCode, e.Pkvalue })
                    .HasName("pk_z_LogCreate");

                entity.ToTable("z_LogCreate", "dbo");

                entity.HasIndex(e => new { e.TableCode, e.ChId }, "ix_z_LogCreate_TableCode_ChID_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.Pkvalue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PKValue");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ZLogDelete>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogDelete")
                    .IsClustered(false);

                entity.ToTable("z_LogDelete", "dbo");

                entity.HasIndex(e => new { e.ChId, e.TableCode }, "ChID_TableCode")
                    .HasFillFactor(100);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Pkvalue)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PKValue");
            });

            modelBuilder.Entity<ZLogDiffTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_logDiffTables", "dbo");

                entity.Property(e => e.DatatimeMs).HasColumnName("datatimeMS");

                entity.Property(e => e.Docdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("docdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExecSql)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("execSQL");

                entity.Property(e => e.Tablename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tablename");
            });

            modelBuilder.Entity<ZLogDimension>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("z_logDimensions", "dbo");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.DepthNew).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.DepthOld).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Height1New).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Height1Old).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.Um)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("um");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Weight1New).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Weight1Old).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Width1New).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.Width1Old).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDisExc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogDisExc", "dbo");

                entity.Property(e => e.DisChId).HasColumnName("DisChID");

                entity.Property(e => e.DisDocId).HasColumnName("DisDocID");

                entity.Property(e => e.ExcChId).HasColumnName("ExcChID");

                entity.Property(e => e.ExcDocId).HasColumnName("ExcDocID");

                entity.Property(e => e.ExcDocdate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExcStockId).HasColumnName("ExcStockID");

                entity.Property(e => e.LogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LogID");
            });

            modelBuilder.Entity<ZLogDiscExp>(entity =>
            {
                entity.HasKey(e => new { e.DbiId, e.LogId })
                    .HasName("pk_z_LogDiscExp");

                entity.ToTable("z_LogDiscExp", "dbo");

                entity.HasIndex(e => new { e.DcardChId, e.LogId }, "DCardChID_LogID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DiscCode, e.DocCode, e.ChId, e.SrcPosId }, "DocCode_ChID_SrcPosID_DiscCode")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocCode, e.ChId, e.SrcPosId, e.DiscCode, e.BonusType }, "DocCode_ChID_SrcPosID_DiscCode_BonusType");

                entity.HasIndex(e => new { e.DocCode, e.DiscCode }, "IX_DocCode_DiscCode_Includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DiscCode, "ix_z_LogDiscExp_DiscCode_includes");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.ZLogDiscExps)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_LogDiscExp_r_DCards");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.ZLogDiscExps)
                    .HasForeignKey(d => d.DiscCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_LogDiscExp_r_Discs");
            });

            modelBuilder.Entity<ZLogDiscExpDelDidoborshch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogDiscExp_del_didoborshch", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscExpInsDidoborshch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogDiscExp_ins_didoborshch", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscExpP>(entity =>
            {
                entity.HasKey(e => new { e.DbiId, e.LogId })
                    .HasName("pk_z_LogDiscExpP");

                entity.ToTable("z_LogDiscExpP", "dbo");

                entity.HasIndex(e => new { e.DocCode, e.ChId, e.SrcPosId }, "DocCode_ChID_SrcPosID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.ZLogDiscExpPs)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_LogDiscExpP_r_DCards");
            });

            modelBuilder.Entity<ZLogDiscExpRazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogDiscExpRazn_06_31", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscExpShadow>(entity =>
            {
                entity.HasKey(e => new { e.DbiId, e.LogId })
                    .HasName("pk_z_LogDiscExpShadow")
                    .IsClustered(false);

                entity.ToTable("z_LogDiscExpShadow", "dbo");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.Discount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupDiscount).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.GroupSumBonus).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscRec>(entity =>
            {
                entity.HasKey(e => new { e.DbiId, e.LogId })
                    .HasName("pk_z_LogDiscRec");

                entity.ToTable("z_LogDiscRec", "dbo");

                entity.HasIndex(e => new { e.DcardChId, e.LogId }, "DCardChID_LogID")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocCode, e.ChId, e.SrcPosId, e.DiscCode, e.BonusType }, "DocCode_ChID_SrcPosID_DiscCode_BonusType");

                entity.HasIndex(e => new { e.DocCode, e.ChId }, "IX_DocCode_ChID_Includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocCode, e.LogDate, e.BonusType }, "NC_z_LogDiscRec_DocCode_BonusType_LogDate")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocCode, e.DcardChId, e.BonusType }, "NC_z_LogDiscRec_DocCode_DCardChID_BonusType_includes")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocCode, e.BonusType, e.DcardChId }, "ix_z_LogDiscRec_DocCode_BonusType_DCardChID_includes")
                    .HasFillFactor(95);

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");

                entity.HasOne(d => d.DcardCh)
                    .WithMany(p => p.ZLogDiscRecs)
                    .HasForeignKey(d => d.DcardChId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_LogDiscRec_r_DCards");

                entity.HasOne(d => d.DiscCodeNavigation)
                    .WithMany(p => p.ZLogDiscRecs)
                    .HasForeignKey(d => d.DiscCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_LogDiscRec_r_Discs");
            });

            modelBuilder.Entity<ZLogDiscRecDelDidoborsh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogDiscRec_del_didoborsh", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscRecInsDidoborsh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogDiscRec_ins_didoborsh", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscRecRazn0631>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogDiscRecRazn_06_31", "dbo");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscRecShadow>(entity =>
            {
                entity.HasKey(e => new { e.DbiId, e.LogId })
                    .HasName("pk_z_LogDiscRecShadow")
                    .IsClustered(false);

                entity.ToTable("z_LogDiscRecShadow", "dbo");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DcardChId).HasColumnName("DCardChID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogDiscRecTemp>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.ChId, e.LogId })
                    .HasName("pk_z_LogDiscRecTemp");

                entity.ToTable("z_LogDiscRecTemp", "dbo");

                entity.HasIndex(e => new { e.DocCode, e.ChId, e.SrcPosId, e.DiscCode, e.BonusType, e.SaleSrcPosId }, "DocCode_ChID_SrcPosID_DiscCode_BonusType_SaleSrcPosID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.SaleSrcPosId).HasColumnName("SaleSrcPosID");

                entity.Property(e => e.SrcPosId).HasColumnName("SrcPosID");

                entity.Property(e => e.SumBonus).HasColumnType("numeric(21, 9)");
            });

            modelBuilder.Entity<ZLogEotwrite>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogEOTWrite", "dbo");

                entity.HasIndex(e => e.LogId, "LogID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.LogPosId, "LogPosID")
                    .HasFillFactor(90);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("HOST");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LogID");

                entity.Property(e => e.LogPosId).HasColumnName("LogPosID");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<ZLogEowrite>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_LogEOWrite", "dbo");

                entity.HasIndex(e => e.LogId, "LogID");

                entity.HasIndex(e => e.LogPosId, "LogPosID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("HOST");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.LogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LogID");

                entity.Property(e => e.LogPosId).HasColumnName("LogPosID");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<ZLogImpSale>(entity =>
            {
                entity.HasKey(e => e.TableCode)
                    .HasName("pk_z_Log_ImpSales");

                entity.ToTable("z_Log_ImpSales", "dbo");

                entity.Property(e => e.TableCode).ValueGeneratedNever();

                entity.Property(e => e.PercentDone).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLogMetric>(entity =>
            {
                entity.HasKey(e => new { e.DbiId, e.LogIdex })
                    .HasName("pk_z_LogMetrics");

                entity.ToTable("z_LogMetrics", "dbo");

                entity.HasIndex(e => e.CreateTime, "CreateTime");

                entity.HasIndex(e => new { e.DocCode, e.Crid, e.EventId }, "DocCode_CRID_EventID");

                entity.Property(e => e.DbiId).HasColumnName("DBiID");

                entity.Property(e => e.LogIdex).HasColumnName("LogIDEx");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.ZLogMetrics)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_z_LogMetrics_z_MetricaEvents");
            });

            modelBuilder.Entity<ZLogPrint>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogPrint")
                    .IsClustered(false);

                entity.ToTable("z_LogPrint", "dbo");

                entity.HasIndex(e => new { e.DocCode, e.ChId }, "ix_z_LogPrint_DocCode_ChID");

                entity.HasIndex(e => e.DocCode, "ix_z_LogPrint_DocCode_includes");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZLogPrints)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_LogPrint_z_Docs");
            });

            modelBuilder.Entity<ZLogProcessing>(entity =>
            {
                entity.HasKey(e => new { e.DocCode, e.ChId })
                    .HasName("pk_z_LogProcessings");

                entity.ToTable("z_LogProcessings", "dbo");

                entity.HasIndex(e => e.Status, "Status");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.CardInfo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Rrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RRN");
            });

            modelBuilder.Entity<ZLogProcessingExchange>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_z_LogProcessingExchange");

                entity.ToTable("z_LogProcessingExchange", "dbo");

                entity.HasIndex(e => e.DocTime, "DocTime");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.CardInfo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.NewDcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NewDCardID");

                entity.Property(e => e.OldDcardId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("OldDCardID");

                entity.Property(e => e.ProcessingId).HasColumnName("ProcessingID");

                entity.Property(e => e.Rrn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RRN");
            });

            modelBuilder.Entity<ZLogProcessingOp>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_z_LogProcessingOPs");

                entity.ToTable("z_LogProcessingOPs", "dbo");

                entity.HasIndex(e => new { e.DocTime, e.Crid }, "DocTime_CRID");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.Crid).HasColumnName("CRID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLogProdMq>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK_z_logProdMQ_LogID");

                entity.ToTable("z_logProdMQ", "dbo");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NewBarCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OldBarCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLogRProd>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__z_log_r___5E5499A81E0E5E91");

                entity.ToTable("z_log_r_Prods", "dbo");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OldNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OldProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.ProdName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLogRProdsClass>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__z_log_r___5E5499A8BBA92781");

                entity.ToTable("z_log_r_Prods_Class", "dbo");

                entity.Property(e => e.LogId)
                    .ValueGeneratedNever()
                    .HasColumnName("LogID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OldPcatId).HasColumnName("OldPCatID");

                entity.Property(e => e.OldPgrId).HasColumnName("OldPGrID");

                entity.Property(e => e.OldPgrId1).HasColumnName("OldPGrID1");

                entity.Property(e => e.OldPgrId2).HasColumnName("OldPGrID2");

                entity.Property(e => e.OldPgrId3).HasColumnName("OldPGrID3");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");

                entity.Property(e => e.PgrId2).HasColumnName("PGrID2");

                entity.Property(e => e.PgrId3).HasColumnName("PGrID3");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLogScale>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogScale")
                    .IsClustered(false);

                entity.ToTable("z_LogScale", "dbo");

                entity.HasIndex(e => new { e.ScaleId, e.ScaleAction, e.LogId }, "ScaleID_ScaleAction_LogID")
                    .IsUnique();

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ScaleId).HasColumnName("ScaleID");
            });

            modelBuilder.Entity<ZLogState>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogState");

                entity.ToTable("z_LogState", "dbo");

                entity.HasIndex(e => e.UserCode, "UserCode")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.DocCode, e.ChId }, "ix_z_LogState_DocCode_ChID")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.DocCode, "ix_z_LogState_DocCode_includes");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZLogStates)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_LogState_z_Docs");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZLogStates)
                    .HasForeignKey(d => d.UserCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_LogState_r_Users");
            });

            modelBuilder.Entity<ZLogStockAttribute>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_z_LogStockAttribute");

                entity.ToTable("z_LogStockAttribute", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.LogDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZLogStockAttributes)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_LogStockAttribute_z_Docs");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZLogStockAttributes)
                    .HasForeignKey(d => d.UserCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_LogStockAttribute_r_Users");
            });

            modelBuilder.Entity<ZLogTRemDStatitic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("z_Log_t_RemD_Statitic", "dbo");

                entity.Property(e => e.Actions)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.Host)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("HOST");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LogID");

                entity.Property(e => e.NewAccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.NewQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OldAccQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OldQty).HasColumnType("numeric(21, 9)");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.SecId).HasColumnName("SecID");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("user");
            });

            modelBuilder.Entity<ZLogTool>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogTools")
                    .IsClustered(false);

                entity.ToTable("z_LogTools", "dbo");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.DocDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Note1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Note3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserCode).HasDefaultValueSql("([dbo].[zf_GetUserCode]())");

                entity.HasOne(d => d.RepToolCodeNavigation)
                    .WithMany(p => p.ZLogTools)
                    .HasForeignKey(d => d.RepToolCode)
                    .HasConstraintName("FK_z_LogTools_z_ToolRep");
            });

            modelBuilder.Entity<ZLogUpdate>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_LogUpdate");

                entity.ToTable("z_LogUpdate", "dbo");

                entity.HasIndex(e => new { e.TableCode, e.Pkvalue }, "TableCode_PKValue")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.TableCode, e.ChId }, "ix7_z_LogUpdate_TableCode_ChID_includes");

                entity.HasIndex(e => e.TableCode, "ix7_z_LogUpdate_TableCode_includes");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Pkvalue)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PKValue");
            });

            modelBuilder.Entity<ZLogrProdsPgrId6>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__z_logrPr__5E5499A8D987EE40");

                entity.ToTable("z_logrProdsPGrID6", "dbo");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PgrId6).HasColumnName("PGrID6");

                entity.Property(e => e.ProdId).HasColumnName("ProdID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZLookup>(entity =>
            {
                entity.HasKey(e => e.Lsname)
                    .HasName("pk_z_Lookups")
                    .IsClustered(false);

                entity.ToTable("z_Lookups", "dbo");

                entity.HasIndex(e => e.Lsdesc, "LSDesc")
                    .IsUnique();

                entity.Property(e => e.Lsname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LSName");

                entity.Property(e => e.Lsdesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LSDesc");

                entity.Property(e => e.Sqlstr)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SQLStr");
            });

            modelBuilder.Entity<ZMetricaEvent>(entity =>
            {
                entity.HasKey(e => e.EventId)
                    .HasName("pk_z_MetricaEvents");

                entity.ToTable("z_MetricaEvents", "dbo");

                entity.HasIndex(e => e.EventName, "EventName")
                    .IsUnique();

                entity.Property(e => e.EventId)
                    .ValueGeneratedNever()
                    .HasColumnName("EventID");

                entity.Property(e => e.EventName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZObject>(entity =>
            {
                entity.HasKey(e => e.ObjCode)
                    .HasName("pk_z_Objects")
                    .IsClustered(false);

                entity.ToTable("z_Objects", "dbo");

                entity.HasIndex(e => e.ObjDesc, "ObjDesc");

                entity.HasIndex(e => e.ObjName, "ObjName");

                entity.Property(e => e.ObjCode).ValueGeneratedNever();

                entity.Property(e => e.ObjDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjType)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RevId).HasColumnName("RevID");
            });

            modelBuilder.Entity<ZOpenAge>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.StockId })
                    .HasName("pk_z_OpenAge")
                    .IsClustered(false);

                entity.ToTable("z_OpenAge", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChUserId).HasColumnName("ChUserID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.OpenAgeBqty).HasColumnName("OpenAgeBQty");

                entity.Property(e => e.OpenAgeBtype).HasColumnName("OpenAgeBType");

                entity.Property(e => e.OpenAgeEqty).HasColumnName("OpenAgeEQty");

                entity.Property(e => e.OpenAgeEtype).HasColumnName("OpenAgeEType");
            });

            modelBuilder.Entity<ZOpenAgeH>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.ChDate, e.StockId })
                    .HasName("pk_z_OpenAgeH")
                    .IsClustered(false);

                entity.ToTable("z_OpenAgeH", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChUserId).HasColumnName("ChUserID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.OpenAgeBqty).HasColumnName("OpenAgeBQty");

                entity.Property(e => e.OpenAgeBtype).HasColumnName("OpenAgeBType");

                entity.Property(e => e.OpenAgeEqty).HasColumnName("OpenAgeEQty");

                entity.Property(e => e.OpenAgeEtype).HasColumnName("OpenAgeEType");
            });

            modelBuilder.Entity<ZRelation>(entity =>
            {
                entity.HasKey(e => e.RelName)
                    .HasName("pk_z_Relations")
                    .IsClustered(false);

                entity.ToTable("z_Relations", "dbo");

                entity.HasIndex(e => e.ChildCode, "ChildCode");

                entity.HasIndex(e => new { e.ChildCode, e.ChildDescs }, "ChildCodeDescs");

                entity.HasIndex(e => new { e.ChildCode, e.ChildNames }, "ChildCodeNames");

                entity.HasIndex(e => e.ParentCode, "ParentCode");

                entity.HasIndex(e => new { e.ParentCode, e.ParentDescs }, "ParentCodeDescs");

                entity.HasIndex(e => new { e.ParentCode, e.ParentNames }, "ParentCodeNames");

                entity.HasIndex(e => new { e.ParentCode, e.ParentNames, e.ChildCode, e.ChildNames }, "UniqueRels")
                    .IsUnique();

                entity.Property(e => e.RelName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildDescs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChildNames)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDescs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNames)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZReplicaCmd>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_z_ReplicaCMDs");

                entity.ToTable("z_ReplicaCMDs", "dbo");

                entity.Property(e => e.DocTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReplicaCmd).HasColumnName("ReplicaCMD");
            });

            modelBuilder.Entity<ZReplicaConfigIn>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaConfigId, e.ReplicaSubCode })
                    .HasName("pk_z_ReplicaConfigIn")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaConfigIn", "dbo");

                entity.HasIndex(e => e.DocTime, "DocTime");

                entity.HasIndex(e => e.Status, "Status");

                entity.Property(e => e.ReplicaConfigId).HasColumnName("ReplicaConfigID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hash)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZReplicaConfigOut>(entity =>
            {
                entity.HasKey(e => e.ReplicaEventId)
                    .HasName("pk_z_ReplicaConfigEvents")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaConfigOut", "dbo");

                entity.HasIndex(e => e.DocTime, "DocTime");

                entity.Property(e => e.ReplicaEventId).HasColumnName("ReplicaEventID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Idfields)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDFields");

                entity.Property(e => e.Idvalue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDValue");

                entity.Property(e => e.ReplicaConfigId).HasColumnName("ReplicaConfigID");

                entity.HasOne(d => d.ReplicaSubCodeNavigation)
                    .WithMany(p => p.ZReplicaConfigOuts)
                    .HasForeignKey(d => d.ReplicaSubCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_ReplicaConfigOut_z_ReplicaSubs");
            });

            modelBuilder.Entity<ZReplicaConfigSent>(entity =>
            {
                entity.HasKey(e => e.ReplicaConfigId)
                    .HasName("pk_z_ReplicaConfigSent")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaConfigSent", "dbo");

                entity.HasIndex(e => e.DocTime, "DocTime");

                entity.HasIndex(e => e.Status, "Status");

                entity.Property(e => e.ReplicaConfigId)
                    .ValueGeneratedNever()
                    .HasColumnName("ReplicaConfigID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hash)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZReplicaExchangeLog>(entity =>
            {
                entity.HasKey(e => e.ChId)
                    .HasName("pk_z_ReplicaExchangeLog");

                entity.ToTable("z_ReplicaExchangeLog", "dbo");

                entity.HasIndex(e => e.DocTime, "DocTime");

                entity.HasIndex(e => new { e.ReplicaSubCode, e.Pccode }, "ReplicaSubCode_PCCode");

                entity.Property(e => e.ChId).HasColumnName("ChID");

                entity.Property(e => e.DocTime).HasColumnType("datetime");

                entity.Property(e => e.ExchangeStartTime).HasColumnType("datetime");

                entity.Property(e => e.LastProcessedEventId).HasColumnName("LastProcessedEventID");

                entity.Property(e => e.MaxExchangedEventId).HasColumnName("MaxExchangedEventID");

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.Pccode).HasColumnName("PCCode");
            });

            modelBuilder.Entity<ZReplicaField>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaPubCode, e.TableCode, e.FieldName })
                    .HasName("pk_z_ReplicaFields");

                entity.ToTable("z_ReplicaFields", "dbo");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");
            });

            modelBuilder.Entity<ZReplicaFilter>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaPubCode, e.TableCode, e.CtableCode })
                    .HasName("pk_z_ReplicaFilters")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaFilters", "dbo");

                entity.HasIndex(e => e.ReplicaPubCode, "ReplicaPubCode");

                entity.HasIndex(e => e.TableCode, "TableCode");

                entity.Property(e => e.CtableCode).HasColumnName("CTableCode");

                entity.Property(e => e.CfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldDescs");

                entity.Property(e => e.CfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CFieldNames");

                entity.Property(e => e.PfieldDescs)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldDescs");

                entity.Property(e => e.PfieldNames)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PFieldNames");

                entity.Property(e => e.PtableCode).HasColumnName("PTableCode");

                entity.HasOne(d => d.ZReplicaTable)
                    .WithMany(p => p.ZReplicaFilters)
                    .HasForeignKey(d => new { d.ReplicaPubCode, d.TableCode })
                    .HasConstraintName("FK_z_ReplicaFilters_z_ReplicaTables");
            });

            modelBuilder.Entity<ZReplicaIn>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaSubCode, e.ReplicaEventId })
                    .HasName("pk_z_ReplicaIn");

                entity.ToTable("z_ReplicaIn", "dbo");

                entity.HasIndex(e => e.DocTime, "DocTime")
                    .HasFillFactor(100);

                entity.HasIndex(e => e.Status, "Status")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ReplicaSubCode, e.Status, e.DocTime }, "ix_20190709_2")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ReplicaSubCode, e.Status }, "ix_z_ReplicaIn_ReplicaSubCode_Status_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.ReplicaEventId).HasColumnName("ReplicaEventID");

                entity.Property(e => e.DocTime)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExecStr).IsUnicode(false);

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.HasOne(d => d.ReplicaSubCodeNavigation)
                    .WithMany(p => p.ZReplicaIns)
                    .HasForeignKey(d => d.ReplicaSubCode)
                    .HasConstraintName("FK_z_ReplicaIn_z_ReplicaSubs");
            });

            modelBuilder.Entity<ZReplicaOut>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaEventId, e.ReplicaSubCode })
                    .HasName("pk_z_ReplicaOut")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaOut", "dbo");

                entity.HasIndex(e => new { e.ReplicaEventId, e.DocTime }, "ix_z_ReplicaOut_ReplicaEventID_DocTime")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ReplicaSubCode, e.Status }, "ix_z_ReplicaOut_ReplicaSubCode_Status")
                    .HasFillFactor(100);

                entity.HasIndex(e => new { e.ReplicaSubCode, e.Status }, "ix_z_ReplicaOut_ReplicaSubCode_Status_includes")
                    .HasFillFactor(100);

                entity.Property(e => e.ReplicaEventId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ReplicaEventID");

                entity.Property(e => e.ChangeFieldValues).IsUnicode(false);

                entity.Property(e => e.ChangeFields)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DocTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Msg).IsUnicode(false);

                entity.Property(e => e.Pkfields)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PKFields");

                entity.Property(e => e.Pkvalue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PKValue");
            });

            modelBuilder.Entity<ZReplicaPub>(entity =>
            {
                entity.HasKey(e => e.ReplicaPubCode)
                    .HasName("pk_z_ReplicaPubs")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaPubs", "dbo");

                entity.HasIndex(e => e.ReplicaPubName, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ReplicaPubCode).ValueGeneratedNever();

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ReplicaPubName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZReplicaReplace>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaPubCode, e.TableCode, e.FieldName })
                    .HasName("pk_z_ReplicaReplace")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaReplace", "dbo");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Eexp)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EExp");

                entity.Property(e => e.Lexp)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("LExp");

                entity.HasOne(d => d.FieldNameNavigation)
                    .WithMany(p => p.ZReplicaReplaces)
                    .HasForeignKey(d => d.FieldName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_ReplicaReplace_z_FieldsRep");

                entity.HasOne(d => d.ZReplicaTable)
                    .WithMany(p => p.ZReplicaReplaces)
                    .HasForeignKey(d => new { d.ReplicaPubCode, d.TableCode })
                    .HasConstraintName("FK_z_ReplicaReplace_z_ReplicaTables");
            });

            modelBuilder.Entity<ZReplicaState>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaSubCode, e.Pccode })
                    .HasName("pk_z_ReplicaState");

                entity.ToTable("z_ReplicaState", "dbo");

                entity.Property(e => e.Pccode).HasColumnName("PCCode");

                entity.Property(e => e.DocTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastErrorMsg).IsUnicode(false);

                entity.Property(e => e.LastFullSync).HasColumnType("datetime");

                entity.Property(e => e.LastProcessedEventId).HasColumnName("LastProcessedEventID");

                entity.Property(e => e.MaxExchangedEventId).HasColumnName("MaxExchangedEventID");
            });

            modelBuilder.Entity<ZReplicaSub>(entity =>
            {
                entity.HasKey(e => e.ReplicaSubCode)
                    .HasName("pk_z_ReplicaSubs")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaSubs", "dbo");

                entity.HasIndex(e => e.PublisherCode, "PublisherCode");

                entity.HasIndex(e => e.ReplicaPubCode, "ReplicaPubCode");

                entity.HasIndex(e => e.ReplicaSubName, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.ReplicaSubCode).ValueGeneratedNever();

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pccode).HasColumnName("PCCode");

                entity.Property(e => e.ReplicaSubName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Shed)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UseSched)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.PccodeNavigation)
                    .WithMany(p => p.ZReplicaSubs)
                    .HasForeignKey(d => d.Pccode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_ReplicaSubs_r_PCs");

                entity.HasOne(d => d.ReplicaPubCodeNavigation)
                    .WithMany(p => p.ZReplicaSubs)
                    .HasForeignKey(d => d.ReplicaPubCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_ReplicaSubs_z_ReplicaPubs");
            });

            modelBuilder.Entity<ZReplicaTable>(entity =>
            {
                entity.HasKey(e => new { e.ReplicaPubCode, e.TableCode })
                    .HasName("pk_z_ReplicaTables")
                    .IsClustered(false);

                entity.ToTable("z_ReplicaTables", "dbo");

                entity.HasIndex(e => e.ReplicaPubCode, "ReplicaPubCode");

                entity.HasIndex(e => e.TableCode, "TableCode");

                entity.Property(e => e.EfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("EFilterExp");

                entity.Property(e => e.LfilterExp)
                    .IsUnicode(false)
                    .HasColumnName("LFilterExp");

                entity.HasOne(d => d.ReplicaPubCodeNavigation)
                    .WithMany(p => p.ZReplicaTables)
                    .HasForeignKey(d => d.ReplicaPubCode)
                    .HasConstraintName("FK_z_ReplicaTables_z_ReplicaPubs");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZReplicaTables)
                    .HasForeignKey(d => d.TableCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_ReplicaTables_z_Tables");
            });

            modelBuilder.Entity<ZRole>(entity =>
            {
                entity.HasKey(e => e.RoleCode)
                    .HasName("pk_z_Roles");

                entity.ToTable("z_Roles", "dbo");

                entity.HasIndex(e => e.RoleName, "RoleName")
                    .IsUnique();

                entity.Property(e => e.RoleCode).ValueGeneratedNever();

                entity.Property(e => e.RoleDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZRoleDoc>(entity =>
            {
                entity.HasKey(e => new { e.RoleCode, e.DocCode })
                    .HasName("pk_z_RoleDocs")
                    .IsClustered(false);

                entity.ToTable("z_RoleDocs", "dbo");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZRoleDocs)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_RoleDocs_z_Docs");

                entity.HasOne(d => d.RoleCodeNavigation)
                    .WithMany(p => p.ZRoleDocs)
                    .HasForeignKey(d => d.RoleCode)
                    .HasConstraintName("FK_z_RoleDocs_z_Roles");
            });

            modelBuilder.Entity<ZRoleObject>(entity =>
            {
                entity.HasKey(e => new { e.RoleCode, e.ObjCode })
                    .HasName("pk_z_RoleObjects")
                    .IsClustered(false);

                entity.ToTable("z_RoleObjects", "dbo");

                entity.HasOne(d => d.ObjCodeNavigation)
                    .WithMany(p => p.ZRoleObjects)
                    .HasForeignKey(d => d.ObjCode)
                    .HasConstraintName("FK_z_RoleObjects_z_Objects");

                entity.HasOne(d => d.RoleCodeNavigation)
                    .WithMany(p => p.ZRoleObjects)
                    .HasForeignKey(d => d.RoleCode)
                    .HasConstraintName("FK_z_RoleObjects_z_Roles");
            });

            modelBuilder.Entity<ZRoleTable>(entity =>
            {
                entity.HasKey(e => new { e.RoleCode, e.TableCode })
                    .HasName("pk_z_RoleTables")
                    .IsClustered(false);

                entity.ToTable("z_RoleTables", "dbo");

                entity.HasOne(d => d.RoleCodeNavigation)
                    .WithMany(p => p.ZRoleTables)
                    .HasForeignKey(d => d.RoleCode)
                    .HasConstraintName("FK_z_RoleTables_z_Roles");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZRoleTables)
                    .HasForeignKey(d => d.TableCode)
                    .HasConstraintName("FK_z_RoleTables_z_Tables");
            });

            modelBuilder.Entity<ZRoleUser>(entity =>
            {
                entity.HasKey(e => new { e.RoleCode, e.UserCode })
                    .HasName("pk_z_RoleUsers")
                    .IsClustered(false);

                entity.ToTable("z_RoleUsers", "dbo");

                entity.HasIndex(e => e.UserCode, "UserCode");

                entity.HasOne(d => d.RoleCodeNavigation)
                    .WithMany(p => p.ZRoleUsers)
                    .HasForeignKey(d => d.RoleCode)
                    .HasConstraintName("FK_z_RoleUsers_z_Roles");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZRoleUsers)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_RoleUsers_r_Users");
            });

            modelBuilder.Entity<ZTable>(entity =>
            {
                entity.HasKey(e => e.TableCode)
                    .HasName("pk_z_Tables")
                    .IsClustered(false);

                entity.ToTable("z_Tables", "dbo");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.HasIndex(e => e.TableDesc, "TableDesc")
                    .IsUnique();

                entity.HasIndex(e => e.TableName, "TableName")
                    .IsUnique();

                entity.HasIndex(e => new { e.DocCode, e.IsDefault }, "Unique_DocCode_IsDefault")
                    .IsUnique()
                    .HasFilter("([IsDefault]=(1))");

                entity.Property(e => e.TableCode).ValueGeneratedNever();

                entity.Property(e => e.DateField)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IntFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OpenFilter)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pkfields)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PKFields");

                entity.Property(e => e.SortFields)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SyncAufields)
                    .HasColumnName("SyncAUFields")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TableDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZTables)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_Tables_z_Docs");
            });

            modelBuilder.Entity<ZTool>(entity =>
            {
                entity.HasKey(e => e.ToolCode)
                    .HasName("pk_z_Tools")
                    .IsClustered(false);

                entity.ToTable("z_Tools", "dbo");

                entity.HasIndex(e => e.ToolName, "ToolName")
                    .IsUnique();

                entity.Property(e => e.ToolCode).ValueGeneratedNever();

                entity.Property(e => e.CompleteText)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmText)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExecStr).IsUnicode(false);

                entity.Property(e => e.ShortCut)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.RepToolCodeNavigation)
                    .WithMany(p => p.ZTools)
                    .HasForeignKey(d => d.RepToolCode)
                    .HasConstraintName("FK_z_Tools_z_ToolRep");
            });

            modelBuilder.Entity<ZToolApp>(entity =>
            {
                entity.HasKey(e => new { e.ToolCode, e.AppCode })
                    .HasName("pk_z_ToolApps")
                    .IsClustered(false);

                entity.ToTable("z_ToolApps", "dbo");

                entity.HasOne(d => d.AppCodeNavigation)
                    .WithMany(p => p.ZToolApps)
                    .HasForeignKey(d => d.AppCode)
                    .HasConstraintName("FK_z_ToolApps_z_Apps");

                entity.HasOne(d => d.ToolCodeNavigation)
                    .WithMany(p => p.ZToolApps)
                    .HasForeignKey(d => d.ToolCode)
                    .HasConstraintName("FK_z_ToolApps_z_Tools");
            });

            modelBuilder.Entity<ZToolDoc>(entity =>
            {
                entity.HasKey(e => new { e.ToolCode, e.DocCode })
                    .HasName("pk_z_ToolDocs")
                    .IsClustered(false);

                entity.ToTable("z_ToolDocs", "dbo");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZToolDocs)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_ToolDocs_z_Docs");

                entity.HasOne(d => d.ToolCodeNavigation)
                    .WithMany(p => p.ZToolDocs)
                    .HasForeignKey(d => d.ToolCode)
                    .HasConstraintName("FK_z_ToolDocs_z_Tools");
            });

            modelBuilder.Entity<ZToolField>(entity =>
            {
                entity.HasKey(e => new { e.ToolCode, e.FieldName })
                    .HasName("pk_z_ToolFields")
                    .IsClustered(false);

                entity.ToTable("z_ToolFields", "dbo");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.FieldNameNavigation)
                    .WithMany(p => p.ZToolFields)
                    .HasForeignKey(d => d.FieldName)
                    .HasConstraintName("FK_z_ToolFields_z_FieldsRep");

                entity.HasOne(d => d.ToolCodeNavigation)
                    .WithMany(p => p.ZToolFields)
                    .HasForeignKey(d => d.ToolCode)
                    .HasConstraintName("FK_z_ToolFields_z_Tools");
            });

            modelBuilder.Entity<ZToolPage>(entity =>
            {
                entity.HasKey(e => new { e.ToolCode, e.PageIndex })
                    .HasName("pk_z_ToolPages")
                    .IsClustered(false);

                entity.ToTable("z_ToolPages", "dbo");

                entity.HasIndex(e => new { e.ToolCode, e.PageName }, "UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.IntName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sqlstr)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SQLStr");

                entity.Property(e => e.Sqltype).HasColumnName("SQLType");

                entity.HasOne(d => d.ToolCodeNavigation)
                    .WithMany(p => p.ZToolPages)
                    .HasForeignKey(d => d.ToolCode)
                    .HasConstraintName("FK_z_ToolPages_z_Tools");
            });

            modelBuilder.Entity<ZToolRep>(entity =>
            {
                entity.HasKey(e => e.RepToolCode)
                    .HasName("pk_z_ToolRep")
                    .IsClustered(false);

                entity.ToTable("z_ToolRep", "dbo");

                entity.HasIndex(e => e.FormClass, "FormClass")
                    .IsUnique();

                entity.HasIndex(e => e.RepToolName, "RepToolName")
                    .IsUnique();

                entity.Property(e => e.RepToolCode).ValueGeneratedNever();

                entity.Property(e => e.FormClass)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepToolCatName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RepToolName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ShortCut)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZToolUserEvent>(entity =>
            {
                entity.HasKey(e => new { e.ToolCode, e.UserCode, e.EventId })
                    .HasName("pk_z_ToolUserEvents")
                    .IsClustered(false);

                entity.ToTable("z_ToolUserEvents", "dbo");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.HasOne(d => d.ToolCodeNavigation)
                    .WithMany(p => p.ZToolUserEvents)
                    .HasForeignKey(d => d.ToolCode)
                    .HasConstraintName("FK_z_ToolUserEvents_z_Tools");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZToolUserEvents)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_ToolUserEvents_r_Users");
            });

            modelBuilder.Entity<ZUserCodes1>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CodeId1 })
                    .HasName("pk_z_UserCodes1")
                    .IsClustered(false);

                entity.ToTable("z_UserCodes1", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.CodeId1, "CodeID1");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CodeId1).HasColumnName("CodeID1");
            });

            modelBuilder.Entity<ZUserCodes2>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CodeId2 })
                    .HasName("pk_z_UserCodes2")
                    .IsClustered(false);

                entity.ToTable("z_UserCodes2", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.CodeId2, "CodeID2");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CodeId2).HasColumnName("CodeID2");
            });

            modelBuilder.Entity<ZUserCodes3>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CodeId3 })
                    .HasName("pk_z_UserCodes3")
                    .IsClustered(false);

                entity.ToTable("z_UserCodes3", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.CodeId3, "CodeID3");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CodeId3).HasColumnName("CodeID3");
            });

            modelBuilder.Entity<ZUserCodes4>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CodeId4 })
                    .HasName("pk_z_UserCodes4")
                    .IsClustered(false);

                entity.ToTable("z_UserCodes4", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.CodeId4, "CodeID4");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CodeId4).HasColumnName("CodeID4");
            });

            modelBuilder.Entity<ZUserCodes5>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CodeId5 })
                    .HasName("pk_z_UserCodes5")
                    .IsClustered(false);

                entity.ToTable("z_UserCodes5", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.CodeId5, "CodeID5");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CodeId5).HasColumnName("CodeID5");
            });

            modelBuilder.Entity<ZUserComp>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CompId })
                    .HasName("pk_z_UserComps")
                    .IsClustered(false);

                entity.ToTable("z_UserComps", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.CompId, "CompID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CompId).HasColumnName("CompID");
            });

            modelBuilder.Entity<ZUserCompG>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.CgrId })
                    .HasName("pk_z_UserCompG")
                    .IsClustered(false);

                entity.ToTable("z_UserCompG", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.CgrId, "CGrID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.CgrId).HasColumnName("CGrID");
            });

            modelBuilder.Entity<ZUserDoc>(entity =>
            {
                entity.HasKey(e => new { e.UserCode, e.DocCode })
                    .HasName("pk_z_UserDocs")
                    .IsClustered(false);

                entity.ToTable("z_UserDocs", "dbo");

                entity.HasIndex(e => e.DocCode, "DocCode");

                entity.HasIndex(e => e.UserCode, "UserCode");

                entity.HasOne(d => d.DocCodeNavigation)
                    .WithMany(p => p.ZUserDocs)
                    .HasForeignKey(d => d.DocCode)
                    .HasConstraintName("FK_z_UserDocs_z_Docs");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZUserDocs)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_UserDocs_r_Users");
            });

            modelBuilder.Entity<ZUserObject>(entity =>
            {
                entity.HasKey(e => new { e.UserCode, e.ObjCode })
                    .HasName("pk_z_UserObjects")
                    .IsClustered(false);

                entity.ToTable("z_UserObjects", "dbo");

                entity.HasOne(d => d.ObjCodeNavigation)
                    .WithMany(p => p.ZUserObjects)
                    .HasForeignKey(d => d.ObjCode)
                    .HasConstraintName("FK_z_UserObjects_z_Objects");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZUserObjects)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_UserObjects_r_Users");
            });

            modelBuilder.Entity<ZUserOpenAge>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.UserId, e.StockId })
                    .HasName("pk_z_UserOpenAge")
                    .IsClustered(false);

                entity.ToTable("z_UserOpenAge", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChUserId).HasColumnName("ChUserID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.OpenAgeBqty).HasColumnName("OpenAgeBQty");

                entity.Property(e => e.OpenAgeBtype).HasColumnName("OpenAgeBType");

                entity.Property(e => e.OpenAgeEqty).HasColumnName("OpenAgeEQty");

                entity.Property(e => e.OpenAgeEtype).HasColumnName("OpenAgeEType");
            });

            modelBuilder.Entity<ZUserOpenAgeH>(entity =>
            {
                entity.HasKey(e => new { e.OurId, e.UserId, e.ChDate, e.StockId })
                    .HasName("pk_z_UserOpenAgeH")
                    .IsClustered(false);

                entity.ToTable("z_UserOpenAgeH", "dbo");

                entity.Property(e => e.OurId).HasColumnName("OurID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ChDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockId).HasColumnName("StockID");

                entity.Property(e => e.Bdate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("BDate");

                entity.Property(e => e.ChUserId).HasColumnName("ChUserID");

                entity.Property(e => e.Edate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EDate");

                entity.Property(e => e.OpenAgeBqty).HasColumnName("OpenAgeBQty");

                entity.Property(e => e.OpenAgeBtype).HasColumnName("OpenAgeBType");

                entity.Property(e => e.OpenAgeEqty).HasColumnName("OpenAgeEQty");

                entity.Property(e => e.OpenAgeEtype).HasColumnName("OpenAgeEType");
            });

            modelBuilder.Entity<ZUserOur>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.OurId })
                    .HasName("pk_z_UserOurs")
                    .IsClustered(false);

                entity.ToTable("z_UserOurs", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.OurId, "OurID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.OurId).HasColumnName("OurID");
            });

            modelBuilder.Entity<ZUserPl>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Plid })
                    .HasName("pk_z_UserPLs")
                    .IsClustered(false);

                entity.ToTable("z_UserPLs", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.Plid, "PLID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Plid).HasColumnName("PLID");
            });

            modelBuilder.Entity<ZUserProdC>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.PcatId })
                    .HasName("pk_z_UserProdC")
                    .IsClustered(false);

                entity.ToTable("z_UserProdC", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.PcatId, "PCatID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.PcatId).HasColumnName("PCatID");
            });

            modelBuilder.Entity<ZUserProdG>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.PgrId })
                    .HasName("pk_z_UserProdG")
                    .IsClustered(false);

                entity.ToTable("z_UserProdG", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.PgrId, "PGrID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.PgrId).HasColumnName("PGrID");
            });

            modelBuilder.Entity<ZUserProdG1>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.PgrId1 })
                    .HasName("pk_z_UserProdG1")
                    .IsClustered(false);

                entity.ToTable("z_UserProdG1", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.PgrId1, "PGrID1");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.PgrId1).HasColumnName("PGrID1");
            });

            modelBuilder.Entity<ZUserStock>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.StockId })
                    .HasName("pk_z_UserStocks")
                    .IsClustered(false);

                entity.ToTable("z_UserStocks", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.StockId, "StockID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.StockId).HasColumnName("StockID");
            });

            modelBuilder.Entity<ZUserStockG>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.StockGid })
                    .HasName("pk_z_UserStockGs")
                    .IsClustered(false);

                entity.ToTable("z_UserStockGs", "dbo");

                entity.HasIndex(e => e.AccDelete, "AccDelete");

                entity.HasIndex(e => e.AccInsert, "AccInsert");

                entity.HasIndex(e => e.AccRead, "AccRead");

                entity.HasIndex(e => e.AccUpdate, "AccUpdate");

                entity.HasIndex(e => e.StockGid, "StockGID");

                entity.HasIndex(e => e.UserId, "UserID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.StockGid).HasColumnName("StockGID");
            });

            modelBuilder.Entity<ZUserTable>(entity =>
            {
                entity.HasKey(e => new { e.UserCode, e.TableCode })
                    .HasName("pk_z_UserTables")
                    .IsClustered(false);

                entity.ToTable("z_UserTables", "dbo");

                entity.HasIndex(e => e.TableCode, "TableCode");

                entity.HasIndex(e => e.UserCode, "UserCode");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZUserTables)
                    .HasForeignKey(d => d.TableCode)
                    .HasConstraintName("FK_z_UserTables_z_Tables");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZUserTables)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_UserTables_r_Users");
            });

            modelBuilder.Entity<ZUserVar>(entity =>
            {
                entity.HasKey(e => new { e.UserCode, e.VarName })
                    .HasName("pk_z_UserVars")
                    .IsClustered(false);

                entity.ToTable("z_UserVars", "dbo");

                entity.HasIndex(e => e.UserCode, "UserCode");

                entity.HasIndex(e => e.VarName, "VarName")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.UserCode, e.VarPosId }, "VarPosID");

                entity.Property(e => e.VarName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.VarDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarExtInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarPosId).HasColumnName("VarPosID");

                entity.Property(e => e.VarValue)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.VarVisible)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.UserCodeNavigation)
                    .WithMany(p => p.ZUserVars)
                    .HasForeignKey(d => d.UserCode)
                    .HasConstraintName("FK_z_UserVars_r_Users");
            });

            modelBuilder.Entity<ZVar>(entity =>
            {
                entity.HasKey(e => e.VarName)
                    .HasName("_pk_z_Vars")
                    .IsClustered(false);

                entity.ToTable("z_Vars", "dbo");

                entity.Property(e => e.VarName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectDef).HasColumnType("text");

                entity.Property(e => e.VarDesc)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarExtInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.VarGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarPosId).HasColumnName("VarPosID");

                entity.Property(e => e.VarValue)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.AppCodeNavigation)
                    .WithMany(p => p.ZVars)
                    .HasForeignKey(d => d.AppCode)
                    .HasConstraintName("FK_z_Vars_z_Apps");

                entity.HasOne(d => d.VarPageCodeNavigation)
                    .WithMany(p => p.ZVars)
                    .HasForeignKey(d => d.VarPageCode)
                    .HasConstraintName("FK_z_Vars_z_VarPages");
            });

            modelBuilder.Entity<ZVarPage>(entity =>
            {
                entity.HasKey(e => e.VarPageCode)
                    .HasName("pk_z_VarPages")
                    .IsClustered(false);

                entity.ToTable("z_VarPages", "dbo");

                entity.Property(e => e.VarPageCode).ValueGeneratedNever();

                entity.Property(e => e.VarPageName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VarPagePosId).HasColumnName("VarPagePosID");
            });

            modelBuilder.Entity<ZVarsOpenAgeBeginHistory>(entity =>
            {
                entity.HasKey(e => e.EventTs)
                    .HasName("PK__z_Vars-O__7947376F74CE9810");

                entity.ToTable("z_Vars-OpenAgeBegin-History", "dbo");

                entity.Property(e => e.EventTs)
                    .HasColumnType("datetime")
                    .HasColumnName("EventTS");

                entity.Property(e => e.New).HasColumnType("datetime");

                entity.Property(e => e.Old).HasColumnType("datetime");
            });

            modelBuilder.Entity<ZVarsTv>(entity =>
            {
                entity.HasKey(e => e.ChId);

                entity.ToTable("z_VarsTV", "dbo");

                entity.Property(e => e.ChId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChID");

                entity.Property(e => e.VarTvname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("VarTVName");

                entity.Property(e => e.VarTvvalue)
                    .IsUnicode(false)
                    .HasColumnName("VarTVValue");

                entity.Property(e => e.VatTvdesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("VatTVDesc");
            });

            modelBuilder.Entity<ZWcopy>(entity =>
            {
                entity.HasKey(e => e.CopyId)
                    .HasName("_pk_z_WCopy");

                entity.ToTable("z_WCopy", "dbo");

                entity.HasIndex(e => e.CopyName, "CopyName")
                    .IsUnique();

                entity.HasIndex(e => e.DstDocType, "DstDocType");

                entity.HasIndex(e => e.SrcDocType, "SrcDocType");

                entity.Property(e => e.CopyId)
                    .ValueGeneratedNever()
                    .HasColumnName("CopyID");

                entity.Property(e => e.CopyDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CopyName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DbbaseName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DBBaseName");

                entity.Property(e => e.DbserverName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DBServerName");

                entity.Property(e => e.DbsourceMode).HasColumnName("DBSourceMode");

                entity.Property(e => e.DbuserName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DBUserName");

                entity.Property(e => e.DocLinkTypeId).HasColumnName("DocLinkTypeID");

                entity.Property(e => e.LinkDocsWithSum)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.MarkCopyInBkeep).HasColumnName("MarkCopyInBKeep");

                entity.Property(e => e.ScAfterRun).HasColumnType("text");

                entity.Property(e => e.ScBeforeRun).HasColumnType("text");

                entity.Property(e => e.StartDesc1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StartDesc2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateStatId).HasColumnName("UpdateStatID");
            });

            modelBuilder.Entity<ZWcopyD>(entity =>
            {
                entity.HasKey(e => new { e.CopyId, e.TablePosId })
                    .HasName("_pk_z_WCopyD");

                entity.ToTable("z_WCopyD", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .IsUnique();

                entity.HasIndex(e => e.CopyId, "CopyID");

                entity.HasIndex(e => new { e.CopyId, e.TableCode }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.ParentPosId, "ParentPosID");

                entity.HasIndex(e => e.TableCode, "TableCode");

                entity.HasIndex(e => e.TablePosId, "TablePosID");

                entity.Property(e => e.CopyId).HasColumnName("CopyID");

                entity.Property(e => e.TablePosId).HasColumnName("TablePosID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.ParentPosId).HasColumnName("ParentPosID");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZWcopyDs)
                    .HasForeignKey(d => d.TableCode)
                    .HasConstraintName("FK_z_WCopyD_z_Tables");
            });

            modelBuilder.Entity<ZWcopyDf>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.FieldPosId })
                    .HasName("_pk_z_WCopyDF");

                entity.ToTable("z_WCopyDF", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.FieldPosId, "FieldPosID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.FieldDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZWcopyDv>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.FieldPosId, e.VariantPosId })
                    .HasName("_pk_z_WCopyDV");

                entity.ToTable("z_WCopyDV", "dbo");

                entity.HasIndex(e => new { e.UvarType, e.UintPosId }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.SrcAchId, "SrcAChID");

                entity.HasIndex(e => e.SrcFieldPosId, "SrcFieldPosID");

                entity.HasIndex(e => e.UintPosId, "UIntPosID");

                entity.HasIndex(e => e.UvarPosId, "UVarPosID");

                entity.HasIndex(e => e.UvarType, "UVarType");

                entity.HasIndex(e => e.VariantPosId, "VariantPosID");

                entity.HasIndex(e => new { e.AchId, e.FieldPosId }, "z_WCopyDFz_WCopyDV");

                entity.HasIndex(e => new { e.SrcAchId, e.SrcFieldPosId }, "z_WCopyFz_WCopyDV");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.VariantPosId).HasColumnName("VariantPosID");

                entity.Property(e => e.ExcDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExcEexp)
                    .HasColumnType("text")
                    .HasColumnName("ExcEExp");

                entity.Property(e => e.ExcNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExcRexp)
                    .HasColumnType("text")
                    .HasColumnName("ExcRExp");

                entity.Property(e => e.SrcAchId).HasColumnName("SrcAChID");

                entity.Property(e => e.SrcFieldPosId).HasColumnName("SrcFieldPosID");

                entity.Property(e => e.UintPosId).HasColumnName("UIntPosID");

                entity.Property(e => e.UvarPosId).HasColumnName("UVarPosID");

                entity.Property(e => e.UvarType).HasColumnName("UVarType");
            });

            modelBuilder.Entity<ZWcopyF>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.FieldPosId })
                    .HasName("_pk_z_WCopyF");

                entity.ToTable("z_WCopyF", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => e.FieldName, "FieldName");

                entity.HasIndex(e => e.FieldPosId, "FieldPosID");

                entity.HasIndex(e => e.FieldSortPosId, "FieldSortPosID");

                entity.HasIndex(e => e.FieldSuffix, "FieldSuffix");

                entity.HasIndex(e => new { e.AchId, e.FieldSortPosId }, "NoDuplicate")
                    .IsUnique();

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.FieldDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FieldFilterUser)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FieldSortPosId).HasColumnName("FieldSortPosID");

                entity.Property(e => e.FieldSuffix)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZWcopyFf>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.FieldPosId, e.FilterPosId })
                    .HasName("_pk_z_WCopyFF");

                entity.ToTable("z_WCopyFF", "dbo");

                entity.HasIndex(e => e.AchId, "AChID");

                entity.HasIndex(e => new { e.UvarType, e.UintPosId }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.UintPosId, "UIntPosID");

                entity.HasIndex(e => e.UvarPosId, "UVarPosID");

                entity.HasIndex(e => e.UvarType, "UVarType");

                entity.HasIndex(e => new { e.AchId, e.FieldPosId }, "z_WCopyFz_WCopyFF");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.FilterPosId).HasColumnName("FilterPosID");

                entity.Property(e => e.FieldFilterInt)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FilterDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilterNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UintPosId).HasColumnName("UIntPosID");

                entity.Property(e => e.UvarPosId).HasColumnName("UVarPosID");

                entity.Property(e => e.UvarType).HasColumnName("UVarType");
            });

            modelBuilder.Entity<ZWcopyFuf>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.FieldPosId, e.UserId })
                    .HasName("_pk_z_WCopyFUF");

                entity.ToTable("z_WCopyFUF", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.FieldPosId, "FieldPosID")
                    .HasFillFactor(90);

                entity.HasIndex(e => e.UserId, "UserID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.AchId, e.FieldPosId }, "z_WCopyFz_WCopyFUF")
                    .HasFillFactor(90);

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.FieldFilterUser)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZWcopyFv>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.FieldPosId, e.VariantPosId })
                    .HasName("_pk_z_WCopyFV");

                entity.ToTable("z_WCopyFV", "dbo");

                entity.HasIndex(e => new { e.UvarType, e.UintPosId }, "NoDuplicate")
                    .IsUnique();

                entity.HasIndex(e => e.UintPosId, "UIntPosID");

                entity.HasIndex(e => e.UvarPosId, "UVarPosID");

                entity.HasIndex(e => e.UvarType, "UVarType");

                entity.HasIndex(e => new { e.AchId, e.FieldPosId }, "z_WCopyFz_WCopyFV");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.VariantPosId).HasColumnName("VariantPosID");

                entity.Property(e => e.EfieldExp)
                    .HasColumnType("text")
                    .HasColumnName("EFieldExp");

                entity.Property(e => e.FieldFilterInt)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FieldFilterUser)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.RfieldExp)
                    .HasColumnType("text")
                    .HasColumnName("RFieldExp");

                entity.Property(e => e.UintPosId).HasColumnName("UIntPosID");

                entity.Property(e => e.UvarPosId).HasColumnName("UVarPosID");

                entity.Property(e => e.UvarType).HasColumnName("UVarType");

                entity.Property(e => e.VarDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VarNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZWcopyFvuf>(entity =>
            {
                entity.HasKey(e => new { e.AchId, e.FieldPosId, e.UserId, e.VariantPosId })
                    .HasName("_pk_z_WCopyFVUF");

                entity.ToTable("z_WCopyFVUF", "dbo");

                entity.HasIndex(e => e.UserId, "UserID")
                    .HasFillFactor(90);

                entity.HasIndex(e => new { e.AchId, e.FieldPosId, e.VariantPosId }, "z_WCopyFVz_WCopyFVUF")
                    .HasFillFactor(90);

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.FieldPosId).HasColumnName("FieldPosID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.VariantPosId).HasColumnName("VariantPosID");

                entity.Property(e => e.FieldFilterUser)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZWcopyP>(entity =>
            {
                entity.HasKey(e => new { e.CopyId, e.ParamPosId })
                    .HasName("_pk_z_WCopyP");

                entity.ToTable("z_WCopyP", "dbo");

                entity.HasIndex(e => e.CopyId, "CopyID");

                entity.HasIndex(e => new { e.CopyId, e.ParamDesc }, "NoDuplicate")
                    .IsUnique();

                entity.Property(e => e.CopyId).HasColumnName("CopyID");

                entity.Property(e => e.ParamPosId).HasColumnName("ParamPosID");

                entity.Property(e => e.DataType).HasDefaultValueSql("(1)");

                entity.Property(e => e.ParamDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParamEexp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ParamEExp");

                entity.Property(e => e.ParamRexp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ParamRExp");
            });

            modelBuilder.Entity<ZWcopyT>(entity =>
            {
                entity.HasKey(e => new { e.CopyId, e.TablePosId })
                    .HasName("_pk_z_WCopyT");

                entity.ToTable("z_WCopyT", "dbo");

                entity.HasIndex(e => e.AchId, "AChID")
                    .IsUnique();

                entity.HasIndex(e => e.CopyId, "CopyID");

                entity.HasIndex(e => e.ParentPosId, "ParentPosID");

                entity.HasIndex(e => e.TableCode, "TableCode");

                entity.HasIndex(e => e.TablePosId, "TablePosID");

                entity.HasIndex(e => e.TableSuffix, "TableSuffix");

                entity.Property(e => e.CopyId).HasColumnName("CopyID");

                entity.Property(e => e.TablePosId).HasColumnName("TablePosID");

                entity.Property(e => e.AchId).HasColumnName("AChID");

                entity.Property(e => e.ParentPosId).HasColumnName("ParentPosID");

                entity.Property(e => e.RelName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NONE')");

                entity.Property(e => e.TableSuffix)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.RelNameNavigation)
                    .WithMany(p => p.ZWcopyTs)
                    .HasForeignKey(d => d.RelName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_z_WCopyT_z_Relations");

                entity.HasOne(d => d.TableCodeNavigation)
                    .WithMany(p => p.ZWcopyTs)
                    .HasForeignKey(d => d.TableCode)
                    .HasConstraintName("FK_z_WCopyT_z_Tables");
            });

            modelBuilder.Entity<ZWcopyU>(entity =>
            {
                entity.HasKey(e => new { e.CopyId, e.SrcDocType, e.UserId })
                    .HasName("_pk_z_WCopyU");

                entity.ToTable("z_WCopyU", "dbo");

                entity.Property(e => e.CopyId).HasColumnName("CopyID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ZWcopyUv>(entity =>
            {
                entity.HasKey(e => new { e.CopyId, e.UvarAskPosId })
                    .HasName("_pk_z_WCopyUV");

                entity.ToTable("z_WCopyUV", "dbo");

                entity.HasIndex(e => e.CopyId, "CopyID");

                entity.HasIndex(e => e.IntType, "IntType");

                entity.HasIndex(e => e.UvarAskPosId, "UVarAskPosID");

                entity.HasIndex(e => e.UvarPosId, "UVarPosID")
                    .IsUnique();

                entity.HasIndex(e => e.UvarType, "UVarType");

                entity.Property(e => e.CopyId).HasColumnName("CopyID");

                entity.Property(e => e.UvarAskPosId).HasColumnName("UVarAskPosID");

                entity.Property(e => e.UvarDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UVarDesc");

                entity.Property(e => e.UvarNotes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("UVarNotes");

                entity.Property(e => e.UvarPosId).HasColumnName("UVarPosID");

                entity.Property(e => e.UvarType).HasColumnName("UVarType");
            });

            modelBuilder.HasSequence("CountByNeg1", "test")
                .StartsAt(0)
                .IncrementsBy(-1);

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
